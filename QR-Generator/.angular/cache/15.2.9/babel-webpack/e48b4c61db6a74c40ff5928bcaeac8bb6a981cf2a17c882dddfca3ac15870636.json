{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate';\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}/login`, data);\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  checkAuthenticationState() {\n    // This method should refresh authentication state if needed\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,yCAAyC;EAEnB;EAEvCC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC;EACrD;EAEAG,QAAQ,CAACH,IAAS;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC,CAAC,CAAC;EAC1D;;EAEAI,OAAO,CAACC,IAAY;IAClBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC;EACpC;EAEAG,OAAO;IACL,OAAOF,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;EACrC;EAIAC,wBAAwB;IACtB;EAAA;EACD;qBAzBUd,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAe,SAAXf,WAAW;IAAAgB,YAFV;EAAM","names":["AuthService","constructor","http","login","data","post","apiUrl","register","setRole","role","localStorage","setItem","getRole","getItem","checkAuthenticationState","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate';\n\n  constructor(private http: HttpClient) {}\n\n  login(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, data);\n  }\n\n  register(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n\n  \n\n  checkAuthenticationState() {\n    // This method should refresh authentication state if needed\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}