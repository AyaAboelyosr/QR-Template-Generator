{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n  static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAYA,OAAM,MAAOA,sBAAsB;EAEjCC,eAAgB;EAEhBC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;QACvBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE;OAC5D,CAAC;MACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;KAC3B,MAAM;MACL,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;;EAG3B;EAAC;qBAfUH,sBAAsB;EAAA;EAAA;WAAtBA,sBAAsB;IAAAa,SAAtBb,sBAAsB;IAAAc,YAFrB;EAAM","names":["AuthInterceptorService","constructor","intercept","req","next","token","localStorage","getItem","cloned","clone","headers","set","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\interceptors\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService {\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}