{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"angular-custom-modal\";\nconst _c0 = [\"addFieldModal\"];\nconst _c1 = [\"addSectionModal\"];\nfunction TemplateItemComponent_div_17_div_12_div_1_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_div_17_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"div\")(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵtemplate(5, TemplateItemComponent_div_17_div_12_div_1_span_5_Template, 2, 0, \"span\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\")(7, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_div_12_div_1_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const field_r14 = restoredCtx.$implicit;\n      const section_r11 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.editField(section_r11.id, field_r14));\n    });\n    i0.ɵɵtext(8, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_div_12_div_1_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const field_r14 = restoredCtx.$implicit;\n      const section_r11 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.deleteField(section_r11.id, field_r14.id));\n    });\n    i0.ɵɵtext(10, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const field_r14 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(field_r14.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" (\", field_r14.type, \") - \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", field_r14.isRequired);\n  }\n}\nfunction TemplateItemComponent_div_17_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TemplateItemComponent_div_17_div_12_div_1_Template, 11, 3, \"div\", 18);\n    i0.ɵɵelementStart(2, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_div_12_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const section_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.openAddFieldModal(section_r11.id));\n    });\n    i0.ɵɵtext(3, \"Add Field\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r11 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", section_r11.fields);\n  }\n}\nfunction TemplateItemComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12)(2, \"h3\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\")(5, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.editSection(section_r11));\n    });\n    i0.ɵɵtext(6, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.deleteSection(section_r11.id));\n    });\n    i0.ɵɵtext(8, \"Delete\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"div\", 15);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_17_Template_div_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.toggleSection(section_r11));\n    });\n    i0.ɵɵelementStart(10, \"div\", 16);\n    i0.ɵɵtext(11, \"Fields\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, TemplateItemComponent_div_17_div_12_Template, 4, 1, \"div\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r11 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r11.title);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", section_r11.expanded);\n  }\n}\nfunction TemplateItemComponent_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.sectionParams.controls[\"id\"].value ? \"Edit Section\" : \"Add Section\");\n  }\n}\nfunction TemplateItemComponent_ng_template_24_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_24_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_24_div_5_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r29.sectionParams.controls[\"title\"].errors == null ? null : ctx_r29.sectionParams.controls[\"title\"].errors[\"required\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 24);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateItemComponent_ng_template_24_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.saveSection());\n    });\n    i0.ɵɵelementStart(1, \"div\", 25)(2, \"label\", 26);\n    i0.ɵɵtext(3, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 27);\n    i0.ɵɵtemplate(5, TemplateItemComponent_ng_template_24_div_5_Template, 2, 1, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 25)(7, \"label\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n    i0.ɵɵelement(11, \"input\", 28);\n    i0.ɵɵtext(12, \" Form \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"label\");\n    i0.ɵɵelement(14, \"input\", 29);\n    i0.ɵɵtext(15, \" Table \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"div\", 30)(17, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_template_24_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r32);\n      i0.ɵɵnextContext();\n      const _r1 = i0.ɵɵreference(21);\n      return i0.ɵɵresetView(_r1.close());\n    });\n    i0.ɵɵtext(18, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 32);\n    i0.ɵɵtext(20, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r5.sectionParams);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.sectionParams.controls[\"title\"].invalid && ctx_r5.sectionParams.controls[\"title\"].touched);\n  }\n}\nfunction TemplateItemComponent_ng_template_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.fieldParams.controls[\"id\"].value ? \"Edit Field\" : \"Add Field\");\n  }\n}\nfunction TemplateItemComponent_ng_template_30_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_30_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_30_div_5_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r34.fieldParams.controls[\"title\"].errors == null ? null : ctx_r34.fieldParams.controls[\"title\"].errors[\"required\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 24);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateItemComponent_ng_template_30_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r37);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.saveField());\n    });\n    i0.ɵɵelementStart(1, \"div\", 25)(2, \"label\", 33);\n    i0.ɵɵtext(3, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 34);\n    i0.ɵɵtemplate(5, TemplateItemComponent_ng_template_30_div_5_Template, 2, 1, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 25)(7, \"label\", 35);\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"select\", 36)(10, \"option\", 37);\n    i0.ɵɵtext(11, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"option\", 38);\n    i0.ɵɵtext(13, \"Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 39);\n    i0.ɵɵtext(15, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"option\", 40);\n    i0.ɵɵtext(17, \"Boolean\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 25)(19, \"label\", 41);\n    i0.ɵɵtext(20, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"div\", 30)(23, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_template_30_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r37);\n      i0.ɵɵnextContext();\n      const _r6 = i0.ɵɵreference(27);\n      return i0.ɵɵresetView(_r6.close());\n    });\n    i0.ɵɵtext(24, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 32);\n    i0.ɵɵtext(26, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r10.fieldParams);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.fieldParams.controls[\"title\"].invalid && ctx_r10.fieldParams.controls[\"title\"].touched);\n  }\n}\nexport class TemplateItemComponent {\n  constructor() {\n    this._TemplateService = inject(TemplateService);\n    this._router = inject(ActivatedRoute);\n    this._fb = inject(FormBuilder);\n    this.currentSectionId = null;\n    this.templateData = {};\n    this.displayType = 'grid';\n  }\n  ngOnInit() {\n    this.templateId = this._router.snapshot.paramMap.get('id');\n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n  initSectionForm() {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n  openAddFieldModal(sectionId) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({\n      type: 'Text',\n      isRequired: false,\n      title: ''\n    });\n    this.addFieldModal.open();\n  }\n  openAddSectionModal() {\n    this.sectionParams.reset({\n      type: 'form'\n    });\n    this.addSectionModal.open();\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n    const fieldData = this.fieldParams.value;\n    if (!fieldData.title || fieldData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n    // Wrap the payload in addFieldDTO\n    const requestData = {\n      addFieldDTO: {\n        id: fieldData.id,\n        title: fieldData.title,\n        type: mappedType,\n        isRequired: fieldData.isRequired\n      }\n    };\n    if (fieldData.id) {\n      // Edit existing field\n      this._TemplateService.updateField(this.templateId, this.currentSectionId.toString(), fieldData.id.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            const fieldIndex = section.fields.findIndex(f => f.id === fieldData.id);\n            if (fieldIndex !== -1) {\n              section.fields[fieldIndex] = res;\n            }\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error updating field:', error);\n        }\n      });\n    } else {\n      // Add new field\n      this._TemplateService.addField(this.templateId, this.currentSectionId.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            section.fields.push(res);\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error adding field:', error);\n        }\n      });\n    }\n  }\n  getTemplatebyId() {\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: res => {\n        console.log('Template id', this.templateId);\n        console.log('Result =', res);\n        this.templateData = res;\n      },\n      error: error => {\n        console.error('Error:', error);\n      }\n    });\n  }\n  toggleSection(section) {\n    section.expanded = !section.expanded;\n  }\n  toggleField(field) {\n    field.expanded = !field.expanded;\n  }\n  addSection() {\n    const newSection = {\n      title: 'New Section',\n      type: this.mapSectionType('Form'),\n      fields: [],\n      expanded: false\n    };\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  // The mapSectionType method\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'form': 0,\n      'table': 1 // Assuming 1 is for \"Table\"\n    };\n\n    return sectionTypeMap[type.toLowerCase()] ?? 0; // Default to 0 if the type is not found\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n    const sectionData = this.sectionParams.value;\n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type)\n    };\n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData).subscribe({\n        next: res => {\n          const sectionIndex = this.templateData.sections.findIndex(s => s.id === sectionData.id);\n          if (sectionIndex !== -1) {\n            this.templateData.sections[sectionIndex] = res;\n          }\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error updating section:', error);\n        }\n      });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData).subscribe({\n        next: res => {\n          this.templateData.sections.push(res);\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error adding section:', error);\n        }\n      });\n    }\n  }\n  editSection(section) {\n    // Initialize the form before setting values\n    this.initSectionForm();\n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  deleteSection(sectionId) {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter(s => s.id !== sectionId);\n      },\n      error: error => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n  // field methods \n  addField(sectionId) {\n    const newField = {\n      title: '',\n      type: 'Text',\n      isRequired: false,\n      expanded: false\n    };\n    // Convert sectionId to string before passing it to the service\n    this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n      next: res => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields.push(res);\n        }\n      },\n      error: error => {\n        console.error('Error adding field:', error);\n      }\n    });\n  }\n  editField(sectionId, field) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.patchValue(field);\n    this.addFieldModal.open();\n  }\n  deleteField(sectionId, fieldId) {\n    // Convert both sectionId and fieldId to strings before passing to the service\n    this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields = section.fields.filter(f => f.id !== fieldId);\n        }\n      },\n      error: error => {\n        console.error('Error deleting field:', error);\n      }\n    });\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n  }\n  static #_ = this.ɵfac = function TemplateItemComponent_Factory(t) {\n    return new (t || TemplateItemComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateItemComponent,\n    selectors: [[\"app-template-item\"]],\n    viewQuery: function TemplateItemComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n      }\n    },\n    decls: 32,\n    vars: 4,\n    consts: [[1, \"container\", \"mx-auto\", \"p-6\"], [1, \"bg-white\", \"shadow-md\", \"rounded-lg\", \"p-6\"], [1, \"text-xl\", \"font-semibold\", \"mb-4\"], [1, \"grid\", \"grid-cols-3\", \"gap-4\", \"border-b\", \"pb-4\", \"mb-4\"], [\"class\", \"border rounded-lg p-4 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"no-footer\"], [\"addSectionModal\", \"\"], [\"modalHeader\", \"\"], [\"modalBody\", \"\"], [\"addFieldModal\", \"\"], [1, \"border\", \"rounded-lg\", \"p-4\", \"mb-4\"], [1, \"flex\", \"justify-between\", \"items-center\", \"mb-2\"], [1, \"text-lg\", \"font-semibold\"], [1, \"btn\", \"btn-danger\", \"ml-2\", 3, \"click\"], [1, \"cursor-pointer\", 3, \"click\"], [1, \"text-md\", \"font-semibold\", \"mb-2\"], [4, \"ngIf\"], [\"class\", \"flex justify-between items-center py-1\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-outline-primary\", \"mt-2\", 3, \"click\"], [1, \"flex\", \"justify-between\", \"items-center\", \"py-1\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [1, \"text-red-500\"], [1, \"!font-medium\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-5\"], [\"for\", \"sectionTitle\"], [\"id\", \"sectionTitle\", \"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Enter Title\", 1, \"form-input\"], [\"type\", \"radio\", \"formControlName\", \"type\", \"value\", \"form\"], [\"type\", \"radio\", \"formControlName\", \"type\", \"value\", \"table\"], [1, \"mt-8\", \"flex\", \"items-center\", \"justify-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ltr:ml-4\", \"rtl:ml-4\"], [\"for\", \"fieldTitle\"], [\"id\", \"fieldTitle\", \"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Enter Title\", 1, \"form-input\"], [\"for\", \"fieldType\"], [\"id\", \"fieldType\", \"formControlName\", \"type\", 1, \"form-select\"], [\"value\", \"Text\"], [\"value\", \"Number\"], [\"value\", \"Date\"], [\"value\", \"Boolean\"], [\"for\", \"isRequired\"], [\"id\", \"isRequired\", \"type\", \"checkbox\", \"formControlName\", \"isRequired\"]],\n    template: function TemplateItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3, \"Template Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\")(6, \"strong\");\n        i0.ɵɵtext(7, \"ID:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\")(10, \"strong\");\n        i0.ɵɵtext(11, \"Title:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\")(14, \"strong\");\n        i0.ɵɵtext(15, \"Unique Code:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(17, TemplateItemComponent_div_17_Template, 13, 2, \"div\", 4);\n        i0.ɵɵelementStart(18, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function TemplateItemComponent_Template_button_click_18_listener() {\n          return ctx.openAddSectionModal();\n        });\n        i0.ɵɵtext(19, \"Add Section\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(20, \"modal\", 6, 7);\n        i0.ɵɵtemplate(22, TemplateItemComponent_ng_template_22_Template, 2, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(24, TemplateItemComponent_ng_template_24_Template, 21, 2, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"modal\", 6, 10);\n        i0.ɵɵtemplate(28, TemplateItemComponent_ng_template_28_Template, 2, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(30, TemplateItemComponent_ng_template_30_Template, 27, 2, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.id, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.title, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.uniqueCode, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.templateData.sections);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.RadioControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i3.ModalComponent, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1pdGVtLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWl0ZW0vdGVtcGxhdGUtaXRlbS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw0S0FBNEsiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["inject","FormBuilder","Validators","TemplateService","ActivatedRoute","i0","TemplateItemComponent","constructor","ngOnInit","templateId","_router","snapshot","paramMap","get","getTemplatebyId","initFieldForm","initSectionForm","sectionParams","_fb","group","id","title","required","minLength","maxLength","type","fieldParams","isRequired","openAddFieldModal","sectionId","currentSectionId","reset","addFieldModal","open","openAddSectionModal","addSectionModal","saveField","invalid","console","log","fieldData","value","trim","error","mappedType","mapFieldType","requestData","addFieldDTO","_TemplateService","updateField","toString","subscribe","next","res","section","templateData","sections","find","s","fieldIndex","fields","findIndex","f","close","addField","push","getTemplateById","toggleSection","expanded","toggleField","field","addSection","newSection","mapSectionType","sectionTypeMap","toLowerCase","saveSection","sectionData","updateSection","sectionIndex","editSection","setValue","deleteSection","filter","newField","editField","patchValue","deleteField","fieldId","fieldTypeMap","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.html"],"sourcesContent":["import { Component, inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})\nexport class TemplateItemComponent implements OnInit {\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n\n  _TemplateService=inject(TemplateService);\n  _router=inject(ActivatedRoute);\n  _fb = inject(FormBuilder);\n  fieldParams!: FormGroup;\n  sectionParams!: FormGroup;\n  currentSectionId: number | null = null;\n  templateData: any = {};\n  displayType: string = 'grid'; \n  templateId!: string;\n  ngOnInit(): void {\n    this.templateId = this._router.snapshot.paramMap.get('id')!; \n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n\n  initSectionForm(): void {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],  // Title validation\n      type: ['', Validators.required]\n    });\n  }\n  \n  \n\n  initFieldForm(): void {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n\n  openAddFieldModal(sectionId: number): void {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({ type: 'Text', isRequired: false, title: '' });\n    this.addFieldModal.open();\n  }\n  \n\n  openAddSectionModal(): void {\n    this.sectionParams.reset({ type: 'form' });\n    this.addSectionModal.open();\n  }\n\n  saveField(): void {\n    if (this.fieldParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n  \n    const fieldData = this.fieldParams.value;\n  \n    if (!fieldData.title || fieldData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n  \n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n  \n    // Wrap the payload in addFieldDTO\n    const requestData = {\n      addFieldDTO: {\n        id: fieldData.id,\n        title: fieldData.title,\n        type: mappedType, // Use the mapped enum value\n        isRequired: fieldData.isRequired\n      }\n    };\n  \n    if (fieldData.id) {\n      // Edit existing field\n      this._TemplateService.updateField(this.templateId, this.currentSectionId!.toString(), fieldData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              const fieldIndex = section.fields.findIndex((f: any) => f.id === fieldData.id);\n              if (fieldIndex !== -1) {\n                section.fields[fieldIndex] = res;\n              }\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating field:', error);\n          }\n        });\n    } else {\n      // Add new field\n      this._TemplateService.addField(this.templateId, this.currentSectionId!.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              section.fields.push(res);\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding field:', error);\n          }\n        });\n    }\n  }\n  \n\n  getTemplatebyId(){\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: (res) => {\n        console.log( 'Template id',this.templateId);\n        console.log('Result =' ,res);\n        this.templateData = res;\n       \n      },\n      error: (error) => {\n        console.error('Error:', error);\n      }\n\n\n    })\n  }\n  \n  toggleSection(section: any) {\n    section.expanded = !section.expanded;\n  }\n  \n  \n\n  toggleField(field: any): void {\n    field.expanded = !field.expanded;\n  }\n\n  addSection(): void {\n    const newSection = {\n      title: 'New Section',  // Ensure the title is not empty and has at least 3 characters\n      type: this.mapSectionType('Form'), // Default type 'Form'\n      fields: [],\n      expanded: false\n    };\n  \n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  \n  // The mapSectionType method\n  private mapSectionType(type: string): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'form': 0,   // Assuming 0 is for \"Form\"\n      'table': 1,  // Assuming 1 is for \"Table\"\n    };\n    return sectionTypeMap[type.toLowerCase()] ?? 0;  // Default to 0 if the type is not found\n  }\n  \n\n  saveSection(): void {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n  \n    const sectionData = this.sectionParams.value;\n  \n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n  \n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type),\n    };\n  \n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const sectionIndex = this.templateData.sections.findIndex((s: any) => s.id === sectionData.id);\n            if (sectionIndex !== -1) {\n              this.templateData.sections[sectionIndex] = res;\n            }\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating section:', error);\n          }\n        });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData)\n        .subscribe({\n          next: (res) => {\n            this.templateData.sections.push(res);\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding section:', error);\n          }\n        });\n    }\n  }\n  \n  \n  editSection(section: any): void {\n    // Initialize the form before setting values\n    this.initSectionForm();\n  \n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  \n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  \n\n  deleteSection(sectionId: number): void {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter((s: any) => s.id !== sectionId);\n      },\n      error: (error) => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n// field methods \n\naddField(sectionId: number): void {\n  const newField = {\n    title: '',\n    type: 'Text', // Default type 'Text'\n    isRequired: false,\n    expanded: false\n  };\n\n  // Convert sectionId to string before passing it to the service\n  this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n    next: (res) => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields.push(res);\n      }\n    },\n    error: (error) => {\n      console.error('Error adding field:', error);\n    }\n  });\n}\n\neditField(sectionId: number, field: any): void {\n  this.currentSectionId = sectionId;\n  this.fieldParams.patchValue(field);\n  this.addFieldModal.open();\n}\n\ndeleteField(sectionId: number, fieldId: number): void {\n  // Convert both sectionId and fieldId to strings before passing to the service\n  this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n    next: () => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields = section.fields.filter((f: any) => f.id !== fieldId);\n      }\n    },\n    error: (error) => {\n      console.error('Error deleting field:', error);\n    }\n  });\n}\n\n\n\nprivate mapFieldType(type: string): number {\n  const fieldTypeMap: { [key: string]: number } = {\n    'Text': 0,\n    'Number': 1,\n    'Date': 2,\n    'Boolean': 3\n  };\n  return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n}\n\n\n\n\n}\n","<!-- <div class=\"template-details-container\">\n    <h2>Template: {{ template.title }}</h2>\n  \n    \n    <div class=\"section-list\">\n      <h3>Sections</h3>\n      <button class=\"btn btn-primary\" (click)=\"editSection(template.id)\">Add Section</button>\n  \n      <div *ngFor=\"let section of template.sections\">\n        <div class=\"section-item\">\n          <h4>{{ section.title }}</h4>\n          <button class=\"btn btn-secondary\" (click)=\"editSection(template.id, section)\">Edit</button>\n          <button class=\"btn btn-danger\" (click)=\"deleteSection(template.id, section.id)\">Delete</button>\n          <button class=\"btn btn-info\" (click)=\"toggleFieldsVisibility(section)\">\n            {{ section.expanded ? 'Hide' : 'Show' }} Fields\n          </button>\n  \n          \n          <div *ngIf=\"section.expanded\">\n            <div *ngFor=\"let field of section.fields\">\n              <div class=\"field-item\">\n                <span>{{ field.title }} ({{ field.type }})</span>\n                <button class=\"btn btn-secondary\" (click)=\"editField(section, field)\">Edit</button>\n                <button class=\"btn btn-danger\" (click)=\"deleteField(section, field.id)\">Delete</button>\n              </div>\n            </div>\n            <button class=\"btn btn-primary\" (click)=\"editField(section)\">Add Field</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n\n    <modal #addSectionModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ sectionParams.value.id ? 'Edit' : 'Add' }} Section</h4>\n          <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Section Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Section Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Form</option> \n                <option value=\"2\">Table</option> \n              </select>\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"sectionParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  \n   \n    <modal #addFieldModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ fieldParams.value.id ? 'Edit' : 'Add' }} Field</h4>\n          <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Field Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Field Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Text</option> \n                <option value=\"2\">Number</option> \n                <option value=\"3\">Date</option> \n                <option value=\"4\">Boolean</option> \n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"isRequired\">Required</label>\n              <input type=\"checkbox\" formControlName=\"isRequired\" class=\"form-check-input\" id=\"isRequired\" />\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"fieldParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  </div>\n   -->\n\n   <div class=\"container mx-auto p-6\">\n    <div class=\"bg-white shadow-md rounded-lg p-6\">\n      <h2 class=\"text-xl font-semibold mb-4\">Template Details</h2>\n      \n      <!-- Template Information -->\n      <div class=\"grid grid-cols-3 gap-4 border-b pb-4 mb-4\">\n        <div><strong>ID:</strong> {{ templateData.id }}</div>\n        <div><strong>Title:</strong> {{ templateData.title }}</div>\n        <div><strong>Unique Code:</strong> {{ templateData.uniqueCode }}</div>\n      </div>\n      \n      <!-- Sections List -->\n      <div *ngFor=\"let section of templateData.sections\" class=\"border rounded-lg p-4 mb-4\">\n        <div class=\"flex justify-between items-center mb-2\">\n          <h3 class=\"text-lg font-semibold\">{{ section.title }}</h3>\n          <div>\n            <button class=\"btn btn-primary\" (click)=\"editSection(section)\">Edit</button>\n            <button class=\"btn btn-danger ml-2\" (click)=\"deleteSection(section.id)\">Delete</button>\n          </div>\n        </div>\n  \n        <!-- Toggle Section -->\n        <div class=\"cursor-pointer\" (click)=\"toggleSection(section)\">\n          <div class=\"text-md font-semibold mb-2\">Fields</div>\n          <div *ngIf=\"section.expanded\">\n            <div *ngFor=\"let field of section.fields\" class=\"flex justify-between items-center py-1\">\n              <div>\n                <strong>{{ field.title }}</strong> ({{ field.type }}) - \n                <span *ngIf=\"field.isRequired\" class=\"text-red-500\">Required</span>\n              </div>\n              <div>\n                <button class=\"btn btn-primary\" (click)=\"editField(section.id, field)\">Edit</button>\n                <button class=\"btn btn-danger ml-2\" (click)=\"deleteField(section.id, field.id)\">Delete</button>\n              </div>\n            </div>\n            <button class=\"btn btn-outline-primary mt-2\" (click)=\"openAddFieldModal(section.id)\">Add Field</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Add Section Button -->\n      <button class=\"btn btn-primary\" (click)=\"openAddSectionModal()\">Add Section</button>\n    </div>\n  </div>\n  \n  <!-- Add/Edit Section Modal -->\n  <modal #addSectionModal class=\"no-footer\">\n    <ng-template #modalHeader>\n      <div class=\"!font-medium\">{{ sectionParams.controls['id'].value ? 'Edit Section' : 'Add Section' }}</div>\n    </ng-template>\n    <ng-template #modalBody>\n      <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n        <div class=\"mb-5\">\n          <label for=\"sectionTitle\">Title</label>\n          <input id=\"sectionTitle\" type=\"text\" class=\"form-input\" formControlName=\"title\" placeholder=\"Enter Title\" />\n          <div *ngIf=\"sectionParams.controls['title'].invalid && sectionParams.controls['title'].touched\" class=\"text-red-500\">\n            <div *ngIf=\"sectionParams.controls['title'].errors?.['required']\">Title is required.</div>\n          </div>\n        </div>\n        <div class=\"mb-5\">\n          <label>Type</label>\n          <div>\n            <label>\n              <input type=\"radio\" formControlName=\"type\" value=\"form\" /> Form\n            </label>\n            <label>\n              <input type=\"radio\" formControlName=\"type\" value=\"table\" /> Table\n            </label>\n          </div>\n        </div>\n        <div class=\"mt-8 flex items-center justify-end\">\n          <button type=\"button\" class=\"btn btn-outline-danger\" (click)=\"addSectionModal.close()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary ltr:ml-4 rtl:ml-4\">Save</button>\n        </div>\n      </form>\n    </ng-template>\n  </modal>\n  \n  <!-- Add/Edit Field Modal -->\n  <modal #addFieldModal class=\"no-footer\">\n    <ng-template #modalHeader>\n      <div class=\"!font-medium\">{{ fieldParams.controls['id'].value ? 'Edit Field' : 'Add Field' }}</div>\n    </ng-template>\n    <ng-template #modalBody>\n      <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n        <div class=\"mb-5\">\n          <label for=\"fieldTitle\">Title</label>\n          <input id=\"fieldTitle\" type=\"text\" class=\"form-input\" formControlName=\"title\" placeholder=\"Enter Title\" />\n          <div *ngIf=\"fieldParams.controls['title'].invalid && fieldParams.controls['title'].touched\" class=\"text-red-500\">\n            <div *ngIf=\"fieldParams.controls['title'].errors?.['required']\">Title is required.</div>\n          </div>\n        </div>\n        <div class=\"mb-5\">\n          <label for=\"fieldType\">Type</label>\n          <select id=\"fieldType\" class=\"form-select\" formControlName=\"type\">\n            <option value=\"Text\">Text</option>\n            <option value=\"Number\">Number</option>\n            <option value=\"Date\">Date</option>\n            <option value=\"Boolean\">Boolean</option>\n          </select>\n        </div>\n        <div class=\"mb-5\">\n          <label for=\"isRequired\">Required</label>\n          <input id=\"isRequired\" type=\"checkbox\" formControlName=\"isRequired\" />\n        </div>\n        <div class=\"mt-8 flex items-center justify-end\">\n          <button type=\"button\" class=\"btn btn-outline-danger\" (click)=\"addFieldModal.close()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary ltr:ml-4 rtl:ml-4\">Save</button>\n        </div>\n      </form>\n    </ng-template>\n  </modal>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}