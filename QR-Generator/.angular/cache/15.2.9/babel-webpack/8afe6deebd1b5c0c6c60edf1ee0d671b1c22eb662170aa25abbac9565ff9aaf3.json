{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class authGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const token = localStorage.getItem('authToken'); // âœ… Check localStorage directly\n    if (token) {\n      return true; // âœ… Allow authenticated users\n    }\n\n    console.log('ðŸ”´ User not authenticated! Redirecting to /auth/login');\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n  static #_ = this.Éµfac = function authGuard_Factory(t) {\n    return new (t || authGuard)(i0.ÉµÉµinject(i1.AuthService), i0.ÉµÉµinject(i2.Router));\n  };\n  static #_2 = this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: authGuard,\n    factory: authGuard.Éµfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,OAAO,IAAI,CAAC,CAAC;;;IAGfG,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACpE,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO,KAAK;EACd;EAAC;qBAZUV,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAW,SAATX,SAAS;IAAAY,YAFR;EAAM","names":["authGuard","constructor","authService","router","canActivate","token","localStorage","getItem","console","log","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class authGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const token = localStorage.getItem('authToken'); // âœ… Check localStorage directly\n    if (token) {\n      return true; // âœ… Allow authenticated users\n    }\n\n    console.log('ðŸ”´ User not authenticated! Redirecting to /auth/login');\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}