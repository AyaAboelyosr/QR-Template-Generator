{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const role = this.authService.getRole(); // Fetch user role\n    if (role === 'Admin') {\n      return true;\n    } else if (role === 'Application User') {\n      this.router.navigate(['/QRCodeGenerator']); // Redirect Employees\n      return false;\n    }\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n  static #_ = this.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,MAAMC,IAAI,GAAG,IAAI,CAACH,WAAW,CAACI,OAAO,EAAE,CAAC,CAAC;IAEzC,IAAID,IAAI,KAAK,OAAO,EAAE;MACpB,OAAO,IAAI;KACZ,MAAM,IAAIA,IAAI,KAAK,kBAAkB,EAAE;MACtC,IAAI,CAACF,MAAM,CAACI,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;MAC5C,OAAO,KAAK;;IAGd,IAAI,CAACJ,MAAM,CAACI,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO,KAAK;EACd;EAAC;qBAfUP,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAQ,SAAVR,UAAU;IAAAS,YAFT;EAAM","names":["AdminGuard","constructor","authService","router","canActivate","role","getRole","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const role = this.authService.getRole(); // Fetch user role\n\n    if (role === 'Admin') {\n      return true; \n    } else if (role === 'Application User') {\n      this.router.navigate(['/QRCodeGenerator']); // Redirect Employees\n      return false;\n    }\n\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}