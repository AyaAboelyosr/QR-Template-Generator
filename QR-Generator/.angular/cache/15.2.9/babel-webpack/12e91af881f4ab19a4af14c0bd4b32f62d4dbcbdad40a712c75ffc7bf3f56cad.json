{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TemplateService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7110/api/TemplateSelector';\n  }\n  getTemplates() {\n    return this.http.get(`${this.apiUrl}`).pipe(catchError(this.handleError));\n  }\n  getTemplateById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  createRecord(record) {\n    return this.http.post(`${this.apiUrl}`, record).pipe(catchError(this.handleError));\n  }\n  // Handle API errors\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static #_ = this.ɵfac = function TemplateService_Factory(t) {\n    return new (t || TemplateService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TemplateService,\n    factory: TemplateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,6CAA6C;EACtB;EAExCC,YAAY;IACV,OAAO,IAAI,CAACD,IAAI,CACbE,GAAG,CAAmB,GAAG,IAAI,CAACC,MAAM,EAAE,CAAC,CACvCC,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EACAC,eAAe,CAACC,EAAU;IACxB,OAAO,IAAI,CAACP,IAAI,CACbE,GAAG,CAAa,GAAG,IAAI,CAACC,MAAM,IAAII,EAAE,EAAE,CAAC,CACvCH,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EACAG,YAAY,CAACC,MAAU;IACrB,OAAO,IAAI,CAACT,IAAI,CACbU,IAAI,CAAS,GAAG,IAAI,CAACP,MAAM,EAAE,EAAEM,MAAM,CAAC,CACtCL,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEA;EACQA,WAAW,CAACM,KAAwB;IAC1C,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;;IAE/EE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOf,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;EAAC;qBAjCUd,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAoB,SAAfpB,eAAe;IAAAqB,YAFd;EAAM","names":["catchError","throwError","TemplateService","constructor","http","getTemplates","get","apiUrl","pipe","handleError","getTemplateById","id","createRecord","record","post","error","errorMessage","ErrorEvent","message","status","console","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\services\\template-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { QRTemplate } from '../viewmodels/qrtemplate';\r\nimport { Response } from  '../viewmodels/response';\r\nimport { QRTemplateInfo } from '../viewmodels/qrtemplate-info';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TemplateService {\r\n\r\n  private apiUrl = 'https://localhost:7110/api/TemplateSelector';\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTemplates(): Observable<QRTemplateInfo[] | Response> {\r\n    return this.http\r\n      .get<QRTemplateInfo[]>(`${this.apiUrl}`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  getTemplateById(id: number): Observable<QRTemplate > {\r\n    return this.http\r\n      .get<QRTemplate>(`${this.apiUrl}/${id}`)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  createRecord(record:any): Observable<Number> {\r\n    return this.http\r\n      .post<Number>(`${this.apiUrl}`, record)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Handle API errors\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.error.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}