{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nfunction TemplateDetailsComponent_div_0_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_0_li_11_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const field_r3 = restoredCtx.$implicit;\n      const section_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.editField(section_r1, field_r3));\n    });\n    i0.ɵɵtext(3, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_0_li_11_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const field_r3 = restoredCtx.$implicit;\n      const section_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.deleteField(section_r1, field_r3.id));\n    });\n    i0.ɵɵtext(5, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", field_r3.title, \" (\", field_r3.type, \") \");\n  }\n}\nfunction TemplateDetailsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_0_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.editSection(section_r1));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_0_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.deleteSection(section_r1.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_0_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.editField(section_r1));\n    });\n    i0.ɵɵtext(9, \"Add Field\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ul\");\n    i0.ɵɵtemplate(11, TemplateDetailsComponent_div_0_li_11_Template, 6, 2, \"li\", 0);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r1.title);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", section_r1.fields);\n  }\n}\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.sections = [];\n    this.selectedSectionId = null;\n  }\n  ngOnInit() {\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadSections();\n  }\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required]\n    });\n  }\n  loadSections() {\n    if (!this.templateId) return;\n    this.templateService.getTemplateById(this.templateId.toString()).subscribe(template => {\n      this.sections = template.sections || [];\n    });\n  }\n  editSection(section = null) {\n    this.selectedSectionId = section ? section.id : null;\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid || !this.templateId) return;\n    const section = this.sectionParams.value;\n    const sectionData = {\n      title: section.title,\n      type: this.mapSectionType(section.type)\n    };\n    if (section.id) {\n      this.templateService.updateSection(this.templateId.toString(), section.id.toString(), sectionData).subscribe(() => {\n        const existingSection = this.sections.find(s => s.id === section.id);\n        if (existingSection) Object.assign(existingSection, section);\n        this.showMessage('Section updated successfully.');\n      });\n    } else {\n      this.templateService.addSection(this.templateId.toString(), sectionData).subscribe(newSection => {\n        this.sections.push(newSection);\n        this.showMessage('Section added successfully.');\n      });\n    }\n  }\n  deleteSection(sectionId) {\n    if (!this.templateId) return;\n    this.templateService.deleteSection(this.templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sections = this.sections.filter(s => s.id !== sectionId);\n      this.showMessage('Section deleted successfully.');\n    });\n  }\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid || !this.selectedSectionId || !this.templateId) return;\n    const field = this.fieldParams.value;\n    const fieldData = {\n      title: field.title,\n      type: this.mapFieldType(field.type),\n      isRequired: field.isRequired\n    };\n    if (field.id) {\n      this.templateService.updateField(this.templateId.toString(), this.selectedSectionId.toString(), field.id.toString(), fieldData).subscribe(() => {\n        const section = this.sections.find(s => s.id === this.selectedSectionId);\n        if (section) {\n          const existingField = section.fields?.find(f => f.id === field.id);\n          if (existingField) Object.assign(existingField, field);\n        }\n        this.showMessage('Field updated successfully.');\n      });\n    } else {\n      this.templateService.addField(this.templateId.toString(), this.selectedSectionId.toString(), fieldData).subscribe(newField => {\n        const section = this.sections.find(s => s.id === this.selectedSectionId);\n        if (section) {\n          if (!section.fields) section.fields = [];\n          section.fields.push(newField);\n        }\n        this.showMessage('Field added successfully.');\n      });\n    }\n  }\n  deleteField(section, fieldId) {\n    if (!this.templateId) return;\n    this.templateService.deleteField(this.templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n      section.fields = section.fields?.filter(f => f.id !== fieldId);\n      this.showMessage('Field deleted successfully.');\n    });\n  }\n  showMessage(msg) {\n    Swal.fire({\n      icon: 'success',\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n  mapSectionType(type) {\n    return type === 'Table' ? 1 : 0;\n  }\n  mapFieldType(type) {\n    const map = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return map[type] ?? 0;\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    inputs: {\n      templateId: \"templateId\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"section-header\"], [3, \"click\"]],\n    template: function TemplateDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TemplateDetailsComponent_div_0_Template, 12, 2, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.sections);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1kZXRhaWxzLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWRldGFpbHMvdGVtcGxhdGUtZGV0YWlscy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","Swal","i0","TemplateDetailsComponent","constructor","fb","templateService","ngOnInit","initSectionForm","initFieldForm","loadSections","sectionParams","group","id","title","required","minLength","maxLength","type","fieldParams","isRequired","templateId","getTemplateById","toString","subscribe","template","sections","editSection","section","selectedSectionId","setValue","saveSection","invalid","value","sectionData","mapSectionType","updateSection","existingSection","find","s","Object","assign","showMessage","addSection","newSection","push","deleteSection","sectionId","filter","editField","field","saveField","fieldData","mapFieldType","updateField","existingField","fields","f","addField","newField","deleteField","fieldId","msg","fire","icon","toast","position","showConfirmButton","timer","map","selectors","inputs","decls","vars","consts"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html',\n  styleUrls: ['./template-details.component.css']\n})\nexport class TemplateDetailsComponent implements OnInit {\n  @Input() templateId!: number; \n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n\n  sections: Section[] = [];\n  selectedSectionId: number | null = null;\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {}\n\n  ngOnInit() {\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadSections();\n  }\n\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required],\n    });\n  }\n\n  loadSections() {\n    if (!this.templateId) return;\n\n    this.templateService.getTemplateById(this.templateId.toString()).subscribe((template) => {\n      this.sections = template.sections || [];\n    });\n  }\n\n  editSection(section: Section | null = null) {\n    this.selectedSectionId = section ? section.id : null;\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid || !this.templateId) return;\n    const section: Section = this.sectionParams.value;\n    const sectionData = { title: section.title, type: this.mapSectionType(section.type) };\n\n    if (section.id) {\n      this.templateService.updateSection(this.templateId.toString(), section.id.toString(), sectionData).subscribe(() => {\n        const existingSection = this.sections.find(s => s.id === section.id);\n        if (existingSection) Object.assign(existingSection, section);\n        this.showMessage('Section updated successfully.');\n      });\n    } else {\n      this.templateService.addSection(this.templateId.toString(), sectionData).subscribe((newSection) => {\n        this.sections.push(newSection);\n        this.showMessage('Section added successfully.');\n      });\n    }\n  }\n\n  deleteSection(sectionId: number) {\n    if (!this.templateId) return;\n\n    this.templateService.deleteSection(this.templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sections = this.sections.filter(s => s.id !== sectionId);\n      this.showMessage('Section deleted successfully.');\n    });\n  }\n\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n\n  saveField() {\n    if (this.fieldParams.invalid || !this.selectedSectionId || !this.templateId) return;\n    const field: Field = this.fieldParams.value;\n    const fieldData = { title: field.title, type: this.mapFieldType(field.type), isRequired: field.isRequired };\n\n    if (field.id) {\n      this.templateService.updateField(this.templateId.toString(), this.selectedSectionId.toString(), field.id.toString(), fieldData).subscribe(() => {\n        const section = this.sections.find(s => s.id === this.selectedSectionId);\n        if (section) {\n          const existingField = section.fields?.find(f => f.id === field.id);\n          if (existingField) Object.assign(existingField, field);\n        }\n        this.showMessage('Field updated successfully.');\n      });\n    } else {\n      this.templateService.addField(this.templateId.toString(), this.selectedSectionId.toString(), fieldData).subscribe((newField) => {\n        const section = this.sections.find(s => s.id === this.selectedSectionId);\n        if (section) {\n          if (!section.fields) section.fields = [];\n          section.fields.push(newField);\n        }\n        this.showMessage('Field added successfully.');\n      });\n    }\n  }\n\n  deleteField(section: Section, fieldId: number) {\n    if (!this.templateId) return;\n\n    this.templateService.deleteField(this.templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n      section.fields = section.fields?.filter(f => f.id !== fieldId);\n      this.showMessage('Field deleted successfully.');\n    });\n  }\n\n  showMessage(msg: string) {\n    Swal.fire({\n      icon: 'success',\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n\n  private mapSectionType(type: string): number {\n    return type === 'Table' ? 1 : 0;\n  }\n\n  private mapFieldType(type: string): number {\n    const map: { [key: string]: number } = { 'Text': 0, 'Number': 1, 'Date': 2, 'Boolean': 3 };\n    return map[type] ?? 0;\n  }\n}\n","<div *ngFor=\"let section of sections\">\n    <div class=\"section-header\">\n      <h3>{{ section.title }}</h3>\n      <button (click)=\"editSection(section)\">Edit</button>\n      <button (click)=\"deleteSection(section.id)\">Delete</button>\n    </div>\n  \n    <button (click)=\"editField(section)\">Add Field</button>\n  \n    <ul>\n      <li *ngFor=\"let field of section.fields\">\n        {{ field.title }} ({{ field.type }})\n        <button (click)=\"editField(section, field)\">Edit</button>\n        <button (click)=\"deleteField(section, field.id)\">Delete</button>\n      </li>\n    </ul>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}