{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { tap, catchError, throwError, BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.redirectUrl = null;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate';\n    this.jwtHelper = new JwtHelperService();\n    this.isLoggedIn = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedIn.asObservable();\n    // Initialize authentication state when service is created\n    this.initializeAuthState();\n  }\n  initializeAuthState() {\n    // Check if user is authenticated when service initializes\n    const token = this.getToken();\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      this.isLoggedIn.next(true);\n    } else {\n      // If token is invalid or expired, clean up\n      this.logout();\n    }\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getAuthHeaders() {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  checkAuthenticationState() {\n    const token = this.getToken();\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      this.isLoggedIn.next(true);\n    } else {\n      this.isLoggedIn.next(false);\n    }\n  }\n  getUserRole() {\n    console.log('Stored role:', localStorage.getItem('role'));\n    return localStorage.getItem('role');\n  }\n  isAdmin() {\n    const token = localStorage.getItem('token');\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      const roles = decodedToken.role || decodedToken['role'] || decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n      console.log('Roles:', roles);\n      return roles === 'Admin';\n    }\n    return false;\n  }\n  login(email, password) {\n    return this.httpClient.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem(\"token\", response.token);\n      this.isLoggedIn.next(true);\n    }), catchError(this.handleError));\n  }\n  register(registrationData) {\n    return this.httpClient.post(`${this.apiUrl}/register`, registrationData).pipe(tap(response => {\n      localStorage.setItem(\"token\", response.token);\n      this.isLoggedIn.next(true);\n    }), catchError(this.handleError));\n  }\n  getUserName() {\n    const token = localStorage.getItem('token');\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      return decodedToken.name || null;\n    }\n    return null;\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token && !this.jwtHelper.isTokenExpired(token);\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('role');\n    this.isLoggedIn.next(false);\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.status === 401) {\n      errorMessage = 'Invalid email or password.';\n    } else if (error.status === 400) {\n      errorMessage = 'Bad request. Please check your input.';\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","JwtHelperService","tap","catchError","throwError","BehaviorSubject","AuthService","constructor","httpClient","isLoggedIn","asObservable","initializeAuthState","token","getToken","jwtHelper","isTokenExpired","next","logout","localStorage","getItem","getAuthHeaders","checkAuthenticationState","getUserRole","console","log","isAdmin","decodedToken","decodeToken","roles","role","login","email","password","post","apiUrl","pipe","response","setItem","handleError","register","registrationData","getUserName","name","isAuthenticated","removeItem","error","errorMessage","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { Observable, tap, catchError, throwError, BehaviorSubject } from 'rxjs';\nimport { RegisterModel } from '../viewmodels/register-model';\nimport { log } from 'console';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  redirectUrl: string | null = null;\n  private apiUrl ='https://localhost:7110/api/Authenticate'\n  private jwtHelper = new JwtHelperService();\n  private isLoggedIn = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedIn.asObservable();\n  \n  constructor(private httpClient: HttpClient) {\n    // Initialize authentication state when service is created\n    this.initializeAuthState();\n  }\n\n  private initializeAuthState(): void {\n    // Check if user is authenticated when service initializes\n    const token = this.getToken();\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      this.isLoggedIn.next(true);\n    } else {\n      // If token is invalid or expired, clean up\n      this.logout();\n    }\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  getAuthHeaders(): HttpHeaders {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    });\n  }\n\n   checkAuthenticationState(): void {\n    const token = this.getToken();\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      this.isLoggedIn.next(true);\n    } else {\n      this.isLoggedIn.next(false);\n    }\n  }\n\n  getUserRole(): string | null {\n    console.log('Stored role:', localStorage.getItem('role'));\n    return localStorage.getItem('role');\n\n  }\n  \n  isAdmin(): boolean {\n    const token = localStorage.getItem('token');\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      const roles = decodedToken.role || decodedToken['role'] || decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n      console.log('Roles:', roles);\n      return roles === 'Admin';\n    }\n    return false;\n  }\n  login(email: string, password: string): Observable<any> {\n    return this.httpClient.post<any>(`${this.apiUrl}/login`, { email, password }).pipe(\n      tap((response) => {\n        \n        localStorage.setItem(\"token\", response.token);\n        this.isLoggedIn.next(true);\n      }),\n      catchError(this.handleError)\n    );\n  }\n  \n  register(registrationData: any): Observable<any> {\n    return this.httpClient.post<any>(\n      `${this.apiUrl}/register`,\n      registrationData\n    ).pipe(\n      tap((response) => {\n        localStorage.setItem(\"token\", response.token);\n        this.isLoggedIn.next(true);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  getUserName(): string | null {\n    const token = localStorage.getItem('token');\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      return decodedToken.name || null;\n    }\n    return null;\n  }\n\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('token');\n    return !!token && !this.jwtHelper.isTokenExpired(token);\n  }\n\n  logout(): void {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('role');\n    this.isLoggedIn.next(false);\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.status === 401) {\n      errorMessage = 'Invalid email or password.';\n    } else if (error.status === 400) {\n      errorMessage = 'Bad request. Please check your input.';\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}