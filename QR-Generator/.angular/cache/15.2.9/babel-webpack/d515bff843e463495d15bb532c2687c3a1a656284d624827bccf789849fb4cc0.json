{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate/login';\n  }\n  login(credentials) {\n    return this.http.post(this.apiUrl, credentials).subscribe(response => {\n      localStorage.setItem('token', response.token);\n      // Decode token to get user role\n      const userRole = this.getRoleFromToken(response.token);\n      // Redirect based on role\n      if (userRole === 'Admin') {\n        this.router.navigate(['/admin']);\n      } else if (userRole === 'Employee') {\n        this.router.navigate(['/QRCodeGenerator']);\n      } else {\n        this.router.navigate(['/auth/login']); // Redirect to login if role is unknown\n      }\n    }, error => {\n      console.error('Login failed:', error);\n    });\n  }\n  getRoleFromToken(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n      return payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || '';\n    } catch (e) {\n      console.error('Error decoding token:', e);\n      return '';\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,WAAM,GAAG,+CAA+C;EAED;EAE/DC,KAAK,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAoB,IAAI,CAACC,MAAM,EAAEF,WAAW,CAAC,CAACG,SAAS,CACzEC,QAAQ,IAAI;MACXC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAE7C;MACA,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACL,QAAQ,CAACG,KAAK,CAAC;MAEtD;MACA,IAAIC,QAAQ,KAAK,OAAO,EAAE;QACxB,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;OACjC,MAAM,IAAIF,QAAQ,KAAK,UAAU,EAAE;QAClC,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;OAC3C,MAAM;QACL,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;IAE3C,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CACF;EACH;EAEAF,gBAAgB,CAACF,KAAa;IAC5B,IAAI;MACF,MAAMM,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvD,OAAOJ,OAAO,CAAC,8DAA8D,CAAC,IAAI,EAAE;KACrF,CAAC,OAAOK,CAAC,EAAE;MACVN,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEO,CAAC,CAAC;MACzC,OAAO,EAAE;;EAEb;EAAC;qBApCUvB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YAFV;EAAM","names":["AuthService","constructor","http","router","login","credentials","post","apiUrl","subscribe","response","localStorage","setItem","token","userRole","getRoleFromToken","navigate","error","console","payload","JSON","parse","atob","split","e","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate/login';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(credentials: { email: string; password: string }) {\n    return this.http.post<{ token: string }>(this.apiUrl, credentials).subscribe(\n      (response) => {\n        localStorage.setItem('token', response.token);\n\n        // Decode token to get user role\n        const userRole = this.getRoleFromToken(response.token);\n\n        // Redirect based on role\n        if (userRole === 'Admin') {\n          this.router.navigate(['/admin']);\n        } else if (userRole === 'Employee') {\n          this.router.navigate(['/QRCodeGenerator']);\n        } else {\n          this.router.navigate(['/auth/login']); // Redirect to login if role is unknown\n        }\n      },\n      (error) => {\n        console.error('Login failed:', error);\n      }\n    );\n  }\n\n  getRoleFromToken(token: string): string {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n      return payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || '';\n    } catch (e) {\n      console.error('Error decoding token:', e);\n      return '';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}