{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate/login';\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}`, data).pipe(tap(response => {\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        // Extract role from token\n        const userRole = this.getRoleFromToken(response.token);\n        this.setRole(userRole);\n        // Redirect based on role\n        if (userRole === 'Admin') {\n          this.router.navigate(['/admin']);\n        } else if (userRole === 'Employee') {\n          this.router.navigate(['/QRCodeGenerator']);\n        } else {\n          this.router.navigate(['/auth/login']); // If no role, redirect to login\n        }\n      }\n    }));\n  }\n\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  getRoleFromToken(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n      return payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || '';\n    } catch (e) {\n      console.error('Error decoding token:', e);\n      return '';\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAKtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,WAAM,GAAG,+CAA+C;EAED;EAE/DC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,EAAE,EAAEF,IAAI,CAAC,CAACG,IAAI,CAChDT,GAAG,CAAEU,QAAa,IAAI;MACpB,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAE7C;QACA,MAAMG,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACL,QAAQ,CAACC,KAAK,CAAC;QACtD,IAAI,CAACK,OAAO,CAACF,QAAQ,CAAC;QAEtB;QACA,IAAIA,QAAQ,KAAK,OAAO,EAAE;UACxB,IAAI,CAACV,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;SACjC,MAAM,IAAIH,QAAQ,KAAK,UAAU,EAAE;UAClC,IAAI,CAACV,MAAM,CAACa,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;SAC3C,MAAM;UACL,IAAI,CAACb,MAAM,CAACa,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;;IAG7C,CAAC,CAAC,CACH;EACH;;EAEAD,OAAO,CAACE,IAAY;IAClBN,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEK,IAAI,CAAC;EACpC;EAEAC,OAAO;IACL,OAAOP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC;EACrC;EAEAL,gBAAgB,CAACJ,KAAa;IAC5B,IAAI;MACF,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvD,OAAOJ,OAAO,CAAC,8DAA8D,CAAC,IAAI,EAAE;KACrF,CAAC,OAAOK,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;MACzC,OAAO,EAAE;;EAEb;EAAC;qBA5CUzB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA4B,SAAX5B,WAAW;IAAA6B,YAFV;EAAM","names":["tap","AuthService","constructor","http","router","login","data","post","apiUrl","pipe","response","token","localStorage","setItem","userRole","getRoleFromToken","setRole","navigate","role","getRole","getItem","payload","JSON","parse","atob","split","e","console","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate/login';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}`, data).pipe(\n      tap((response: any) => {\n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n\n          // Extract role from token\n          const userRole = this.getRoleFromToken(response.token);\n          this.setRole(userRole);\n\n          // Redirect based on role\n          if (userRole === 'Admin') {\n            this.router.navigate(['/admin']);\n          } else if (userRole === 'Employee') {\n            this.router.navigate(['/QRCodeGenerator']);\n          } else {\n            this.router.navigate(['/auth/login']); // If no role, redirect to login\n          }\n        }\n      })\n    );\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n\n  getRoleFromToken(token: string): string {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n      return payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || '';\n    } catch (e) {\n      console.error('Error decoding token:', e);\n      return '';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}