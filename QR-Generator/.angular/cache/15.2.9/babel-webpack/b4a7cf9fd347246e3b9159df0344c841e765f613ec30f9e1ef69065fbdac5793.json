{"ast":null,"code":"import { animate, style, transition, trigger } from '@angular/animations';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nconst _c0 = [\"addTemplateModal\"];\nconst _c1 = [\"addSectionModal\"];\nconst _c2 = [\"addFieldModal\"];\nconst _c3 = [\"addContactModal\"];\nconst _c4 = function (a1) {\n  return [\"/admin/templates\", a1];\n};\nfunction ListTemplateComponent_ng_container_1_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\")(2, \"td\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"div\", 6)(10, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function ListTemplateComponent_ng_container_1_ng_container_14_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const template_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.editTemplate(template_r2));\n    });\n    i0.ɵɵtext(11, \" Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function ListTemplateComponent_ng_container_1_ng_container_14_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const template_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.deleteTemplate(template_r2));\n    });\n    i0.ɵɵtext(13, \" Delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"a\", 9);\n    i0.ɵɵtext(15, \"View Details\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const template_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(template_r2.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(template_r2.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(template_r2.uniqeCode);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(4, _c4, template_r2.id));\n  }\n}\nfunction ListTemplateComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 2)(2, \"table\", 3)(3, \"thead\")(4, \"tr\")(5, \"th\");\n    i0.ɵɵtext(6, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Unique Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 4);\n    i0.ɵɵtext(12, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"tbody\");\n    i0.ɵɵtemplate(14, ListTemplateComponent_ng_container_1_ng_container_14_Template, 16, 6, \"ng-container\", 5);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(14);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.filteredTemplateList);\n  }\n}\nexport class ListTemplateComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.filteredTemplateList = [];\n    this.searchTemplate = '';\n    this.templateList = [];\n    this.displayType = 'list';\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadTemplates();\n  }\n  initForm() {\n    this.params = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]]\n    });\n  }\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required]\n    });\n  }\n  loadTemplates() {\n    this.templateService.getAllTemplates().subscribe(templates => {\n      this.templateList = templates;\n      this.templateList = templates.map(t => ({\n        ...t,\n        expanded: false\n      }));\n      this.searchTemplates();\n    });\n  }\n  searchTemplates() {\n    this.filteredTemplateList = this.templateList.filter(template => template.title.toLowerCase().includes(this.searchTemplate.toLowerCase()));\n  }\n  editTemplate(template = null) {\n    if (this.addTemplateModal) {\n      this.addTemplateModal.open();\n      this.initForm();\n      if (template) {\n        this.params.setValue({\n          id: template.id,\n          title: template.title,\n          uniqeCode: template.uniqeCode\n        });\n      }\n    } else {\n      console.error('addTemplateModal is not defined');\n    }\n  }\n  saveTemplate() {\n    if (this.params.invalid) {\n      this.showMessage('Please fill all required fields correctly.', 'error');\n      return;\n    }\n    const template = this.params.value;\n    if (template.id) {\n      this.templateService.updateTemplate(template.id.toString(), template).subscribe(() => {\n        const existingTemplate = this.templateList.find(t => t.id === template.id);\n        if (existingTemplate) {\n          Object.assign(existingTemplate, template);\n        }\n        this.searchTemplates();\n        this.showMessage('Template has been updated successfully.');\n        this.addTemplateModal.close();\n      });\n    } else {\n      this.templateService.addTemplate(template).subscribe(newTemplate => {\n        this.templateList.unshift(newTemplate);\n        this.searchTemplates();\n        this.showMessage('Template has been added successfully.');\n        this.addTemplateModal.close();\n      }, error => {\n        this.showMessage('Failed to add template. Please try again.', 'error');\n      });\n    }\n  }\n  deleteTemplate(template) {\n    this.templateService.deleteTemplate(template.id.toString()).subscribe(() => {\n      this.templateList = this.templateList.filter(t => t.id !== template.id);\n      this.searchTemplates();\n      this.showMessage('Template has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: {\n        container: 'toast'\n      }\n    });\n  }\n  // Section methods\n  loadSections(templateId) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type)\n      };\n      if (section.id) {\n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO).subscribe(() => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template && template.sections) {\n            const existingSection = template.sections.find(s => s.id === section.id);\n            if (existingSection) {\n              Object.assign(existingSection, section);\n            }\n          }\n          this.showMessage('Section has been updated successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addSection(templateId.toString(), addSectionDTO).subscribe(newSection => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template) {\n            if (!template.sections) {\n              template.sections = [];\n            }\n            template.sections.push(newSection);\n          }\n          this.showMessage('Section has been added successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    }\n  }\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0;\n  }\n  handleErrorResponse(error) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  getTemplateIdBySectionId(sectionId) {\n    for (const template of this.templateList) {\n      if (template.sections) {\n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n  // Field methods\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null;\n    this.addFieldModal.open();\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type),\n        isRequired: field.isRequired\n      };\n      if (field.id != null && field.id !== 0) {\n        // In saveField() update case\n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO).subscribe(updatedField => {\n          // Find and update the local field\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section?.fields) {\n            const index = section.fields.findIndex(f => f.id === updatedField.id);\n            if (index > -1) {\n              section.fields = [...section.fields.slice(0, index), updatedField, ...section.fields.slice(index + 1)];\n            }\n          }\n          this.showMessage('Field updated successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        // In saveField() add case\n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO).subscribe(newField => {\n          // Find and update the local data\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section) {\n            if (!section.fields) section.fields = [];\n            section.fields = [...section.fields, newField]; // Immutable update\n          }\n\n          this.showMessage('Field added successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type];\n  }\n  deleteField(section, fieldId) {\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    if (templateId !== undefined) {\n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  loadFields(section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe(fields => {\n        section.fields = fields;\n      });\n    }\n  }\n  toggleSections(template) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  toggleFields(section) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n  static #_ = this.ɵfac = function ListTemplateComponent_Factory(t) {\n    return new (t || ListTemplateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListTemplateComponent,\n    selectors: [[\"app-list-template\"]],\n    viewQuery: function ListTemplateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addTemplateModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addContactModal = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"panel\", \"mt-5\", \"overflow-hidden\", \"border-0\", \"p-0\"], [4, \"ngIf\"], [1, \"table-responsive\"], [1, \"table-striped\", \"table-hover\"], [1, \"!text-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"flex\", \"items-center\", \"justify-center\", \"gap-4\"], [1, \"btn\", \"btn-sm\", \"btn-outline-primary\", 3, \"click\"], [1, \"btn\", \"btn-sm\", \"btn-outline-danger\", 3, \"click\"], [3, \"routerLink\"]],\n    template: function ListTemplateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ListTemplateComponent_ng_container_1_Template, 15, 1, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displayType === \"list\");\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsaXN0LXRlbXBsYXRlLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL2xpc3QtdGVtcGxhdGUvbGlzdC10ZW1wbGF0ZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw0S0FBNEsiLCJzb3VyY2VSb290IjoiIn0= */\"],\n    data: {\n      animation: [trigger('toggleAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0.95)'\n      }), animate('100ms ease-out', style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))]), transition(':leave', [animate('75ms', style({\n        opacity: 0,\n        transform: 'scale(0.95)'\n      }))])])]\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["animate","style","transition","trigger","Validators","Swal","i0","ListTemplateComponent","constructor","fb","templateService","ngOnInit","initForm","initSectionForm","initFieldForm","loadTemplates","params","group","id","title","required","minLength","maxLength","uniqeCode","pattern","sectionParams","type","fieldParams","isRequired","getAllTemplates","subscribe","templates","templateList","map","t","expanded","searchTemplates","filteredTemplateList","filter","template","toLowerCase","includes","searchTemplate","editTemplate","addTemplateModal","open","setValue","console","error","saveTemplate","invalid","showMessage","value","updateTemplate","toString","existingTemplate","find","Object","assign","close","addTemplate","newTemplate","unshift","deleteTemplate","msg","fire","icon","toast","position","showConfirmButton","timer","customClass","container","loadSections","templateId","getTemplateById","sections","editSection","section","selectedTemplateId","addSectionModal","saveSection","addSectionDTO","mapSectionType","updateSection","existingSection","s","handleErrorResponse","addSection","newSection","push","sectionTypeMap","JSON","stringify","message","deleteSection","sectionId","getTemplateIdBySectionId","undefined","editField","field","selectedSectionId","addFieldModal","saveField","addFieldDTO","mapFieldType","updateField","updatedField","fields","index","findIndex","f","slice","addField","newField","fieldTypeMap","deleteField","fieldId","loadFields","getSectionFields","toggleSections","toggleFields","selectors","viewQuery","opacity","transform"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\list-template\\list-template.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\list-template\\list-template.component.html"],"sourcesContent":["import { Component, ViewChild, OnInit } from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template} from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-list-template',\n  templateUrl: './list-template.component.html',\n  styleUrls: ['./list-template.component.css'],\n  animations: [\n    trigger('toggleAnimation', [\n      transition(':enter', [\n        style({ opacity: 0, transform: 'scale(0.95)' }),\n        animate('100ms ease-out', style({ opacity: 1, transform: 'scale(1)' }))\n      ]),\n      transition(':leave', [\n        animate('75ms', style({ opacity: 0, transform: 'scale(0.95)' }))\n      ]),\n    ]),\n  ],\n})\nexport class ListTemplateComponent implements OnInit {\n  @ViewChild('addTemplateModal') addTemplateModal!: ModalComponent;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n  @ViewChild('addContactModal') addContactModal!: ModalComponent;\n  params!: FormGroup;\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n\n  filteredTemplateList: Template[] = [];\n  searchTemplate = '';\n  templateList: Template[] = [];\n  \n  displayType = 'list';\n  \n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {}\n\n  ngOnInit() {\n    this.initForm();\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadTemplates();\n  }\n\n  initForm() {\n    this.params = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]],\n    });\n  }\n\n\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required],\n    });\n  }\n\n  loadTemplates() {\n    \n    this.templateService.getAllTemplates().subscribe((templates) => {\n      this.templateList = templates;\n      this.templateList= templates.map(t => ({ ...t, expanded: false }));\n      this.searchTemplates();\n    });\n  }\n\n  searchTemplates() {\n    this.filteredTemplateList = this.templateList.filter(template =>\n      template.title.toLowerCase().includes(this.searchTemplate.toLowerCase())\n    );\n  }\n\n  editTemplate(template: Template | null = null) {\n    if (this.addTemplateModal) {\n      this.addTemplateModal.open();\n      this.initForm();\n      if (template) {\n        this.params.setValue({\n          id: template.id,\n          title: template.title,\n          uniqeCode: template.uniqeCode,\n        });\n      }\n    } else {\n      console.error('addTemplateModal is not defined');\n    }\n  }\n\n  saveTemplate() {\n    if (this.params.invalid) {\n      this.showMessage('Please fill all required fields correctly.', 'error');\n      return;\n    }\n  \n    const template: Template = this.params.value;\n  \n    if (template.id) {\n      this.templateService.updateTemplate(template.id.toString(), template).subscribe(() => {\n        const existingTemplate = this.templateList.find(t => t.id === template.id);\n        if (existingTemplate) {\n          Object.assign(existingTemplate, template);\n        }\n        this.searchTemplates();\n        this.showMessage('Template has been updated successfully.');\n        this.addTemplateModal.close();\n      });\n    } else {\n      this.templateService.addTemplate(template).subscribe((newTemplate) => {\n        this.templateList.unshift(newTemplate);\n        this.searchTemplates();\n        this.showMessage('Template has been added successfully.');\n        this.addTemplateModal.close();\n      }, (error) => {\n        this.showMessage('Failed to add template. Please try again.', 'error');\n      });\n    }\n  }\n  deleteTemplate(template: Template) {\n    this.templateService.deleteTemplate(template.id.toString()).subscribe(() => {\n      this.templateList = this.templateList.filter(t => t.id !== template.id);\n      this.searchTemplates();\n      this.showMessage('Template has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: { container: 'toast' },\n    });\n  }\n\n  // Section methods\n  loadSections(templateId: number) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe((template) => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const section: Section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n  \n    \n  \n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type) \n      };\n  \n   \n  \n      if (section.id) {\n       \n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO)\n          .subscribe(\n            () => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template && template.sections) {\n                const existingSection = template.sections.find(s => s.id === section.id);\n                if (existingSection) {\n                  Object.assign(existingSection, section);\n                }\n              }\n              this.showMessage('Section has been updated successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n       \n        this.templateService.addSection(templateId.toString(), addSectionDTO)\n          .subscribe(\n            (newSection) => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template) {\n                if (!template.sections) {\n                  template.sections = [];\n                }\n                template.sections.push(newSection);\n              }\n              this.showMessage('Section has been added successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    }\n  }\n  \n \n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; \n  }\n  \n \n  private handleErrorResponse(error: any) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  \n  deleteSection(templateId: number, sectionId: number) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n\n  getTemplateIdBySectionId(sectionId: number): number | undefined {\n    for (const template of this.templateList) {\n      if (template.sections) { \n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  // Field methods\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null; \n    this.addFieldModal.open();  \n    this.initFieldForm();  \n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n  \n\n  saveField() {\n   \n    \n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const field: Field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n  \n  \n  \n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type), // Convert type correctly\n        isRequired: field.isRequired,\n      };\n  \n    \n  \n      if (field.id != null && field.id !== 0) {\n       \n       // In saveField() update case\nthis.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO)\n.subscribe(\n  (updatedField) => {\n    // Find and update the local field\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section?.fields) {\n      const index = section.fields.findIndex(f => f.id === updatedField.id);\n      if (index > -1) {\n        section.fields = [\n          ...section.fields.slice(0, index),\n          updatedField,\n          ...section.fields.slice(index + 1)\n        ];\n      }\n    }\n    \n    this.showMessage('Field updated successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      } else {\n      \n     // In saveField() add case\nthis.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO)\n.subscribe(\n  (newField) => {\n    // Find and update the local data\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section) {\n      if (!section.fields) section.fields = [];\n      section.fields = [...section.fields, newField]; // Immutable update\n    }\n    \n    this.showMessage('Field added successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  \n \n  private mapFieldType(type: any): number {\n    const fieldTypeMap: { [key: string]: number } = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3,\n    };\n    return fieldTypeMap[type]; \n  }\n  \n  \n\n  deleteField(section: Section, fieldId: number) {\n    const templateId = this.getTemplateIdBySectionId(section.id); \n    \n   \n  \n    if (templateId !== undefined) {  \n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  \n  \n\n \n  loadFields(section: Section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe((fields) => {\n        section.fields = fields;\n      });\n    }\n  }\n\n  toggleSections(template: any) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  \n  toggleFields(section: any) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n\n}","<div class=\"panel mt-5 overflow-hidden border-0 p-0\">\n    <ng-container *ngIf=\"displayType === 'list'\">\n      <div class=\"table-responsive\">\n        <table class=\"table-striped table-hover\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Title</th>\n              <th>Unique Code</th>\n              <th class=\"!text-center\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngFor=\"let template of filteredTemplateList\">\n              <tr>\n                <td>{{ template.id }}</td>\n                <td>{{ template.title }}</td>\n                <td>{{ template.uniqeCode }}</td>\n                <td>\n                  <div class=\"flex items-center justify-center gap-4\">\n                    <button class=\"btn btn-sm btn-outline-primary\" \n                      (click)=\"editTemplate(template)\">\n                      Edit\n                    </button>\n                    <button class=\"btn btn-sm btn-outline-danger\"\n                      (click)=\"deleteTemplate(template)\">\n                      Delete\n                    </button>\n                    <a [routerLink]=\"['/admin/templates', template.id]\">View Details</a>\n                  </div>\n                </td>\n              </tr>\n            </ng-container>\n          </tbody>\n        </table>\n      </div>\n    </ng-container>\n  \n    <!-- Keep grid view if needed -->\n  </div>\n  \n  <!-- Keep your existing modals -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}