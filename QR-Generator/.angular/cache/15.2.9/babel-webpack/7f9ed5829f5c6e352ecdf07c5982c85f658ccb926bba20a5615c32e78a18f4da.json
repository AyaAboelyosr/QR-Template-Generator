{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet TemplateDetailsComponent = class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.template = {\n      id: 0,\n      title: '',\n      uniqeCode: '',\n      sections: []\n    };\n    this.sectionUpdated = new EventEmitter();\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n    this.templateList = [];\n    this.initForms();\n  }\n  ngOnInit() {\n    console.log(this.template);\n  }\n  ngOnChanges() {\n    console.log('Template received:', this.template);\n  }\n  initForms() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required]\n    });\n  }\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initForms();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const section = this.sectionParams.value;\n    if (this.selectedTemplateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type)\n      };\n      if (section.id) {\n        this.templateService.updateSection(this.selectedTemplateId.toString(), section.id.toString(), addSectionDTO).subscribe(() => this.handleSectionUpdate(section), error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addSection(this.selectedTemplateId.toString(), addSectionDTO).subscribe(newSection => this.handleSectionAdd(newSection), error => this.handleErrorResponse(error));\n      }\n    }\n  }\n  handleSectionUpdate(section) {\n    const template = this.templateList.find(t => t.id === this.selectedTemplateId);\n    template?.sections?.map(s => s.id === section.id ? Object.assign(s, section) : s);\n    this.showMessage('Section updated successfully.');\n    this.addSectionModal.close();\n  }\n  handleSectionAdd(newSection) {\n    const template = this.templateList.find(t => t.id === this.selectedTemplateId);\n    if (template) template.sections = [...(template.sections || []), newSection];\n    this.showMessage('Section added successfully.');\n    this.addSectionModal.close();\n  }\n  mapSectionType(type) {\n    return {\n      'Form': 0,\n      'Table': 1\n    }[type] ?? 0;\n  }\n  handleErrorResponse(error) {\n    console.error('Error:', error);\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template) template.sections = template.sections?.filter(s => s.id !== sectionId) || [];\n      this.showMessage('Section deleted successfully.');\n    }, error => this.showMessage(error, 'error'));\n  }\n  loadSections(templateId) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) existingTemplate.sections = template.sections;\n    });\n  }\n  getTemplateIdBySectionId(sectionId) {\n    return this.templateList.find(template => template.sections?.some(s => s.id === sectionId))?.id;\n  }\n  toggleSections(template) {\n    if (!template.sections) this.loadSections(template.id);\n    template.expanded = !template.expanded;\n  }\n  toggleFields(section) {\n    if (!section.fields) this.loadFields(section);\n    section.expanded = !section.expanded;\n  }\n  loadFields(section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe(fields => {\n        section.fields = fields;\n      });\n    }\n  }\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null;\n    this.addFieldModal.open();\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  deleteField(section, fieldId) {\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    if (templateId !== undefined) {\n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type),\n        isRequired: field.isRequired\n      };\n      if (field.id != null && field.id !== 0) {\n        // In saveField() update case\n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO).subscribe(updatedField => {\n          // Find and update the local field\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section?.fields) {\n            const index = section.fields.findIndex(f => f.id === updatedField.id);\n            if (index > -1) {\n              section.fields = [...section.fields.slice(0, index), updatedField, ...section.fields.slice(index + 1)];\n            }\n          }\n          this.showMessage('Field updated successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        // In saveField() add case\n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO).subscribe(newField => {\n          // Find and update the local data\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section) {\n            if (!section.fields) section.fields = [];\n            section.fields = [...section.fields, newField]; // Immutable update\n          }\n\n          this.showMessage('Field added successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type];\n  }\n};\n__decorate([Input()], TemplateDetailsComponent.prototype, \"template\", void 0);\n__decorate([Output()], TemplateDetailsComponent.prototype, \"sectionUpdated\", void 0);\n__decorate([ViewChild('addSectionModal')], TemplateDetailsComponent.prototype, \"addSectionModal\", void 0);\n__decorate([ViewChild('addFieldModal')], TemplateDetailsComponent.prototype, \"addFieldModal\", void 0);\nTemplateDetailsComponent = __decorate([Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html'\n})], TemplateDetailsComponent);\nexport { TemplateDetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Output","ViewChild","EventEmitter","Validators","Swal","TemplateDetailsComponent","constructor","fb","templateService","id","title","uniqeCode","sections","initForms","ngOnInit","console","log","template","ngOnChanges","sectionParams","group","required","minLength","maxLength","type","fieldParams","isRequired","initFieldForm","editSection","templateId","section","selectedTemplateId","addSectionModal","open","setValue","saveSection","invalid","showMessage","value","addSectionDTO","mapSectionType","updateSection","toString","subscribe","handleSectionUpdate","error","handleErrorResponse","addSection","newSection","handleSectionAdd","templateList","find","t","map","s","Object","assign","close","message","msg","fire","icon","toast","position","showConfirmButton","timer","deleteSection","sectionId","filter","loadSections","getTemplateById","existingTemplate","getTemplateIdBySectionId","some","toggleSections","expanded","toggleFields","fields","loadFields","getSectionFields","editField","field","selectedSectionId","undefined","addFieldModal","deleteField","fieldId","existingSection","f","saveField","addFieldDTO","mapFieldType","updateField","updatedField","index","findIndex","slice","addField","newField","fieldTypeMap","__decorate","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts"],"sourcesContent":["import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html'\n})\nexport class TemplateDetailsComponent {\n  @Input() template: Template = { id: 0, title: '', uniqeCode: '', sections: [] };\n  @Output() sectionUpdated = new EventEmitter<void>();\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n  selectedSection?: Section;\n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n  templateList: Template[] = [];\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {\n    this.initForms();\n  }\n\n  ngOnInit(): void {\n    console.log(this.template);\n  }\n\n  ngOnChanges(): void {\n    console.log('Template received:', this.template);\n  }\n\n  private initForms(): void {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required],\n    });\n  }\n\n\n  editSection(templateId: number, section: Section | null = null): void {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initForms();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n  \n\n  saveSection(): void {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n\n    const section: Section = this.sectionParams.value;\n    if (this.selectedTemplateId !== null) {\n      const addSectionDTO = { title: section.title, type: this.mapSectionType(section.type) };\n      if (section.id) {\n        this.templateService.updateSection(this.selectedTemplateId.toString(), section.id.toString(), addSectionDTO)\n          .subscribe(\n            () => this.handleSectionUpdate(section),\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n        this.templateService.addSection(this.selectedTemplateId.toString(), addSectionDTO)\n          .subscribe(\n            (newSection) => this.handleSectionAdd(newSection),\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    }\n  }\n\n  private handleSectionUpdate(section: Section): void {\n    const template = this.templateList.find(t => t.id === this.selectedTemplateId);\n    template?.sections?.map(s => s.id === section.id ? Object.assign(s, section) : s);\n    this.showMessage('Section updated successfully.');\n    this.addSectionModal.close();\n  }\n\n  private handleSectionAdd(newSection: Section): void {\n    const template = this.templateList.find(t => t.id === this.selectedTemplateId);\n    if (template) template.sections = [...(template.sections || []), newSection];\n    this.showMessage('Section added successfully.');\n    this.addSectionModal.close();\n  }\n\n  private mapSectionType(type: string): number {\n    return { 'Form': 0, 'Table': 1 }[type] ?? 0;\n  }\n\n  private handleErrorResponse(error: any): void {\n    console.error('Error:', error);\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success'): void {\n    Swal.fire({ icon: type, title: msg, toast: true, position: 'top', showConfirmButton: false, timer: 3000 });\n  }\n\n  deleteSection(templateId: number, sectionId: number): void {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template) template.sections = template.sections?.filter(s => s.id !== sectionId) || [];\n      this.showMessage('Section deleted successfully.');\n    }, error => this.showMessage(error, 'error'));\n  }\n\n  loadSections(templateId: number): void {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) existingTemplate.sections = template.sections;\n    });\n  }\n\n  getTemplateIdBySectionId(sectionId: number): number | undefined {\n    return this.templateList.find(template => template.sections?.some(s => s.id === sectionId))?.id;\n  }\n\n  toggleSections(template: Template): void {\n    if (!template.sections) this.loadSections(template.id);\n    template.expanded = !template.expanded;\n  }\n\n  toggleFields(section: Section): void {\n    if (!section.fields) this.loadFields(section);\n    section.expanded = !section.expanded;\n  }\n\n  loadFields(section: Section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe((fields) => {\n        section.fields = fields;\n      });\n    }\n  }\n\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null; \n    this.addFieldModal.open();  \n    this.initFieldForm();  \n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n\n  deleteField(section: Section, fieldId: number) {\n    const templateId = this.getTemplateIdBySectionId(section.id); \n    \n   \n  \n    if (templateId !== undefined) {  \n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  saveField() {\n   \n    \n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const field: Field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n  \n  \n  \n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type), // Convert type correctly\n        isRequired: field.isRequired,\n      };\n  \n    \n  \n      if (field.id != null && field.id !== 0) {\n       \n       // In saveField() update case\nthis.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO)\n.subscribe(\n  (updatedField) => {\n    // Find and update the local field\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section?.fields) {\n      const index = section.fields.findIndex(f => f.id === updatedField.id);\n      if (index > -1) {\n        section.fields = [\n          ...section.fields.slice(0, index),\n          updatedField,\n          ...section.fields.slice(index + 1)\n        ];\n      }\n    }\n    \n    this.showMessage('Field updated successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      } else {\n      \n     // In saveField() add case\nthis.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO)\n.subscribe(\n  (newField) => {\n    // Find and update the local data\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section) {\n      if (!section.fields) section.fields = [];\n      section.fields = [...section.fields, newField]; // Immutable update\n    }\n    \n    this.showMessage('Field added successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  \n \n  private mapFieldType(type: any): number {\n    const fieldTypeMap: { [key: string]: number } = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3,\n    };\n    return fieldTypeMap[type]; \n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}