{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet ListTemplateComponent = class ListTemplateComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.filteredTemplateList = [];\n    this.searchTemplate = '';\n    this.templateList = [];\n    this.displayType = 'list';\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadTemplates();\n  }\n  initForm() {\n    this.params = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]]\n    });\n  }\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required]\n    });\n  }\n  loadTemplates() {\n    this.templateService.getAllTemplates().subscribe(templates => {\n      this.templateList = templates;\n      this.searchTemplates();\n    });\n  }\n  searchTemplates() {\n    this.filteredTemplateList = this.templateList.filter(template => template.title.toLowerCase().includes(this.searchTemplate.toLowerCase()));\n  }\n  editTemplate(template = null) {\n    if (this.addTemplateModal) {\n      this.addTemplateModal.open();\n      this.initForm();\n      if (template) {\n        this.params.setValue({\n          id: template.id,\n          title: template.title,\n          uniqeCode: template.uniqeCode\n        });\n      }\n    } else {\n      console.error('addTemplateModal is not defined');\n    }\n  }\n  saveTemplate() {\n    if (this.params.invalid) {\n      this.showMessage('Please fill all required fields correctly.', 'error');\n      return;\n    }\n    const template = this.params.value;\n    if (template.id) {\n      this.templateService.updateTemplate(template.id.toString(), template).subscribe(() => {\n        const existingTemplate = this.templateList.find(t => t.id === template.id);\n        if (existingTemplate) {\n          Object.assign(existingTemplate, template);\n        }\n        this.searchTemplates();\n        this.showMessage('Template has been updated successfully.');\n        this.addTemplateModal.close();\n      });\n    } else {\n      this.templateService.addTemplate(template).subscribe(newTemplate => {\n        this.templateList.unshift(newTemplate);\n        this.searchTemplates();\n        this.showMessage('Template has been added successfully.');\n        this.addTemplateModal.close();\n      }, error => {\n        this.showMessage('Failed to add template. Please try again.', 'error');\n      });\n    }\n  }\n  deleteTemplate(template) {\n    this.templateService.deleteTemplate(template.id.toString()).subscribe(() => {\n      this.templateList = this.templateList.filter(t => t.id !== template.id);\n      this.searchTemplates();\n      this.showMessage('Template has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: {\n        container: 'toast'\n      }\n    });\n  }\n  // Section methods\n  loadSections(templateId) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type)\n      };\n      if (section.id) {\n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO).subscribe(() => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template && template.sections) {\n            const existingSection = template.sections.find(s => s.id === section.id);\n            if (existingSection) {\n              Object.assign(existingSection, section);\n            }\n          }\n          this.showMessage('Section has been updated successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addSection(templateId.toString(), addSectionDTO).subscribe(newSection => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template) {\n            if (!template.sections) {\n              template.sections = [];\n            }\n            template.sections.push(newSection);\n          }\n          this.showMessage('Section has been added successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    }\n  }\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0;\n  }\n  handleErrorResponse(error) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  getTemplateIdBySectionId(sectionId) {\n    for (const template of this.templateList) {\n      if (template.sections) {\n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n  // Field methods\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null;\n    this.addFieldModal.open();\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type),\n        isRequired: field.isRequired\n      };\n      if (field.id != null && field.id !== 0) {\n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO).subscribe(() => {\n          this.showMessage('Field updated successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO).subscribe(newField => {\n          this.showMessage('Field added successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type];\n  }\n  deleteField(section, fieldId) {\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    if (templateId !== undefined) {\n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  loadFields(section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe(fields => {\n        section.fields = fields;\n      });\n    }\n  }\n};\n__decorate([ViewChild('addTemplateModal')], ListTemplateComponent.prototype, \"addTemplateModal\", void 0);\n__decorate([ViewChild('addSectionModal')], ListTemplateComponent.prototype, \"addSectionModal\", void 0);\n__decorate([ViewChild('addFieldModal')], ListTemplateComponent.prototype, \"addFieldModal\", void 0);\n__decorate([ViewChild('addContactModal')], ListTemplateComponent.prototype, \"addContactModal\", void 0);\nListTemplateComponent = __decorate([Component({\n  selector: 'app-list-template',\n  templateUrl: './list-template.component.html',\n  styleUrls: ['./list-template.component.css'],\n  animations: [trigger('toggleAnimation', [transition(':enter', [style({\n    opacity: 0,\n    transform: 'scale(0.95)'\n  }), animate('100ms ease-out', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))]), transition(':leave', [animate('75ms', style({\n    opacity: 0,\n    transform: 'scale(0.95)'\n  }))])])]\n})], ListTemplateComponent);\nexport { ListTemplateComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","animate","style","transition","trigger","Validators","Swal","ListTemplateComponent","constructor","fb","templateService","ngOnInit","initForm","initSectionForm","initFieldForm","loadTemplates","params","group","id","title","required","minLength","maxLength","uniqeCode","pattern","sectionParams","type","fieldParams","isRequired","getAllTemplates","subscribe","templates","templateList","searchTemplates","filteredTemplateList","filter","template","toLowerCase","includes","searchTemplate","editTemplate","addTemplateModal","open","setValue","console","error","saveTemplate","invalid","showMessage","value","updateTemplate","toString","existingTemplate","find","t","Object","assign","close","addTemplate","newTemplate","unshift","deleteTemplate","msg","fire","icon","toast","position","showConfirmButton","timer","customClass","container","loadSections","templateId","getTemplateById","sections","editSection","section","selectedTemplateId","addSectionModal","saveSection","addSectionDTO","mapSectionType","updateSection","existingSection","s","handleErrorResponse","addSection","newSection","push","sectionTypeMap","JSON","stringify","message","deleteSection","sectionId","getTemplateIdBySectionId","undefined","editField","field","selectedSectionId","addFieldModal","saveField","addFieldDTO","mapFieldType","updateField","addField","newField","fieldTypeMap","deleteField","fieldId","fields","f","loadFields","getSectionFields","__decorate","selector","templateUrl","styleUrls","animations","opacity","transform"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\list-template\\list-template.component.ts"],"sourcesContent":["import { Component, ViewChild, OnInit } from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template} from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-list-template',\n  templateUrl: './list-template.component.html',\n  styleUrls: ['./list-template.component.css'],\n  animations: [\n    trigger('toggleAnimation', [\n      transition(':enter', [\n        style({ opacity: 0, transform: 'scale(0.95)' }),\n        animate('100ms ease-out', style({ opacity: 1, transform: 'scale(1)' }))\n      ]),\n      transition(':leave', [\n        animate('75ms', style({ opacity: 0, transform: 'scale(0.95)' }))\n      ]),\n    ]),\n  ],\n})\nexport class ListTemplateComponent implements OnInit {\n  @ViewChild('addTemplateModal') addTemplateModal!: ModalComponent;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n  @ViewChild('addContactModal') addContactModal!: ModalComponent;\n  params!: FormGroup;\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n\n  filteredTemplateList: Template[] = [];\n  searchTemplate = '';\n  templateList: Template[] = [];\n  \n  displayType = 'list';\n  \n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {}\n\n  ngOnInit() {\n    this.initForm();\n    this.initSectionForm();\n    this.initFieldForm();\n    this.loadTemplates();\n  }\n\n  initForm() {\n    this.params = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]],\n    });\n  }\n\n\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false, Validators.required],\n    });\n  }\n\n  loadTemplates() {\n    this.templateService.getAllTemplates().subscribe((templates) => {\n      this.templateList = templates;\n      this.searchTemplates();\n    });\n  }\n\n  searchTemplates() {\n    this.filteredTemplateList = this.templateList.filter(template =>\n      template.title.toLowerCase().includes(this.searchTemplate.toLowerCase())\n    );\n  }\n\n  editTemplate(template: Template | null = null) {\n    if (this.addTemplateModal) {\n      this.addTemplateModal.open();\n      this.initForm();\n      if (template) {\n        this.params.setValue({\n          id: template.id,\n          title: template.title,\n          uniqeCode: template.uniqeCode,\n        });\n      }\n    } else {\n      console.error('addTemplateModal is not defined');\n    }\n  }\n\n  saveTemplate() {\n    if (this.params.invalid) {\n      this.showMessage('Please fill all required fields correctly.', 'error');\n      return;\n    }\n  \n    const template: Template = this.params.value;\n  \n    if (template.id) {\n      this.templateService.updateTemplate(template.id.toString(), template).subscribe(() => {\n        const existingTemplate = this.templateList.find(t => t.id === template.id);\n        if (existingTemplate) {\n          Object.assign(existingTemplate, template);\n        }\n        this.searchTemplates();\n        this.showMessage('Template has been updated successfully.');\n        this.addTemplateModal.close();\n      });\n    } else {\n      this.templateService.addTemplate(template).subscribe((newTemplate) => {\n        this.templateList.unshift(newTemplate);\n        this.searchTemplates();\n        this.showMessage('Template has been added successfully.');\n        this.addTemplateModal.close();\n      }, (error) => {\n        this.showMessage('Failed to add template. Please try again.', 'error');\n      });\n    }\n  }\n  deleteTemplate(template: Template) {\n    this.templateService.deleteTemplate(template.id.toString()).subscribe(() => {\n      this.templateList = this.templateList.filter(t => t.id !== template.id);\n      this.searchTemplates();\n      this.showMessage('Template has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: { container: 'toast' },\n    });\n  }\n\n  // Section methods\n  loadSections(templateId: number) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe((template) => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const section: Section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n  \n    \n  \n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type) \n      };\n  \n   \n  \n      if (section.id) {\n       \n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO)\n          .subscribe(\n            () => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template && template.sections) {\n                const existingSection = template.sections.find(s => s.id === section.id);\n                if (existingSection) {\n                  Object.assign(existingSection, section);\n                }\n              }\n              this.showMessage('Section has been updated successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n       \n        this.templateService.addSection(templateId.toString(), addSectionDTO)\n          .subscribe(\n            (newSection) => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template) {\n                if (!template.sections) {\n                  template.sections = [];\n                }\n                template.sections.push(newSection);\n              }\n              this.showMessage('Section has been added successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    }\n  }\n  \n \n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; \n  }\n  \n \n  private handleErrorResponse(error: any) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  \n  deleteSection(templateId: number, sectionId: number) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n\n  getTemplateIdBySectionId(sectionId: number): number | undefined {\n    for (const template of this.templateList) {\n      if (template.sections) { \n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  // Field methods\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null; \n    this.addFieldModal.open();  \n    this.initFieldForm();  \n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n  \n\n  saveField() {\n   \n    \n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const field: Field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n  \n  \n  \n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type), // Convert type correctly\n        isRequired: field.isRequired,\n      };\n  \n    \n  \n      if (field.id != null && field.id !== 0) {\n       \n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO)\n          .subscribe(\n            () => {\n              this.showMessage('Field updated successfully');\n              this.addFieldModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n      \n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO)\n          .subscribe(\n            (newField) => {\n              this.showMessage('Field added successfully');\n              this.addFieldModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  \n \n  private mapFieldType(type: any): number {\n    const fieldTypeMap: { [key: string]: number } = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3,\n    };\n    return fieldTypeMap[type]; \n  }\n  \n  \n\n  deleteField(section: Section, fieldId: number) {\n    const templateId = this.getTemplateIdBySectionId(section.id); \n    \n   \n  \n    if (templateId !== undefined) {  \n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  \n  \n\n \n  loadFields(section: Section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe((fields) => {\n        section.fields = fields;\n      });\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}