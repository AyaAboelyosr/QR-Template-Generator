{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nconst _c0 = [\"addSectionModal\"];\nconst _c1 = [\"addFieldModal\"];\nfunction TemplateDetailsComponent_div_13_div_18_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtext(1, \" Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateDetailsComponent_div_13_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"div\", 24)(2, \"div\")(3, \"span\", 19);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 25);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TemplateDetailsComponent_div_13_div_18_span_7_Template, 2, 0, \"span\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 14)(9, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_13_div_18_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const field_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.editField(field_r3));\n    });\n    i0.ɵɵtext(10, \" Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_13_div_18_Template_button_click_11_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const field_r3 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.deleteField(field_r3.id));\n    });\n    i0.ɵɵtext(12, \" Delete \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(field_r3.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"(\", field_r3.type, \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", field_r3.isRequired);\n  }\n}\nfunction TemplateDetailsComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"h3\", 12);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 14)(7, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_13_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.editSection(section_r1));\n    });\n    i0.ɵɵtext(8, \" Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_13_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.deleteSection(section_r1.id));\n    });\n    i0.ɵɵtext(10, \" Delete \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\", 17)(12, \"div\", 18)(13, \"h4\", 19);\n    i0.ɵɵtext(14, \"Fields\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_13_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const section_r1 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.addField(section_r1));\n    });\n    i0.ɵɵtext(16, \" Add Field \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 21);\n    i0.ɵɵtemplate(18, TemplateDetailsComponent_div_13_div_18_Template, 13, 3, \"div\", 22);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const section_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", section_r1.title, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"(\", section_r1.type, \")\");\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngForOf\", section_r1.fields);\n  }\n}\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n    this.templateList = [];\n    this.initSectionForm();\n    this.initFieldForm();\n  }\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false]\n    });\n  }\n  // Section methods\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type)\n      };\n      if (section.id) {\n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO).subscribe(() => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template && template.sections) {\n            const existingSection = template.sections.find(s => s.id === section.id);\n            if (existingSection) {\n              Object.assign(existingSection, section);\n            }\n          }\n          this.showMessage('Section has been updated successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addSection(templateId.toString(), addSectionDTO).subscribe(newSection => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template) {\n            if (!template.sections) {\n              template.sections = [];\n            }\n            template.sections.push(newSection);\n          }\n          this.showMessage('Section has been added successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    }\n  }\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0;\n  }\n  handleErrorResponse(error) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: {\n        container: 'toast'\n      }\n    });\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  loadSections(templateId) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n  getTemplateIdBySectionId(sectionId) {\n    for (const template of this.templateList) {\n      if (template.sections) {\n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n  // Field methods\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null;\n    this.addFieldModal.open();\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type),\n        isRequired: field.isRequired\n      };\n      if (field.id != null && field.id !== 0) {\n        // In saveField() update case\n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO).subscribe(updatedField => {\n          // Find and update the local field\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section?.fields) {\n            const index = section.fields.findIndex(f => f.id === updatedField.id);\n            if (index > -1) {\n              section.fields = [...section.fields.slice(0, index), updatedField, ...section.fields.slice(index + 1)];\n            }\n          }\n          this.showMessage('Field updated successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        // In saveField() add case\n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO).subscribe(newField => {\n          // Find and update the local data\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section) {\n            if (!section.fields) section.fields = [];\n            section.fields = [...section.fields, newField]; // Immutable update\n          }\n\n          this.showMessage('Field added successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type];\n  }\n  deleteField(section, fieldId) {\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    if (templateId !== undefined) {\n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  loadFields(section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe(fields => {\n        section.fields = fields;\n      });\n    }\n  }\n  toggleSections(template) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  toggleFields(section) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    viewQuery: function TemplateDetailsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    inputs: {\n      template: \"template\"\n    },\n    decls: 19,\n    vars: 4,\n    consts: [[1, \"container\", \"mx-auto\", \"p-6\"], [1, \"flex\", \"items-center\", \"justify-between\", \"mb-6\"], [1, \"text-2xl\", \"font-bold\"], [1, \"mt-2\", \"text-gray-600\"], [1, \"mr-4\"], [\"routerLink\", \"/admin/templates\", 1, \"btn\", \"btn-outline-primary\"], [1, \"mt-8\", \"space-y-6\"], [\"class\", \"card shadow-lg\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-8\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"card\", \"shadow-lg\"], [1, \"card-header\", \"flex\", \"justify-between\", \"items-center\", \"bg-gray-100\"], [1, \"text-xl\", \"font-semibold\"], [1, \"text-sm\", \"text-gray-500\"], [1, \"flex\", \"gap-2\"], [1, \"btn\", \"btn-sm\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [1, \"card-body\"], [1, \"flex\", \"justify-between\", \"items-center\", \"mb-4\"], [1, \"font-medium\"], [1, \"btn\", \"btn-sm\", \"btn-success\", 3, \"click\"], [1, \"space-y-4\"], [\"class\", \"field-item border rounded p-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"field-item\", \"border\", \"rounded\", \"p-4\"], [1, \"flex\", \"justify-between\", \"items-center\"], [1, \"text-sm\", \"text-gray-500\", \"ml-2\"], [\"class\", \"badge bg-orange-100 text-orange-600 ml-2\", 4, \"ngIf\"], [1, \"btn\", \"btn-xs\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-xs\", \"btn-danger\", 3, \"click\"], [1, \"badge\", \"bg-orange-100\", \"text-orange-600\", \"ml-2\"]],\n    template: function TemplateDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\")(3, \"h2\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"span\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"span\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵtext(11, \" Back to List \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵtemplate(13, TemplateDetailsComponent_div_13_Template, 19, 3, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 8)(15, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_Template_button_click_15_listener() {\n          return ctx.addSection();\n        });\n        i0.ɵɵtext(16, \" Add New Section \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(17, \"app-section-modal\")(18, \"app-field-modal\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.template.title);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"ID: \", ctx.template.id, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Unique Code: \", ctx.template.uniqueCode, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.template.sections);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","Swal","i0","TemplateDetailsComponent","constructor","fb","templateService","initSectionForm","initFieldForm","sectionParams","group","id","title","required","minLength","maxLength","type","fieldParams","isRequired","editSection","templateId","section","selectedTemplateId","addSectionModal","open","setValue","saveSection","invalid","showMessage","value","addSectionDTO","mapSectionType","updateSection","toString","subscribe","template","templateList","find","t","sections","existingSection","s","Object","assign","close","error","handleErrorResponse","addSection","newSection","push","sectionTypeMap","console","JSON","stringify","message","msg","fire","icon","toast","position","showConfirmButton","timer","customClass","container","deleteSection","sectionId","filter","loadSections","getTemplateById","existingTemplate","getTemplateIdBySectionId","undefined","editField","field","selectedSectionId","addFieldModal","saveField","addFieldDTO","mapFieldType","updateField","updatedField","fields","index","findIndex","f","slice","addField","newField","fieldTypeMap","deleteField","fieldId","loadFields","getSectionFields","toggleSections","expanded","toggleFields","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.html"],"sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html'\n})\nexport class TemplateDetailsComponent {\n  @Input() template!: Template;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n  selectedSection?: Section;\n\n\n  \n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n  templateList: Template[] = [];\n\n\n  \n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {\n    this.initSectionForm();\n    this.initFieldForm();\n  }\n\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false],\n    });\n  }\n\n  // Section methods\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const section: Section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n  \n    \n  \n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type) \n      };\n  \n   \n  \n      if (section.id) {\n       \n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO)\n          .subscribe(\n            () => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template && template.sections) {\n                const existingSection = template.sections.find(s => s.id === section.id);\n                if (existingSection) {\n                  Object.assign(existingSection, section);\n                }\n              }\n              this.showMessage('Section has been updated successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n       \n        this.templateService.addSection(templateId.toString(), addSectionDTO)\n          .subscribe(\n            (newSection) => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template) {\n                if (!template.sections) {\n                  template.sections = [];\n                }\n                template.sections.push(newSection);\n              }\n              this.showMessage('Section has been added successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    }\n  }\n  \n \n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; \n  }\n  private handleErrorResponse(error: any) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: { container: 'toast' },\n    });\n  }\n    deleteSection(templateId: number, sectionId: number) {\n      this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        if (template && template.sections) {\n          template.sections = template.sections.filter(s => s.id !== sectionId);\n        }\n        this.showMessage('Section has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    }\n    loadSections(templateId: number) {\n      this.templateService.getTemplateById(templateId.toString()).subscribe((template) => {\n        const existingTemplate = this.templateList.find(t => t.id === templateId);\n        if (existingTemplate) {\n          existingTemplate.sections = template.sections;\n        }\n      });\n    }\n    getTemplateIdBySectionId(sectionId: number): number | undefined {\n      for (const template of this.templateList) {\n        if (template.sections) { \n          for (const section of template.sections) {\n            if (section.id === sectionId) {\n              return template.id;\n            }\n          }\n        }\n      }\n      return undefined;\n    }\n  \n\n  // Field methods\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null; \n    this.addFieldModal.open();  \n    this.initFieldForm();  \n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n\n  saveField() {\n   \n    \n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const field: Field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n  \n  \n  \n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type), // Convert type correctly\n        isRequired: field.isRequired,\n      };\n  \n    \n  \n      if (field.id != null && field.id !== 0) {\n       \n       // In saveField() update case\nthis.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO)\n.subscribe(\n  (updatedField) => {\n    // Find and update the local field\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section?.fields) {\n      const index = section.fields.findIndex(f => f.id === updatedField.id);\n      if (index > -1) {\n        section.fields = [\n          ...section.fields.slice(0, index),\n          updatedField,\n          ...section.fields.slice(index + 1)\n        ];\n      }\n    }\n    \n    this.showMessage('Field updated successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      } else {\n      \n     // In saveField() add case\nthis.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO)\n.subscribe(\n  (newField) => {\n    // Find and update the local data\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section) {\n      if (!section.fields) section.fields = [];\n      section.fields = [...section.fields, newField]; // Immutable update\n    }\n    \n    this.showMessage('Field added successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  \n \n  private mapFieldType(type: any): number {\n    const fieldTypeMap: { [key: string]: number } = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3,\n    };\n    return fieldTypeMap[type]; \n  }\n  deleteField(section: Section, fieldId: number) {\n    const templateId = this.getTemplateIdBySectionId(section.id); \n    \n   \n  \n    if (templateId !== undefined) {  \n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n\n\n  loadFields(section: Section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe((fields) => {\n        section.fields = fields;\n      });\n    }\n  }\n\n  toggleSections(template: any) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  \n  toggleFields(section: any) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n}","<div class=\"container mx-auto p-6\">\n    <!-- Template Header -->\n    <div class=\"flex items-center justify-between mb-6\">\n      <div>\n        <h2 class=\"text-2xl font-bold\">{{ template.title }}</h2>\n        <div class=\"mt-2 text-gray-600\">\n          <span class=\"mr-4\">ID: {{ template.id }}</span>\n          <span>Unique Code: {{ template.uniqueCode }}</span>\n        </div>\n      </div>\n      <button routerLink=\"/admin/templates\" class=\"btn btn-outline-primary\">\n        Back to List\n      </button>\n    </div>\n  \n    <!-- Sections -->\n    <div class=\"mt-8 space-y-6\">\n      <div *ngFor=\"let section of template.sections\" class=\"card shadow-lg\">\n        <div class=\"card-header flex justify-between items-center bg-gray-100\">\n          <h3 class=\"text-xl font-semibold\">\n            {{ section.title }}\n            <span class=\"text-sm text-gray-500\">({{ section.type }})</span>\n          </h3>\n          <div class=\"flex gap-2\">\n            <button (click)=\"editSection(section)\" class=\"btn btn-sm btn-primary\">\n              Edit\n            </button>\n            <button (click)=\"deleteSection(section.id)\" class=\"btn btn-sm btn-danger\">\n              Delete\n            </button>\n          </div>\n        </div>\n  \n        <!-- Fields -->\n        <div class=\"card-body\">\n          <div class=\"flex justify-between items-center mb-4\">\n            <h4 class=\"font-medium\">Fields</h4>\n            <button (click)=\"addField(section)\" class=\"btn btn-sm btn-success\">\n              Add Field\n            </button>\n          </div>\n  \n          <div class=\"space-y-4\">\n            <div *ngFor=\"let field of section.fields\" class=\"field-item border rounded p-4\">\n              <div class=\"flex justify-between items-center\">\n                <div>\n                  <span class=\"font-medium\">{{ field.title }}</span>\n                  <span class=\"text-sm text-gray-500 ml-2\">({{ field.type }})</span>\n                  <span *ngIf=\"field.isRequired\" class=\"badge bg-orange-100 text-orange-600 ml-2\">\n                    Required\n                  </span>\n                </div>\n                <div class=\"flex gap-2\">\n                  <button (click)=\"editField(field)\" class=\"btn btn-xs btn-primary\">\n                    Edit\n                  </button>\n                  <button (click)=\"deleteField(field.id)\" class=\"btn btn-xs btn-danger\">\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n    <!-- Add Section Button -->\n    <div class=\"mt-8\">\n      <button (click)=\"addSection()\" class=\"btn btn-primary\">\n        Add New Section\n      </button>\n    </div>\n  \n    <!-- Include your existing modals here -->\n    <app-section-modal></app-section-modal>\n    <app-field-modal></app-field-modal>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}