{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"angular-custom-modal\";\nconst _c0 = [\"addSectionModal\"];\nconst _c1 = [\"addFieldModal\"];\nfunction TemplateDetailsComponent_div_8_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 11)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_div_1_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const field_r8 = restoredCtx.$implicit;\n      const section_r5 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.editField(section_r5, field_r8));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_div_1_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const field_r8 = restoredCtx.$implicit;\n      const section_r5 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.deleteField(section_r5, field_r8.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const field_r8 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", field_r8.title, \" (\", field_r8.type, \")\");\n  }\n}\nfunction TemplateDetailsComponent_div_8_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TemplateDetailsComponent_div_8_div_10_div_1_Template, 8, 2, \"div\", 3);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const section_r5 = i0.ɵɵnextContext().$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.editField(section_r5));\n    });\n    i0.ɵɵtext(3, \"Add Field\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", section_r5.fields);\n  }\n}\nfunction TemplateDetailsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 6)(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.editSection(ctx_r18.template.id, section_r5));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.deleteSection(ctx_r20.template.id, section_r5.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.toggleFieldsVisibility(section_r5));\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, TemplateDetailsComponent_div_8_div_10_Template, 4, 1, \"div\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r5.title);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", section_r5.expanded ? \"Hide\" : \"Show\", \" Fields \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", section_r5.expanded);\n  }\n}\nfunction TemplateDetailsComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 13);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateDetailsComponent_ng_template_11_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.saveSection());\n    });\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"label\", 15);\n    i0.ɵɵtext(6, \"Section Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 14)(9, \"label\", 17);\n    i0.ɵɵtext(10, \"Section Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"select\", 18)(12, \"option\", 19);\n    i0.ɵɵtext(13, \"Form\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 20);\n    i0.ɵɵtext(15, \"Table\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"button\", 21);\n    i0.ɵɵtext(17, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.sectionParams.value.id ? \"Edit\" : \"Add\", \" Section\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.sectionParams);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.sectionParams.invalid);\n  }\n}\nfunction TemplateDetailsComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 13);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateDetailsComponent_ng_template_14_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.saveField());\n    });\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"label\", 15);\n    i0.ɵɵtext(6, \"Field Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 14)(9, \"label\", 17);\n    i0.ɵɵtext(10, \"Field Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"select\", 18)(12, \"option\", 19);\n    i0.ɵɵtext(13, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 20);\n    i0.ɵɵtext(15, \"Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"option\", 22);\n    i0.ɵɵtext(17, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"option\", 23);\n    i0.ɵɵtext(19, \"Boolean\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(20, \"div\", 14)(21, \"label\", 24);\n    i0.ɵɵtext(22, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"input\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 21);\n    i0.ɵɵtext(25, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.fieldParams.value.id ? \"Edit\" : \"Add\", \" Field\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r4.fieldParams);\n    i0.ɵɵadvance(21);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.fieldParams.invalid);\n  }\n}\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.template = {\n      id: 0,\n      title: '',\n      uniqeCode: '',\n      sections: []\n    };\n    this.sectionUpdated = new EventEmitter();\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n    this.initForms();\n  }\n  ngOnInit() {\n    c;\n  }\n  ngOnChanges(changes) {\n    if (changes['template']) {\n      console.log('Updated template:', this.template);\n    }\n  }\n  initForms() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required] // Default to 0 or any valid number\n    });\n\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],\n      isRequired: [false]\n    });\n  }\n  // Manage Sections\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.sectionParams.reset({\n      id: 0,\n      title: '',\n      type: ''\n    });\n    if (section) {\n      this.sectionParams.patchValue(section);\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      return this.showMessage('Fill required fields', 'error');\n    }\n    const section = this.sectionParams.value;\n    if (section.id) {\n      section.id = Number(section.id); // Convert to number\n    }\n\n    if (this.selectedTemplateId !== null) {\n      this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addSectionModal.close();\n        this.showMessage('Section saved successfully');\n      });\n    }\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sectionUpdated.emit();\n      this.showMessage('Section deleted successfully');\n    });\n  }\n  // Manage Fields\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    this.addFieldModal.open();\n    this.fieldParams.reset({\n      id: 0,\n      title: '',\n      type: '',\n      isRequired: false\n    });\n    if (field) {\n      this.fieldParams.patchValue(field);\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n    const field = this.fieldParams.value;\n    if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n      // Convert selectedTemplateId and selectedSectionId to string\n      this.templateService.addOrUpdateField(this.selectedTemplateId.toString(),\n      // Convert to string\n      this.selectedSectionId.toString(),\n      // Convert to string\n      field).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addFieldModal.close();\n        this.showMessage('Field saved successfully');\n      });\n    }\n  }\n  deleteField(section, fieldId) {\n    if (this.selectedTemplateId !== null) {\n      this.templateService.deleteField(this.selectedTemplateId.toString(),\n      // Convert templateId to string\n      section.id.toString(),\n      // Convert sectionId to string\n      fieldId.toString() // Convert fieldId to string\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.showMessage('Field deleted successfully');\n      });\n    }\n  }\n  toggleFieldsVisibility(section) {\n    section.expanded = !section.expanded;\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    viewQuery: function TemplateDetailsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    inputs: {\n      template: \"template\"\n    },\n    outputs: {\n      sectionUpdated: \"sectionUpdated\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 15,\n    vars: 2,\n    consts: [[1, \"template-details-container\"], [1, \"section-list\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"addSectionModal\", \"\"], [\"addFieldModal\", \"\"], [1, \"section-item\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"btn\", \"btn-info\", 3, \"click\"], [4, \"ngIf\"], [1, \"field-item\"], [1, \"modal-content\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"type\", \"text\", \"formControlName\", \"title\", \"id\", \"title\", 1, \"form-control\"], [\"for\", \"type\"], [\"formControlName\", \"type\", \"id\", \"type\", 1, \"form-control\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"value\", \"3\"], [\"value\", \"4\"], [\"for\", \"isRequired\"], [\"type\", \"checkbox\", \"formControlName\", \"isRequired\", \"id\", \"isRequired\", 1, \"form-check-input\"]],\n    template: function TemplateDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"h3\");\n        i0.ɵɵtext(5, \"Sections\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_Template_button_click_6_listener() {\n          return ctx.editSection(ctx.template.id);\n        });\n        i0.ɵɵtext(7, \"Add Section\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, TemplateDetailsComponent_div_8_Template, 11, 3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"modal\", null, 4);\n        i0.ɵɵtemplate(11, TemplateDetailsComponent_ng_template_11_Template, 18, 3, \"ng-template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"modal\", null, 5);\n        i0.ɵɵtemplate(14, TemplateDetailsComponent_ng_template_14_Template, 26, 3, \"ng-template\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Template: \", ctx.template.title, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.template.sections);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i4.ModalComponent, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1kZXRhaWxzLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWRldGFpbHMvdGVtcGxhdGUtZGV0YWlscy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","Swal","i0","TemplateDetailsComponent","constructor","fb","templateService","id","title","uniqeCode","sections","initForms","ngOnInit","c","ngOnChanges","changes","console","log","template","sectionParams","group","required","minLength","type","fieldParams","isRequired","editSection","templateId","section","selectedTemplateId","addSectionModal","open","reset","patchValue","saveSection","invalid","showMessage","value","Number","addOrUpdateSection","subscribe","sectionUpdated","emit","close","deleteSection","sectionId","toString","editField","field","selectedSectionId","addFieldModal","saveField","addOrUpdateField","deleteField","fieldId","toggleFieldsVisibility","expanded","msg","fire","icon","toast","position","showConfirmButton","timer","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.html"],"sourcesContent":["import { Component, Input, Output, ViewChild, EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html',\n  styleUrls: ['./template-details.component.css']\n})\nexport class TemplateDetailsComponent {\n  @Input() template: Template = {\n    id: 0,\n    title: '',\n    uniqeCode: '',\n    sections: []\n  };\n\n  @Output() sectionUpdated = new EventEmitter<void>();\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n  selectedSection?: Section;\n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {\n    this.initForms();\n  }\n\n  ngOnInit() {\n c\n\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['template']) {\n      console.log('Updated template:', this.template);\n    }\n  }\n\n  initForms() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],  // Default to 0 or any valid number\n    });\n  \n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],  // Default to 0 or any valid number\n      isRequired: [false],\n    });\n  }\n  \n\n  // Manage Sections\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.sectionParams.reset({ id: 0, title: '', type: '' });\n    if (section) {\n      this.sectionParams.patchValue(section);\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      return this.showMessage('Fill required fields', 'error');\n    }\n  \n    const section: Section = this.sectionParams.value;\n  \n    if (section.id) {\n      section.id = Number(section.id);  // Convert to number\n    }\n  \n    if (this.selectedTemplateId !== null) {\n      this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addSectionModal.close();\n        this.showMessage('Section saved successfully');\n      });\n    }\n  }\n  \n  \n  \n\n  deleteSection(templateId: number, sectionId: number) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sectionUpdated.emit();\n      this.showMessage('Section deleted successfully');\n    });\n  }\n  \n\n  // Manage Fields\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    this.addFieldModal.open();\n    this.fieldParams.reset({ id: 0, title: '', type: '', isRequired: false });\n    if (field) {\n      this.fieldParams.patchValue(field);\n    }\n  }\n\n  saveField() {\n    if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n    \n    const field: Field = this.fieldParams.value;\n    \n    if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n      // Convert selectedTemplateId and selectedSectionId to string\n      this.templateService.addOrUpdateField(\n        this.selectedTemplateId.toString(), // Convert to string\n        this.selectedSectionId.toString(),  // Convert to string\n        field\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addFieldModal.close();\n        this.showMessage('Field saved successfully');\n      });\n    }\n  }\n  \n\n  deleteField(section: Section, fieldId: number) {\n    if (this.selectedTemplateId !== null) {\n      this.templateService.deleteField(\n        this.selectedTemplateId.toString(),  // Convert templateId to string\n        section.id.toString(),               // Convert sectionId to string\n        fieldId.toString()                   // Convert fieldId to string\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.showMessage('Field deleted successfully');\n      });\n    }\n  }\n  \n\n  toggleFieldsVisibility(section: Section) {\n    section.expanded = !section.expanded;\n  }\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n    });\n  }\n}\n","<div class=\"template-details-container\">\n  <h2>Template: {{ template.title }}</h2>\n\n  <!-- Sections Section -->\n  <div class=\"section-list\">\n    <h3>Sections</h3>\n    <button class=\"btn btn-primary\" (click)=\"editSection(template.id)\">Add Section</button>\n\n    <div *ngFor=\"let section of template.sections\">\n      <div class=\"section-item\">\n        <h4>{{ section.title }}</h4>\n        <button class=\"btn btn-secondary\" (click)=\"editSection(template.id, section)\">Edit</button>\n        <button class=\"btn btn-danger\" (click)=\"deleteSection(template.id, section.id)\">Delete</button>\n        <button class=\"btn btn-info\" (click)=\"toggleFieldsVisibility(section)\">\n          {{ section.expanded ? 'Hide' : 'Show' }} Fields\n        </button>\n\n        <!-- Fields -->\n        <div *ngIf=\"section.expanded\">\n          <div *ngFor=\"let field of section.fields\">\n            <div class=\"field-item\">\n              <span>{{ field.title }} ({{ field.type }})</span>\n              <button class=\"btn btn-secondary\" (click)=\"editField(section, field)\">Edit</button>\n              <button class=\"btn btn-danger\" (click)=\"deleteField(section, field.id)\">Delete</button>\n            </div>\n          </div>\n          <button class=\"btn btn-primary\" (click)=\"editField(section)\">Add Field</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Section Modal -->\n  <modal #addSectionModal>\n    <ng-template let-modal>\n      <div class=\"modal-content\">\n        <h4>{{ sectionParams.value.id ? 'Edit' : 'Add' }} Section</h4>\n        <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n          <div class=\"form-group\">\n            <label for=\"title\">Section Title</label>\n            <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"type\">Section Type</label>\n            <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n              <option value=\"1\">Form</option> <!-- 1 corresponds to \"Form\" -->\n              <option value=\"2\">Table</option> <!-- 2 corresponds to \"Table\" -->\n            </select>\n          </div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"sectionParams.invalid\">Save</button>\n        </form>\n      </div>\n    </ng-template>\n  </modal>\n\n  <!-- Field Modal -->\n  <modal #addFieldModal>\n    <ng-template let-modal>\n      <div class=\"modal-content\">\n        <h4>{{ fieldParams.value.id ? 'Edit' : 'Add' }} Field</h4>\n        <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n          <div class=\"form-group\">\n            <label for=\"title\">Field Title</label>\n            <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"type\">Field Type</label>\n            <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n              <option value=\"1\">Text</option> <!-- 1 for Text -->\n              <option value=\"2\">Number</option> <!-- 2 for Number -->\n              <option value=\"3\">Date</option> <!-- 3 for Date -->\n              <option value=\"4\">Boolean</option> <!-- 4 for Boolean -->\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"isRequired\">Required</label>\n            <input type=\"checkbox\" formControlName=\"isRequired\" class=\"form-check-input\" id=\"isRequired\" />\n          </div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"fieldParams.invalid\">Save</button>\n        </form>\n      </div>\n    </ng-template>\n  </modal>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}