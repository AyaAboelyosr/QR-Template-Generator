{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate';\n    this.isLoggedInSubject = new BehaviorSubject(this.checkLoginStatus());\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}/login`, data).pipe(\n    // Assuming a successful login, you would set the login status to true\n    tap(() => this.setLoginStatus(true)));\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  logout() {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n  }\n  checkAuthenticationState() {\n    // Check or refresh authentication state if needed\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n  setLoginStatus(isLoggedIn) {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n  checkLoginStatus() {\n    // Check if the user is logged in, for example by checking for a valid token\n    return !!localStorage.getItem('role'); // Or any other condition to determine if the user is logged in\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;AAKvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,yCAAyC;IAClD,sBAAiB,GAAG,IAAIJ,eAAe,CAAU,IAAI,CAACK,gBAAgB,EAAE,CAAC;IACjF,gBAAW,GAAwB,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE;EAEjC;EAEvCC,KAAK,CAACC,IAAS;IACb,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CAACG,IAAI;IACtD;IACAX,GAAG,CAAC,MAAM,IAAI,CAACY,cAAc,CAAC,IAAI,CAAC,CAAC,CACrC;EACH;EAEAC,QAAQ,CAACL,IAAS;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC,CAAC,CAAC;EAC1D;;EAEAM,OAAO,CAACC,IAAY;IAClBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,IAAI,CAAC;EACpC;EAEAG,OAAO;IACL,OAAOF,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;EACrC;EAEAC,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACT,cAAc,CAAC,KAAK,CAAC;EAC5B;EAEAU,wBAAwB;IACtB;IACA,IAAI,CAACV,cAAc,CAAC,IAAI,CAACR,gBAAgB,EAAE,CAAC;EAC9C;EAEQQ,cAAc,CAACW,UAAmB;IACxC,IAAI,CAAClB,iBAAiB,CAACmB,IAAI,CAACD,UAAU,CAAC;EACzC;EAEQnB,gBAAgB;IACtB;IACA,OAAO,CAAC,CAACY,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;EAC1C;EAAC;qBA3CUlB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YAFV;EAAM","names":["BehaviorSubject","tap","AuthService","constructor","http","checkLoginStatus","isLoggedInSubject","asObservable","login","data","post","apiUrl","pipe","setLoginStatus","register","setRole","role","localStorage","setItem","getRole","getItem","logout","removeItem","checkAuthenticationState","isLoggedIn","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate';\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.checkLoginStatus());\n  isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  login(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, data).pipe(\n      // Assuming a successful login, you would set the login status to true\n      tap(() => this.setLoginStatus(true))\n    );\n  }\n\n  register(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n\n  logout(): void {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n  }\n\n  checkAuthenticationState() {\n    // Check or refresh authentication state if needed\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n\n  private setLoginStatus(isLoggedIn: boolean): void {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n\n  private checkLoginStatus(): boolean {\n    // Check if the user is logged in, for example by checking for a valid token\n    return !!localStorage.getItem('role');  // Or any other condition to determine if the user is logged in\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}