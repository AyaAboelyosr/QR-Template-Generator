{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/authentication/services/auth.service\";\nexport class TemplateService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'https://localhost:7110/api/QRTemplate';\n    this.authheader = this.authService.getAuthHeaders();\n  }\n  getAllTemplates() {\n    return this.http.get(this.apiUrl, {\n      headers: this.authheader\n    });\n  }\n  getTemplateById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  addTemplate(newTemplate) {\n    return this.http.post(this.apiUrl, newTemplate, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  updateTemplate(id, updatedData) {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedData, {\n      headers: this.authheader\n    });\n  }\n  deleteTemplate(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  // Section methods\n  addSection() {\n    const newSection = {\n      title: '',\n      type: 'form',\n      fields: [],\n      expanded: false\n    };\n    this.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  updateSection(templateId, sectionId, section) {\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}`, section, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  deleteSection(templateId, sectionId) {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  getSectionFields(templateId, sectionId) {\n    const url = `${this.apiUrl}/${templateId}/sections/${sectionId}/fields`;\n    console.log('Request URL:', url); // Log the request URL\n    return this.http.get(url, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  // Field methods\n  addField(templateId, sectionId, field) {\n    console.log('Adding field:', {\n      templateId,\n      sectionId,\n      field\n    }); // Debug here\n    return this.http.post(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields`, field, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  updateField(templateId, sectionId, fieldId, field) {\n    console.log('Updating field:', {\n      templateId,\n      sectionId,\n      fieldId,\n      field\n    }); // Debug here\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, field, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  deleteField(templateId, sectionId, fieldId) {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      if (error.status === 400 && error.error.message) {\n        errorMessage = error.error.message;\n      }\n    }\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function TemplateService_Factory(t) {\n    return new (t || TemplateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TemplateService,\n    factory: TemplateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["catchError","throwError","TemplateService","constructor","http","authService","getAuthHeaders","getAllTemplates","get","apiUrl","headers","authheader","getTemplateById","id","pipe","handleError","addTemplate","newTemplate","post","updateTemplate","updatedData","put","deleteTemplate","delete","addSection","newSection","title","type","fields","expanded","templateId","subscribe","next","res","templateData","sections","push","error","console","updateSection","sectionId","section","deleteSection","getSectionFields","url","log","addField","field","updateField","fieldId","deleteField","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\services\\template.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\nimport { AuthService } from 'src/app/authentication/services/auth.service';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemplateService {\n\n  private apiUrl = 'https://localhost:7110/api/QRTemplate';\n\n  constructor(private http: HttpClient,\n    private authService: AuthService\n  ) {\n    \n  }\n    authheader = this.authService.getAuthHeaders();\n  getAllTemplates(): Observable<any[]> {\n    \n    return this.http.get<any[]>(this.apiUrl,{headers:this.authheader});\n  }\n\n  getTemplateById(id: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${id}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n  addTemplate(newTemplate: any): Observable<any> {\n    return this.http.post(this.apiUrl, newTemplate,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  updateTemplate(id: string, updatedData: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedData,{headers:this.authheader});\n  }\n  \n  deleteTemplate(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n   // Section methods\n  \n   addSection(): void {\n    const newSection = { title: '', type: 'form', fields: [], expanded: false };\n    this.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n\n  \n  \n\n  updateSection(templateId: string, sectionId: string, section: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}`, section,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteSection(templateId: string, sectionId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getSectionFields(templateId: string, sectionId: string): Observable<Field[]> {\n    const url = `${this.apiUrl}/${templateId}/sections/${sectionId}/fields`;\n    console.log('Request URL:', url); // Log the request URL\n    return this.http.get<Field[]>(url,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n\n  // Field methods\n \n\n  addField(templateId: string, sectionId: string, field: any): Observable<any> {\n    console.log('Adding field:', { templateId, sectionId, field }); // Debug here\n    return this.http.post(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields`, field,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n  \n \n  \n\n  updateField(templateId: string, sectionId: string, fieldId: string, field: any): Observable<any> {\n    console.log('Updating field:', { templateId, sectionId, fieldId, field }); // Debug here\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, field,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteField(templateId: string, sectionId: string, fieldId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n     \n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n     \n      if (error.status === 400 && error.error.message) {\n        errorMessage = error.error.message;\n      }\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}