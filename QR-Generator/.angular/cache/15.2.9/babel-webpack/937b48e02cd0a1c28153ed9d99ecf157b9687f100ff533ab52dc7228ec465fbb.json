{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/authentication/services/auth.service\";\nexport class TemplateService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'https://localhost:7110/api/QRTemplate';\n    this.authheader = this.authService.getAuthHeaders();\n  }\n  getAllTemplates() {\n    return this.http.get(this.apiUrl, {\n      headers: this.authheader\n    });\n  }\n  getTemplateById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  addTemplate(newTemplate) {\n    return this.http.post(this.apiUrl, newTemplate, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  updateTemplate(id, updatedData) {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedData, {\n      headers: this.authheader\n    });\n  }\n  deleteTemplate(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  // Section methods\n  addSection(templateId, section) {\n    return this.http.post(`${this.apiUrl}/${templateId}/sections`, section, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  updateSection(templateId, sectionId, section) {\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}`, section, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  deleteSection(templateId, sectionId) {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  getSectionFields(templateId, sectionId) {\n    const url = `${this.apiUrl}/${templateId}/sections/${sectionId}/fields`;\n    console.log('Request URL:', url); // Log the request URL\n    return this.http.get(url, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  // Field methods\n  addField(templateId, sectionId, field) {\n    const url = `${this.baseUrl}/api/QRTemplate/${templateId}/sections/${sectionId}/fields`;\n    return this.http.post(url, field); // Send the field object directly\n  }\n\n  updateField(templateId, sectionId, fieldId, field) {\n    console.log('Updating field:', {\n      templateId,\n      sectionId,\n      fieldId,\n      field\n    }); // Debug here\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, field, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  deleteField(templateId, sectionId, fieldId) {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, {\n      headers: this.authheader\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      if (error.status === 400 && error.error.message) {\n        errorMessage = error.error.message;\n      }\n    }\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function TemplateService_Factory(t) {\n    return new (t || TemplateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TemplateService,\n    factory: TemplateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["catchError","throwError","TemplateService","constructor","http","authService","getAuthHeaders","getAllTemplates","get","apiUrl","headers","authheader","getTemplateById","id","pipe","handleError","addTemplate","newTemplate","post","updateTemplate","updatedData","put","deleteTemplate","delete","addSection","templateId","section","updateSection","sectionId","deleteSection","getSectionFields","url","console","log","addField","field","baseUrl","updateField","fieldId","deleteField","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\services\\template.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\nimport { AuthService } from 'src/app/authentication/services/auth.service';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemplateService {\n\n  private apiUrl = 'https://localhost:7110/api/QRTemplate';\n\n  constructor(private http: HttpClient,\n    private authService: AuthService\n  ) {\n    \n  }\n    authheader = this.authService.getAuthHeaders();\n  getAllTemplates(): Observable<any[]> {\n    \n    return this.http.get<any[]>(this.apiUrl,{headers:this.authheader});\n  }\n\n  getTemplateById(id: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/${id}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n  addTemplate(newTemplate: any): Observable<any> {\n    return this.http.post(this.apiUrl, newTemplate,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  updateTemplate(id: string, updatedData: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedData,{headers:this.authheader});\n  }\n  \n  deleteTemplate(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n   // Section methods\n  \n   addSection(templateId: string, section: { title: string; type: number }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/${templateId}/sections`, section,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n  \n  \n\n  updateSection(templateId: string, sectionId: string, section: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}`, section,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteSection(templateId: string, sectionId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getSectionFields(templateId: string, sectionId: string): Observable<Field[]> {\n    const url = `${this.apiUrl}/${templateId}/sections/${sectionId}/fields`;\n    console.log('Request URL:', url); // Log the request URL\n    return this.http.get<Field[]>(url,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n\n  // Field methods\n \n\n addField(templateId: string, sectionId: string, field: any) {\n  const url = `${this.baseUrl}/api/QRTemplate/${templateId}/sections/${sectionId}/fields`;\n  return this.http.post(url, field); // Send the field object directly\n}\n  \n \n  \n\n  updateField(templateId: string, sectionId: string, fieldId: string, field: any): Observable<any> {\n    console.log('Updating field:', { templateId, sectionId, fieldId, field }); // Debug here\n    return this.http.put(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`, field,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteField(templateId: string, sectionId: string, fieldId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${templateId}/sections/${sectionId}/fields/${fieldId}`,{headers:this.authheader}).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n     \n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n     \n      if (error.status === 400 && error.error.message) {\n        errorMessage = error.error.message;\n      }\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}