{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const isLoggedIn = authService.isAuthenticated();\n  const isAdmin = authService.isAdmin();\n  if (isLoggedIn) {\n    if (isAdmin && state.url === 'admin') {\n      return true;\n    }\n    if (isAdmin && state.url !== 'admin') {\n      router.navigate(['admin']);\n      return false;\n    }\n    return true;\n  } else {\n    authService.redirectUrl = state.url;\n    router.navigate(['auth/login']);\n    return false;\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAAgDC,MAAM,QAAsC,iBAAiB;AAE7G,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,OAAO,MAAMC,SAAS,GAAkB,CAACC,KAA6B,EAAEC,KAA0B,KAAI;EACpG,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAC7B,MAAMO,UAAU,GAAGF,WAAW,CAACG,eAAe,EAAE;EAChD,MAAMC,OAAO,GAAGJ,WAAW,CAACI,OAAO,EAAE;EAErC,IAAIF,UAAU,EAAE;IACd,IAAIE,OAAO,IAAIL,KAAK,CAACM,GAAG,KAAK,OAAO,EAAE;MACpC,OAAO,IAAI;;IAEb,IAAID,OAAO,IAAIL,KAAK,CAACM,GAAG,KAAK,OAAO,EAAE;MACpCJ,MAAM,CAACK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC1B,OAAO,KAAK;;IAEd,OAAO,IAAI;GACZ,MAAM;IACLN,WAAW,CAACO,WAAW,GAAGR,KAAK,CAACM,GAAG;IACnCJ,MAAM,CAACK,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IAC/B,OAAO,KAAK;;AAEhB,CAAC","names":["inject","Router","AuthService","authGuard","route","state","authService","router","isLoggedIn","isAuthenticated","isAdmin","url","navigate","redirectUrl"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\auth.guard.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\nexport const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const isLoggedIn = authService.isAuthenticated();\n  const isAdmin = authService.isAdmin();  \n\n  if (isLoggedIn) {\n    if (isAdmin && state.url === 'admin') {\n      return true; \n    }\n    if (isAdmin && state.url !== 'admin') {\n      router.navigate(['admin']);  \n      return false;\n    }\n    return true; \n  } else {\n    authService.redirectUrl = state.url;\n    router.navigate(['auth/login']);\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}