{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute } from '@angular/router';\nimport Swal from 'sweetalert2';\nlet TemplateItemComponent = class TemplateItemComponent {\n  constructor() {\n    this._TemplateService = inject(TemplateService);\n    this._router = inject(ActivatedRoute);\n    this._fb = inject(FormBuilder);\n    this.currentSectionId = null;\n    this.templateData = {};\n    this.displayType = 'grid';\n  }\n  ngOnInit() {\n    this.templateId = this._router.snapshot.paramMap.get('id');\n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n  initSectionForm() {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initForm() {\n    this.params = this._fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n  openAddFieldModal(sectionId) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({\n      type: 'Text',\n      isRequired: false,\n      title: ''\n    });\n    this.addFieldModal.open();\n  }\n  openAddSectionModal() {\n    this.sectionParams.reset({\n      type: 'form'\n    });\n    this.addSectionModal.open();\n  }\n  saveField() {\n    if (this.fieldParams.invalid) return;\n    const fieldData = this.fieldParams.value;\n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n    // Create the payload for the API request\n    const requestData = {\n      title: fieldData.title,\n      type: mappedType,\n      isRequired: fieldData.isRequired\n    };\n    if (fieldData.id) {\n      // If there is an ID, it's an existing field that needs to be updated\n      this._TemplateService.updateField(this.templateId, this.currentSectionId.toString(), fieldData.id.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            const fieldIndex = section.fields.findIndex(f => f.id === fieldData.id);\n            if (fieldIndex !== -1) {\n              // Replace the existing field with the updated one\n              section.fields[fieldIndex] = res;\n            }\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error updating field:', error);\n        }\n      });\n    } else {\n      // If there is no ID, it's a new field that needs to be added\n      this._TemplateService.addField(this.templateId, this.currentSectionId.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            section.fields.push(res); // Add the new field to the section\n          }\n\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error adding field:', error);\n        }\n      });\n    }\n  }\n  getTemplatebyId() {\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: res => {\n        console.log('Template id', this.templateId);\n        console.log('Result =', res);\n        this.templateData = res;\n      },\n      error: error => {\n        console.error('Error:', error);\n      }\n    });\n  }\n  saveTemplate() {\n    if (!this.templateData.title || !this.templateData.uniqeCode) {\n      Swal.fire('Error', 'Please fill all required fields.', 'error');\n      return;\n    }\n    const template = {\n      id: this.templateId,\n      title: this.templateData.title,\n      uniqeCode: this.templateData.uniqeCode\n    };\n    // Update the template\n    this._TemplateService.updateTemplate(this.templateId, template).subscribe({\n      next: () => {\n        Swal.fire('Success', 'Template updated successfully.', 'success');\n      },\n      error: error => {\n        console.error('Error updating template:', error);\n        Swal.fire('Error', 'Failed to update template.', 'error');\n      }\n    });\n  }\n  toggleSection(section) {\n    section.expanded = !section.expanded;\n  }\n  toggleField(field) {\n    field.expanded = !field.expanded;\n  }\n  addSection() {\n    const newSection = {\n      title: 'New Section',\n      type: this.mapSectionType('Form'),\n      fields: [],\n      expanded: false\n    };\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  // The mapSectionType method\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'form': 0,\n      'table': 1 // Assuming 1 is for \"Table\"\n    };\n\n    return sectionTypeMap[type.toLowerCase()] ?? 0; // Default to 0 if the type is not found\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n    const sectionData = this.sectionParams.value;\n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type)\n    };\n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData).subscribe({\n        next: res => {\n          const sectionIndex = this.templateData.sections.findIndex(s => s.id === sectionData.id);\n          if (sectionIndex !== -1) {\n            this.templateData.sections[sectionIndex] = res;\n          }\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error updating section:', error);\n        }\n      });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData).subscribe({\n        next: res => {\n          this.templateData.sections.push(res);\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error adding section:', error);\n        }\n      });\n    }\n  }\n  editSection(section) {\n    // Initialize the form before setting values\n    this.initSectionForm();\n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  deleteSection(sectionId) {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter(s => s.id !== sectionId);\n      },\n      error: error => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n  // field methods \n  addField(sectionId) {\n    const newField = {\n      title: '',\n      type: 'Text',\n      isRequired: false,\n      expanded: false\n    };\n    // Convert sectionId to string before passing it to the service\n    this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n      next: res => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields.push(res);\n        }\n      },\n      error: error => {\n        console.error('Error adding field:', error);\n      }\n    });\n  }\n  editField(sectionId, field) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.patchValue(field); // Populate the form with the field data\n    this.addFieldModal.open(); // Open the modal to edit the field\n  }\n\n  deleteField(sectionId, fieldId) {\n    // Convert both sectionId and fieldId to strings before passing to the service\n    this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields = section.fields.filter(f => f.id !== fieldId);\n        }\n      },\n      error: error => {\n        console.error('Error deleting field:', error);\n      }\n    });\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n  }\n\n  editTemplate(template = null) {\n    this.initForm();\n    if (template) {\n      this.params.setValue({\n        id: template.id,\n        title: template.title,\n        uniqeCode: template.uniqeCode\n      });\n    }\n  }\n};\n__decorate([ViewChild('addFieldModal')], TemplateItemComponent.prototype, \"addFieldModal\", void 0);\n__decorate([ViewChild('addSectionModal')], TemplateItemComponent.prototype, \"addSectionModal\", void 0);\nTemplateItemComponent = __decorate([Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})], TemplateItemComponent);\nexport { TemplateItemComponent };","map":{"version":3,"mappings":"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","names":["Component","inject","ViewChild","FormBuilder","Validators","TemplateService","ActivatedRoute","Swal","TemplateItemComponent","constructor","ngOnInit","templateId","_router","snapshot","paramMap","get","getTemplatebyId","initFieldForm","initSectionForm","sectionParams","_fb","group","id","title","required","minLength","maxLength","type","initForm","params","uniqeCode","pattern","fieldParams","isRequired","openAddFieldModal","sectionId","currentSectionId","reset","addFieldModal","open","openAddSectionModal","addSectionModal","saveField","invalid","fieldData","value","mappedType","mapFieldType","requestData","_TemplateService","updateField","toString","subscribe","next","res","section","templateData","sections","find","s","fieldIndex","fields","findIndex","f","close","error","console","addField","push","getTemplateById","log","saveTemplate","fire","template","updateTemplate","toggleSection","expanded","toggleField","field","addSection","newSection","mapSectionType","sectionTypeMap","toLowerCase","saveSection","sectionData","trim","updateSection","sectionIndex","editSection","setValue","deleteSection","filter","newField","editField","patchValue","deleteField","fieldId","fieldTypeMap","editTemplate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.ts"],"sourcesContent":["import { Component, inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Template } from '../../Models/Template';\nimport Swal from 'sweetalert2';\n\n\n@Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})\nexport class TemplateItemComponent implements OnInit {\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n\n  _TemplateService=inject(TemplateService);\n  _router=inject(ActivatedRoute);\n  _fb = inject(FormBuilder);\n  fieldParams!: FormGroup;\n  sectionParams!: FormGroup;\n  currentSectionId: number | null = null;\n  templateData: any = {};\n  displayType: string = 'grid'; \n  templateId!: string;\n  params!: FormGroup;\n  ngOnInit(): void {\n    this.templateId = this._router.snapshot.paramMap.get('id')!; \n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n\n  initSectionForm(): void {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],  // Title validation\n      type: ['', Validators.required]\n    });\n  }\n  \n  initForm() {\n    this.params = this._fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      uniqeCode: ['', [Validators.required, Validators.pattern(/^[A-Z]{2}-\\d{3}$/)]],\n    });\n  }\n\n  initFieldForm(): void {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n\n  openAddFieldModal(sectionId: number): void {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({ type: 'Text', isRequired: false, title: '' });\n    this.addFieldModal.open();\n  }\n  \n\n  openAddSectionModal(): void {\n    this.sectionParams.reset({ type: 'form' });\n    this.addSectionModal.open();\n  }\n\n  saveField(): void {\n    if (this.fieldParams.invalid) return;\n  \n    const fieldData = this.fieldParams.value;\n  \n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n  \n    // Create the payload for the API request\n    const requestData = {\n      title: fieldData.title,\n      type: mappedType,\n      isRequired: fieldData.isRequired\n    };\n  \n    if (fieldData.id) {\n      // If there is an ID, it's an existing field that needs to be updated\n      this._TemplateService.updateField(this.templateId, this.currentSectionId!.toString(), fieldData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              const fieldIndex = section.fields.findIndex((f: any) => f.id === fieldData.id);\n              if (fieldIndex !== -1) {\n                // Replace the existing field with the updated one\n                section.fields[fieldIndex] = res;\n              }\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating field:', error);\n          }\n        });\n    } else {\n      // If there is no ID, it's a new field that needs to be added\n      this._TemplateService.addField(this.templateId, this.currentSectionId!.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              section.fields.push(res);  // Add the new field to the section\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding field:', error);\n          }\n        });\n    }\n  }\n  \n\n  getTemplatebyId(){\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: (res) => {\n        console.log( 'Template id',this.templateId);\n        console.log('Result =' ,res);\n        this.templateData = res;\n       \n      },\n      error: (error) => {\n        console.error('Error:', error);\n      }\n\n\n    })\n  }\n\n  saveTemplate(): void {\n    if (!this.templateData.title || !this.templateData.uniqeCode) {\n      Swal.fire('Error', 'Please fill all required fields.', 'error');\n      return;\n    }\n\n    const template: any = {\n      id: this.templateId,\n      title: this.templateData.title,\n      uniqeCode: this.templateData.uniqeCode\n    };\n\n    // Update the template\n    this._TemplateService.updateTemplate(this.templateId, template).subscribe({\n      next: () => {\n        Swal.fire('Success', 'Template updated successfully.', 'success');\n      },\n      error: (error) => {\n        console.error('Error updating template:', error);\n        Swal.fire('Error', 'Failed to update template.', 'error');\n      }\n    });\n  }\n  \n  toggleSection(section: any) {\n    section.expanded = !section.expanded;\n  }\n  \n  \n\n  toggleField(field: any): void {\n    field.expanded = !field.expanded;\n  }\n\n  addSection(): void {\n    const newSection = {\n      title: 'New Section',  // Ensure the title is not empty and has at least 3 characters\n      type: this.mapSectionType('Form'), // Default type 'Form'\n      fields: [],\n      expanded: false\n    };\n  \n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  \n  // The mapSectionType method\n  private mapSectionType(type: string): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'form': 0,   // Assuming 0 is for \"Form\"\n      'table': 1,  // Assuming 1 is for \"Table\"\n    };\n    return sectionTypeMap[type.toLowerCase()] ?? 0;  // Default to 0 if the type is not found\n  }\n  \n\n  saveSection(): void {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n  \n    const sectionData = this.sectionParams.value;\n  \n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n  \n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type),\n    };\n  \n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const sectionIndex = this.templateData.sections.findIndex((s: any) => s.id === sectionData.id);\n            if (sectionIndex !== -1) {\n              this.templateData.sections[sectionIndex] = res;\n            }\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating section:', error);\n          }\n        });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData)\n        .subscribe({\n          next: (res) => {\n            this.templateData.sections.push(res);\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding section:', error);\n          }\n        });\n    }\n  }\n  \n  \n  editSection(section: any): void {\n    // Initialize the form before setting values\n    this.initSectionForm();\n  \n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  \n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  \n\n  deleteSection(sectionId: number): void {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter((s: any) => s.id !== sectionId);\n      },\n      error: (error) => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n// field methods \n\naddField(sectionId: number): void {\n  const newField = {\n    title: '',\n    type: 'Text', // Default type 'Text'\n    isRequired: false,\n    expanded: false\n  };\n\n  // Convert sectionId to string before passing it to the service\n  this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n    next: (res) => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields.push(res);\n      }\n    },\n    error: (error) => {\n      console.error('Error adding field:', error);\n    }\n  });\n}\n\neditField(sectionId: number, field: any): void {\n  this.currentSectionId = sectionId;\n  this.fieldParams.patchValue(field);  // Populate the form with the field data\n  this.addFieldModal.open();           // Open the modal to edit the field\n}\n\n\ndeleteField(sectionId: number, fieldId: number): void {\n  // Convert both sectionId and fieldId to strings before passing to the service\n  this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n    next: () => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields = section.fields.filter((f: any) => f.id !== fieldId);\n      }\n    },\n    error: (error) => {\n      console.error('Error deleting field:', error);\n    }\n  });\n}\n\n\n\nprivate mapFieldType(type: string): number {\n  const fieldTypeMap: { [key: string]: number } = {\n    'Text': 0,\n    'Number': 1,\n    'Date': 2,\n    'Boolean': 3\n  };\n  return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n}\n\n editTemplate(template: Template | null = null) {\n  \n      this.initForm();\n      if (template) {\n        this.params.setValue({\n          id: template.id,\n          title: template.title,\n          uniqeCode: template.uniqeCode,\n        });\n      }\n   \n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}