{"ast":null,"code":"\"use strict\";\n\n// import { Component, Input, Output, ViewChild, EventEmitter, SimpleChanges } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { ModalComponent } from 'angular-custom-modal';\n// import Swal from 'sweetalert2';\n// import { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\n// import { Template } from 'src/app/qrtemplategenerator/Models/Template';\n// import { Section } from 'src/app/qrtemplategenerator/Models/Section';\n// import { Field } from 'src/app/qrtemplategenerator/Models/Field';\n// @Component({\n//   selector: 'app-template-details',\n//   templateUrl: './template-details.component.html',\n//   styleUrls: ['./template-details.component.css']\n// })\n// export class TemplateDetailsComponent {\n//   @Input() template: Template = {\n//     id: 0,\n//     title: '',\n//     uniqeCode: '',\n//     sections: []\n//   };\n//   @Output() sectionUpdated = new EventEmitter<void>();\n//   @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n//   @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n//   sectionParams!: FormGroup;\n//   fieldParams!: FormGroup;\n//   selectedSection?: Section;\n//   selectedTemplateId: number | null = null;\n//   selectedSectionId: number | null = null;\n//   constructor(private fb: FormBuilder, private templateService: TemplateService) {\n//     this.initForms();\n//   }\n//   ngOnInit() {\n//     if (this.template.id) {\n//       this.getTemplateDetails(this.template.id);\n//     }\n//   }\n//   ngOnChanges(changes: SimpleChanges) {\n//     if (changes['template']) {\n//       console.log('Updated template:', this.template);\n//     }\n//   }\n//   initForms() {\n//     this.sectionParams = this.fb.group({\n//       id: [0],\n//       title: ['', [Validators.required, Validators.minLength(3)]],\n//       type: [0, Validators.required],  // Default to 0 or any valid number\n//     });\n//     this.fieldParams = this.fb.group({\n//       id: [0],\n//       title: ['', [Validators.required, Validators.minLength(3)]],\n//       type: [0, Validators.required],  // Default to 0 or any valid number\n//       isRequired: [false],\n//     });\n//   }\n//   // Manage Sections\n//   editSection(templateId: number, section: Section | null = null) {\n//     this.selectedTemplateId = templateId;\n//     this.addSectionModal.open();\n//     this.sectionParams.reset({ id: 0, title: '', type: '' });\n//     if (section) {\n//       this.sectionParams.patchValue(section);\n//     }\n//   }\n//   getTemplateDetails(id: number) {\n//     this.templateService.getTemplateById(id.toString()).subscribe({\n//       next: (templateData) => {\n//         if (templateData) {\n//           this.template = templateData;\n//           console.log('Template fetched:', this.template);\n//         } else {\n//           this.showMessage('Template not found', 'error');\n//         }\n//       },\n//       error: (err) => {\n//         console.error('Error fetching template:', err);\n//         this.showMessage('Failed to load template', 'error');\n//       }\n//     });\n//   }\n//   saveSection() {\n//     if (this.sectionParams.invalid) {\n//       return this.showMessage('Fill required fields', 'error');\n//     }\n//     const section: Section = this.sectionParams.value;\n//     if (section.id) {\n//       section.id = Number(section.id);  // Convert to number\n//     }\n//     if (this.selectedTemplateId !== null) {\n//       this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.addSectionModal.close();\n//         this.showMessage('Section saved successfully');\n//       });\n//     }\n//   }\n//   deleteSection(templateId: number, sectionId: number) {\n//     this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n//       this.sectionUpdated.emit();\n//       this.showMessage('Section deleted successfully');\n//     });\n//   }\n//   // Manage Fields\n//   editField(section: Section, field: Field | null = null) {\n//     this.selectedSectionId = section.id;\n//     this.addFieldModal.open();\n//     this.fieldParams.reset({ id: 0, title: '', type: '', isRequired: false });\n//     if (field) {\n//       this.fieldParams.patchValue(field);\n//     }\n//   }\n//   saveField() {\n//     if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n//     const field: Field = this.fieldParams.value;\n//     if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n//       // Convert selectedTemplateId and selectedSectionId to string\n//       this.templateService.addOrUpdateField(\n//         this.selectedTemplateId.toString(), // Convert to string\n//         this.selectedSectionId.toString(),  // Convert to string\n//         field\n//       ).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.addFieldModal.close();\n//         this.showMessage('Field saved successfully');\n//       });\n//     }\n//   }\n//   deleteField(section: Section, fieldId: number) {\n//     if (this.selectedTemplateId !== null) {\n//       this.templateService.deleteField(\n//         this.selectedTemplateId.toString(),  // Convert templateId to string\n//         section.id.toString(),               // Convert sectionId to string\n//         fieldId.toString()                   // Convert fieldId to string\n//       ).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.showMessage('Field deleted successfully');\n//       });\n//     }\n//   }\n//   toggleFieldsVisibility(section: Section) {\n//     section.expanded = !section.expanded;\n//   }\n//   showMessage(msg: string, type: 'success' | 'error' = 'success') {\n//     Swal.fire({\n//       icon: type,\n//       title: msg,\n//       toast: true,\n//       position: 'top',\n//       showConfirmButton: false,\n//       timer: 3000,\n//     });\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts"],"sourcesContent":["// import { Component, Input, Output, ViewChild, EventEmitter, SimpleChanges } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { ModalComponent } from 'angular-custom-modal';\n// import Swal from 'sweetalert2';\n// import { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\n// import { Template } from 'src/app/qrtemplategenerator/Models/Template';\n// import { Section } from 'src/app/qrtemplategenerator/Models/Section';\n// import { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n// @Component({\n//   selector: 'app-template-details',\n//   templateUrl: './template-details.component.html',\n//   styleUrls: ['./template-details.component.css']\n// })\n// export class TemplateDetailsComponent {\n//   @Input() template: Template = {\n//     id: 0,\n//     title: '',\n//     uniqeCode: '',\n//     sections: []\n//   };\n\n//   @Output() sectionUpdated = new EventEmitter<void>();\n//   @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n//   @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n//   sectionParams!: FormGroup;\n//   fieldParams!: FormGroup;\n//   selectedSection?: Section;\n//   selectedTemplateId: number | null = null;\n//   selectedSectionId: number | null = null;\n\n//   constructor(private fb: FormBuilder, private templateService: TemplateService) {\n//     this.initForms();\n//   }\n\n//   ngOnInit() {\n//     if (this.template.id) {\n//       this.getTemplateDetails(this.template.id);\n//     }\n\n//   }\n//   ngOnChanges(changes: SimpleChanges) {\n//     if (changes['template']) {\n//       console.log('Updated template:', this.template);\n//     }\n//   }\n\n//   initForms() {\n//     this.sectionParams = this.fb.group({\n//       id: [0],\n//       title: ['', [Validators.required, Validators.minLength(3)]],\n//       type: [0, Validators.required],  // Default to 0 or any valid number\n//     });\n  \n//     this.fieldParams = this.fb.group({\n//       id: [0],\n//       title: ['', [Validators.required, Validators.minLength(3)]],\n//       type: [0, Validators.required],  // Default to 0 or any valid number\n//       isRequired: [false],\n//     });\n//   }\n  \n\n//   // Manage Sections\n//   editSection(templateId: number, section: Section | null = null) {\n//     this.selectedTemplateId = templateId;\n//     this.addSectionModal.open();\n//     this.sectionParams.reset({ id: 0, title: '', type: '' });\n//     if (section) {\n//       this.sectionParams.patchValue(section);\n//     }\n//   }\n\n\n//   getTemplateDetails(id: number) {\n//     this.templateService.getTemplateById(id.toString()).subscribe({\n//       next: (templateData) => {\n//         if (templateData) {\n//           this.template = templateData;\n//           console.log('Template fetched:', this.template);\n//         } else {\n//           this.showMessage('Template not found', 'error');\n//         }\n//       },\n//       error: (err) => {\n//         console.error('Error fetching template:', err);\n//         this.showMessage('Failed to load template', 'error');\n//       }\n//     });\n//   }\n\n//   saveSection() {\n//     if (this.sectionParams.invalid) {\n//       return this.showMessage('Fill required fields', 'error');\n//     }\n  \n//     const section: Section = this.sectionParams.value;\n  \n//     if (section.id) {\n//       section.id = Number(section.id);  // Convert to number\n//     }\n  \n//     if (this.selectedTemplateId !== null) {\n//       this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.addSectionModal.close();\n//         this.showMessage('Section saved successfully');\n//       });\n//     }\n//   }\n  \n  \n  \n\n//   deleteSection(templateId: number, sectionId: number) {\n//     this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n//       this.sectionUpdated.emit();\n//       this.showMessage('Section deleted successfully');\n//     });\n//   }\n  \n\n//   // Manage Fields\n//   editField(section: Section, field: Field | null = null) {\n//     this.selectedSectionId = section.id;\n//     this.addFieldModal.open();\n//     this.fieldParams.reset({ id: 0, title: '', type: '', isRequired: false });\n//     if (field) {\n//       this.fieldParams.patchValue(field);\n//     }\n//   }\n\n//   saveField() {\n//     if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n    \n//     const field: Field = this.fieldParams.value;\n    \n//     if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n//       // Convert selectedTemplateId and selectedSectionId to string\n//       this.templateService.addOrUpdateField(\n//         this.selectedTemplateId.toString(), // Convert to string\n//         this.selectedSectionId.toString(),  // Convert to string\n//         field\n//       ).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.addFieldModal.close();\n//         this.showMessage('Field saved successfully');\n//       });\n//     }\n//   }\n  \n\n//   deleteField(section: Section, fieldId: number) {\n//     if (this.selectedTemplateId !== null) {\n//       this.templateService.deleteField(\n//         this.selectedTemplateId.toString(),  // Convert templateId to string\n//         section.id.toString(),               // Convert sectionId to string\n//         fieldId.toString()                   // Convert fieldId to string\n//       ).subscribe(() => {\n//         this.sectionUpdated.emit();\n//         this.showMessage('Field deleted successfully');\n//       });\n//     }\n//   }\n  \n\n//   toggleFieldsVisibility(section: Section) {\n//     section.expanded = !section.expanded;\n//   }\n\n//   showMessage(msg: string, type: 'success' | 'error' = 'success') {\n//     Swal.fire({\n//       icon: type,\n//       title: msg,\n//       toast: true,\n//       position: 'top',\n//       showConfirmButton: false,\n//       timer: 3000,\n//     });\n//   }\n// }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}