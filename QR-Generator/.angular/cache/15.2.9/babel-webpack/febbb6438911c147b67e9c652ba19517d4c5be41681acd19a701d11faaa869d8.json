{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"addSectionModal\"];\nconst _c1 = [\"addFieldModal\"];\nfunction TemplateDetailsComponent_div_0_div_5_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r4.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" (Type: \", field_r4.type, \") - Required: \", field_r4.isRequired ? \"Yes\" : \"No\", \" \");\n  }\n}\nfunction TemplateDetailsComponent_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TemplateDetailsComponent_div_0_div_5_li_4_Template, 4, 3, \"li\", 1);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(section_r2.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", section_r2.fields);\n  }\n}\nfunction TemplateDetailsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TemplateDetailsComponent_div_0_div_5_Template, 5, 2, \"div\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.template.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.template.uniqeCode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.template.sections);\n  }\n}\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.template = {\n      id: 0,\n      title: '',\n      uniqeCode: '',\n      sections: []\n    };\n    this.sectionUpdated = new EventEmitter();\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n    this.initForms();\n  }\n  ngOnInit() {\n    if (this.template.id) {\n      this.getTemplateDetails(this.template.id);\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['template']) {\n      console.log('Updated template:', this.template);\n    }\n  }\n  initForms() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required] // Default to 0 or any valid number\n    });\n\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],\n      isRequired: [false]\n    });\n  }\n  // Manage Sections\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.sectionParams.reset({\n      id: 0,\n      title: '',\n      type: ''\n    });\n    if (section) {\n      this.sectionParams.patchValue(section);\n    }\n  }\n  getTemplateDetails(id) {\n    this.templateService.getTemplateById(id.toString()).subscribe({\n      next: templateData => {\n        if (templateData) {\n          this.template = templateData;\n          console.log('Template fetched:', this.template);\n        } else {\n          this.showMessage('Template not found', 'error');\n        }\n      },\n      error: err => {\n        console.error('Error fetching template:', err);\n        this.showMessage('Failed to load template', 'error');\n      }\n    });\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      return this.showMessage('Fill required fields', 'error');\n    }\n    const section = this.sectionParams.value;\n    if (section.id) {\n      section.id = Number(section.id); // Convert to number\n    }\n\n    if (this.selectedTemplateId !== null) {\n      this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addSectionModal.close();\n        this.showMessage('Section saved successfully');\n      });\n    }\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sectionUpdated.emit();\n      this.showMessage('Section deleted successfully');\n    });\n  }\n  // Manage Fields\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    this.addFieldModal.open();\n    this.fieldParams.reset({\n      id: 0,\n      title: '',\n      type: '',\n      isRequired: false\n    });\n    if (field) {\n      this.fieldParams.patchValue(field);\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n    const field = this.fieldParams.value;\n    if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n      // Convert selectedTemplateId and selectedSectionId to string\n      this.templateService.addOrUpdateField(this.selectedTemplateId.toString(),\n      // Convert to string\n      this.selectedSectionId.toString(),\n      // Convert to string\n      field).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addFieldModal.close();\n        this.showMessage('Field saved successfully');\n      });\n    }\n  }\n  deleteField(section, fieldId) {\n    if (this.selectedTemplateId !== null) {\n      this.templateService.deleteField(this.selectedTemplateId.toString(),\n      // Convert templateId to string\n      section.id.toString(),\n      // Convert sectionId to string\n      fieldId.toString() // Convert fieldId to string\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.showMessage('Field deleted successfully');\n      });\n    }\n  }\n  toggleFieldsVisibility(section) {\n    section.expanded = !section.expanded;\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000\n    });\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    viewQuery: function TemplateDetailsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    inputs: {\n      template: \"template\"\n    },\n    outputs: {\n      sectionUpdated: \"sectionUpdated\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function TemplateDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TemplateDetailsComponent_div_0_Template, 6, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.template);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1kZXRhaWxzLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWRldGFpbHMvdGVtcGxhdGUtZGV0YWlscy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAA8CA,YAAY,QAAuB,eAAe;AAChG,SAAiCC,UAAU,QAAQ,gBAAgB;AAEnE,OAAOC,IAAI,MAAM,aAAa;;;;;;;;;ICIxBC,0BAAyC;IAC/BA,YAAiB;IAAAA,iBAAS;IAACA,YACrC;IAAAA,iBAAK;;;;IADKA,eAAiB;IAAjBA,oCAAiB;IAAUA,eACrC;IADqCA,2GACrC;;;;;IALJA,2BAA+C;IACzCA,YAAmB;IAAAA,iBAAK;IAC5BA,0BAAI;IACFA,mFAEK;IACPA,iBAAK;;;;IALDA,eAAmB;IAAnBA,sCAAmB;IAECA,eAAiB;IAAjBA,2CAAiB;;;;;IAP7CA,2BAAsB;IAChBA,YAAoB;IAAAA,iBAAK;IAC7BA,yBAAG;IAAAA,YAAwB;IAAAA,iBAAI;IAE/BA,+EAOM;IACRA,iBAAM;;;;IAXAA,eAAoB;IAApBA,2CAAoB;IACrBA,eAAwB;IAAxBA,+CAAwB;IAEFA,eAAoB;IAApBA,kDAAoB;;;ADU/C,OAAM,MAAOC,wBAAwB;EAkBnCC,YAAoBC,EAAe,EAAUC,eAAgC;IAAzD,OAAE,GAAFD,EAAE;IAAuB,oBAAe,GAAfC,eAAe;IAjBnD,aAAQ,GAAa;MAC5BC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;KACX;IAES,mBAAc,GAAG,IAAIX,YAAY,EAAQ;IAOnD,uBAAkB,GAAkB,IAAI;IACxC,sBAAiB,GAAkB,IAAI;IAGrC,IAAI,CAACY,SAAS,EAAE;EAClB;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACC,QAAQ,CAACN,EAAE,EAAE;MACpB,IAAI,CAACO,kBAAkB,CAAC,IAAI,CAACD,QAAQ,CAACN,EAAE,CAAC;;EAG7C;EACAQ,WAAW,CAACC,OAAsB;IAChC,IAAIA,OAAO,CAAC,UAAU,CAAC,EAAE;MACvBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAACL,QAAQ,CAAC;;EAEnD;EAEAF,SAAS;IACP,IAAI,CAACQ,aAAa,GAAG,IAAI,CAACd,EAAE,CAACe,KAAK,CAAC;MACjCb,EAAE,EAAE,CAAC,CAAC,CAAC;MACPC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3DC,IAAI,EAAE,CAAC,CAAC,EAAEvB,UAAU,CAACqB,QAAQ,CAAC,CAAG;KAClC,CAAC;;IAEF,IAAI,CAACG,WAAW,GAAG,IAAI,CAACnB,EAAE,CAACe,KAAK,CAAC;MAC/Bb,EAAE,EAAE,CAAC,CAAC,CAAC;MACPC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3DC,IAAI,EAAE,CAAC,CAAC,EAAEvB,UAAU,CAACqB,QAAQ,CAAC;MAC9BI,UAAU,EAAE,CAAC,KAAK;KACnB,CAAC;EACJ;EAGA;EACAC,WAAW,CAACC,UAAkB,EAAEC,UAA0B,IAAI;IAC5D,IAAI,CAACC,kBAAkB,GAAGF,UAAU;IACpC,IAAI,CAACG,eAAe,CAACC,IAAI,EAAE;IAC3B,IAAI,CAACZ,aAAa,CAACa,KAAK,CAAC;MAAEzB,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEe,IAAI,EAAE;IAAE,CAAE,CAAC;IACxD,IAAIK,OAAO,EAAE;MACX,IAAI,CAACT,aAAa,CAACc,UAAU,CAACL,OAAO,CAAC;;EAE1C;EAGAd,kBAAkB,CAACP,EAAU;IAC3B,IAAI,CAACD,eAAe,CAAC4B,eAAe,CAAC3B,EAAE,CAAC4B,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC;MAC5DC,IAAI,EAAGC,YAAY,IAAI;QACrB,IAAIA,YAAY,EAAE;UAChB,IAAI,CAACzB,QAAQ,GAAGyB,YAAY;UAC5BrB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAACL,QAAQ,CAAC;SAChD,MAAM;UACL,IAAI,CAAC0B,WAAW,CAAC,oBAAoB,EAAE,OAAO,CAAC;;MAEnD,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACbxB,OAAO,CAACuB,KAAK,CAAC,0BAA0B,EAAEC,GAAG,CAAC;QAC9C,IAAI,CAACF,WAAW,CAAC,yBAAyB,EAAE,OAAO,CAAC;MACtD;KACD,CAAC;EACJ;EAEAG,WAAW;IACT,IAAI,IAAI,CAACvB,aAAa,CAACwB,OAAO,EAAE;MAC9B,OAAO,IAAI,CAACJ,WAAW,CAAC,sBAAsB,EAAE,OAAO,CAAC;;IAG1D,MAAMX,OAAO,GAAY,IAAI,CAACT,aAAa,CAACyB,KAAK;IAEjD,IAAIhB,OAAO,CAACrB,EAAE,EAAE;MACdqB,OAAO,CAACrB,EAAE,GAAGsC,MAAM,CAACjB,OAAO,CAACrB,EAAE,CAAC,CAAC,CAAE;;;IAGpC,IAAI,IAAI,CAACsB,kBAAkB,KAAK,IAAI,EAAE;MACpC,IAAI,CAACvB,eAAe,CAACwC,kBAAkB,CAAC,IAAI,CAACjB,kBAAkB,EAAED,OAAO,CAAC,CAACQ,SAAS,CAAC,MAAK;QACvF,IAAI,CAACW,cAAc,CAACC,IAAI,EAAE;QAC1B,IAAI,CAAClB,eAAe,CAACmB,KAAK,EAAE;QAC5B,IAAI,CAACV,WAAW,CAAC,4BAA4B,CAAC;MAChD,CAAC,CAAC;;EAEN;EAKAW,aAAa,CAACvB,UAAkB,EAAEwB,SAAiB;IACjD,IAAI,CAAC7C,eAAe,CAAC4C,aAAa,CAACvB,UAAU,CAACQ,QAAQ,EAAE,EAAEgB,SAAS,CAAChB,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC,MAAK;MAC7F,IAAI,CAACW,cAAc,CAACC,IAAI,EAAE;MAC1B,IAAI,CAACT,WAAW,CAAC,8BAA8B,CAAC;IAClD,CAAC,CAAC;EACJ;EAGA;EACAa,SAAS,CAACxB,OAAgB,EAAEyB,QAAsB,IAAI;IACpD,IAAI,CAACC,iBAAiB,GAAG1B,OAAO,CAACrB,EAAE;IACnC,IAAI,CAACgD,aAAa,CAACxB,IAAI,EAAE;IACzB,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MAAEzB,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEe,IAAI,EAAE,EAAE;MAAEE,UAAU,EAAE;IAAK,CAAE,CAAC;IACzE,IAAI4B,KAAK,EAAE;MACT,IAAI,CAAC7B,WAAW,CAACS,UAAU,CAACoB,KAAK,CAAC;;EAEtC;EAEAG,SAAS;IACP,IAAI,IAAI,CAAChC,WAAW,CAACmB,OAAO,EAAE,OAAO,IAAI,CAACJ,WAAW,CAAC,sBAAsB,EAAE,OAAO,CAAC;IAEtF,MAAMc,KAAK,GAAU,IAAI,CAAC7B,WAAW,CAACoB,KAAK;IAE3C,IAAI,IAAI,CAACf,kBAAkB,KAAK,IAAI,IAAI,IAAI,CAACyB,iBAAiB,KAAK,IAAI,EAAE;MACvE;MACA,IAAI,CAAChD,eAAe,CAACmD,gBAAgB,CACnC,IAAI,CAAC5B,kBAAkB,CAACM,QAAQ,EAAE;MAAE;MACpC,IAAI,CAACmB,iBAAiB,CAACnB,QAAQ,EAAE;MAAG;MACpCkB,KAAK,CACN,CAACjB,SAAS,CAAC,MAAK;QACf,IAAI,CAACW,cAAc,CAACC,IAAI,EAAE;QAC1B,IAAI,CAACO,aAAa,CAACN,KAAK,EAAE;QAC1B,IAAI,CAACV,WAAW,CAAC,0BAA0B,CAAC;MAC9C,CAAC,CAAC;;EAEN;EAGAmB,WAAW,CAAC9B,OAAgB,EAAE+B,OAAe;IAC3C,IAAI,IAAI,CAAC9B,kBAAkB,KAAK,IAAI,EAAE;MACpC,IAAI,CAACvB,eAAe,CAACoD,WAAW,CAC9B,IAAI,CAAC7B,kBAAkB,CAACM,QAAQ,EAAE;MAAG;MACrCP,OAAO,CAACrB,EAAE,CAAC4B,QAAQ,EAAE;MAAgB;MACrCwB,OAAO,CAACxB,QAAQ,EAAE,CAAmB;MAAA,CACtC,CAACC,SAAS,CAAC,MAAK;QACf,IAAI,CAACW,cAAc,CAACC,IAAI,EAAE;QAC1B,IAAI,CAACT,WAAW,CAAC,4BAA4B,CAAC;MAChD,CAAC,CAAC;;EAEN;EAGAqB,sBAAsB,CAAChC,OAAgB;IACrCA,OAAO,CAACiC,QAAQ,GAAG,CAACjC,OAAO,CAACiC,QAAQ;EACtC;EAEAtB,WAAW,CAACuB,GAAW,EAAEvC,OAA4B,SAAS;IAC5DtB,IAAI,CAAC8D,IAAI,CAAC;MACRC,IAAI,EAAEzC,IAAI;MACVf,KAAK,EAAEsD,GAAG;MACVG,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,KAAK;MACfC,iBAAiB,EAAE,KAAK;MACxBC,KAAK,EAAE;KACR,CAAC;EACJ;EAAC;qBAtKUjE,wBAAwB;EAAA;EAAA;UAAxBA,wBAAwB;IAAAkE;IAAAC;MAAA;;;;;;;;;;;;;;;;;;;;;;QCdrCpE,yEAYM;;;QAZAA,mCAAc","names":["EventEmitter","Validators","Swal","i0","TemplateDetailsComponent","constructor","fb","templateService","id","title","uniqeCode","sections","initForms","ngOnInit","template","getTemplateDetails","ngOnChanges","changes","console","log","sectionParams","group","required","minLength","type","fieldParams","isRequired","editSection","templateId","section","selectedTemplateId","addSectionModal","open","reset","patchValue","getTemplateById","toString","subscribe","next","templateData","showMessage","error","err","saveSection","invalid","value","Number","addOrUpdateSection","sectionUpdated","emit","close","deleteSection","sectionId","editField","field","selectedSectionId","addFieldModal","saveField","addOrUpdateField","deleteField","fieldId","toggleFieldsVisibility","expanded","msg","fire","icon","toast","position","showConfirmButton","timer","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.html"],"sourcesContent":["import { Component, Input, Output, ViewChild, EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html',\n  styleUrls: ['./template-details.component.css']\n})\nexport class TemplateDetailsComponent {\n  @Input() template: Template = {\n    id: 0,\n    title: '',\n    uniqeCode: '',\n    sections: []\n  };\n\n  @Output() sectionUpdated = new EventEmitter<void>();\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n  selectedSection?: Section;\n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {\n    this.initForms();\n  }\n\n  ngOnInit() {\n    if (this.template.id) {\n      this.getTemplateDetails(this.template.id);\n    }\n\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['template']) {\n      console.log('Updated template:', this.template);\n    }\n  }\n\n  initForms() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],  // Default to 0 or any valid number\n    });\n  \n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      type: [0, Validators.required],  // Default to 0 or any valid number\n      isRequired: [false],\n    });\n  }\n  \n\n  // Manage Sections\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.sectionParams.reset({ id: 0, title: '', type: '' });\n    if (section) {\n      this.sectionParams.patchValue(section);\n    }\n  }\n\n\n  getTemplateDetails(id: number) {\n    this.templateService.getTemplateById(id.toString()).subscribe({\n      next: (templateData) => {\n        if (templateData) {\n          this.template = templateData;\n          console.log('Template fetched:', this.template);\n        } else {\n          this.showMessage('Template not found', 'error');\n        }\n      },\n      error: (err) => {\n        console.error('Error fetching template:', err);\n        this.showMessage('Failed to load template', 'error');\n      }\n    });\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      return this.showMessage('Fill required fields', 'error');\n    }\n  \n    const section: Section = this.sectionParams.value;\n  \n    if (section.id) {\n      section.id = Number(section.id);  // Convert to number\n    }\n  \n    if (this.selectedTemplateId !== null) {\n      this.templateService.addOrUpdateSection(this.selectedTemplateId, section).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addSectionModal.close();\n        this.showMessage('Section saved successfully');\n      });\n    }\n  }\n  \n  \n  \n\n  deleteSection(templateId: number, sectionId: number) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      this.sectionUpdated.emit();\n      this.showMessage('Section deleted successfully');\n    });\n  }\n  \n\n  // Manage Fields\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    this.addFieldModal.open();\n    this.fieldParams.reset({ id: 0, title: '', type: '', isRequired: false });\n    if (field) {\n      this.fieldParams.patchValue(field);\n    }\n  }\n\n  saveField() {\n    if (this.fieldParams.invalid) return this.showMessage('Fill required fields', 'error');\n    \n    const field: Field = this.fieldParams.value;\n    \n    if (this.selectedTemplateId !== null && this.selectedSectionId !== null) {\n      // Convert selectedTemplateId and selectedSectionId to string\n      this.templateService.addOrUpdateField(\n        this.selectedTemplateId.toString(), // Convert to string\n        this.selectedSectionId.toString(),  // Convert to string\n        field\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.addFieldModal.close();\n        this.showMessage('Field saved successfully');\n      });\n    }\n  }\n  \n\n  deleteField(section: Section, fieldId: number) {\n    if (this.selectedTemplateId !== null) {\n      this.templateService.deleteField(\n        this.selectedTemplateId.toString(),  // Convert templateId to string\n        section.id.toString(),               // Convert sectionId to string\n        fieldId.toString()                   // Convert fieldId to string\n      ).subscribe(() => {\n        this.sectionUpdated.emit();\n        this.showMessage('Field deleted successfully');\n      });\n    }\n  }\n  \n\n  toggleFieldsVisibility(section: Section) {\n    section.expanded = !section.expanded;\n  }\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n    });\n  }\n}\n","<div *ngIf=\"template\">\n  <h3>{{ template.title }}</h3>\n  <p>{{ template.uniqeCode }}</p>\n\n  <div *ngFor=\"let section of template.sections\">\n    <h4>{{ section.title }}</h4>\n    <ul>\n      <li *ngFor=\"let field of section.fields\">\n        <strong>{{ field.title }}</strong> (Type: {{ field.type }}) - Required: {{ field.isRequired ? 'Yes' : 'No' }}\n      </li>\n    </ul>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}