{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (!this.authService.isAuthenticated()) {\n      // Redirect to login if not authenticated\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n    const requiredRole = 'Application User';\n    const userRole = this.authService.getRole();\n    if (userRole === requiredRole) {\n      return true;\n    } else {\n      // Redirect to unauthorized page or dashboard\n      this.router.navigate(['/unauthorized']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACvC;MACA,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MACrC,OAAO,KAAK;;IAGd,MAAMC,YAAY,GAAG,kBAAkB;IACvC,MAAMC,QAAQ,GAAG,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE;IAE3C,IAAID,QAAQ,KAAKD,YAAY,EAAE;MAC7B,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACN,MAAM,CAACK,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;MACvC,OAAO,KAAK;;EAEhB;EAAC;qBAvBUR,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAY,SAAVZ,UAAU;IAAAa,YAFT;EAAM","names":["AdminGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","navigate","requiredRole","userRole","getRole","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (!this.authService.isAuthenticated()) {\n      // Redirect to login if not authenticated\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n\n    const requiredRole = 'Application User';\n    const userRole = this.authService.getRole();\n\n    if (userRole === requiredRole) {\n      return true;\n    } else {\n      // Redirect to unauthorized page or dashboard\n      this.router.navigate(['/unauthorized']);\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}