{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate';\n    this.isLoggedInSubject = new BehaviorSubject(this.checkLoginStatus());\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  // auth.service.ts\n  login(credentials) {\n    return this.http.post(`${environment.apiUrl}/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('access_token', response.token);\n      // Store user role from decoded JWT\n      const decoded = this.jwtHelper.decodeToken(response.token);\n      this.currentRole = decoded.role;\n    }));\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  logout() {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n    localStorage.removeItem('userName'); // Optionally remove the username as well\n  }\n\n  checkAuthenticationState() {\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n  getUserName() {\n    return localStorage.getItem('userName'); // Adjust this based on your storage mechanism\n  }\n\n  getAuthHeaders() {\n    const token = localStorage.getItem('authToken'); // Adjust this based on how you store the token\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  }\n  setLoginStatus(isLoggedIn) {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n  checkLoginStatus() {\n    return !!localStorage.getItem('role');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;AAKvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,yCAAyC;IAClD,sBAAiB,GAAG,IAAIJ,eAAe,CAAU,IAAI,CAACK,gBAAgB,EAAE,CAAC;IACjF,gBAAW,GAAwB,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE;EAEjC;EAExC;EACDC,KAAK,CAACC,WAAgB;IACpB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAGC,WAAW,CAACC,MAAM,QAAQ,EAAEH,WAAW,CAAC,CAACI,IAAI,CACzEZ,GAAG,CAACa,QAAQ,IAAG;MACbC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,QAAQ,CAACG,KAAK,CAAC;MACpD;MACA,MAAMC,OAAO,GAAG,IAAI,CAACC,SAAS,CAACC,WAAW,CAACN,QAAQ,CAACG,KAAK,CAAC;MAC1D,IAAI,CAACI,WAAW,GAAGH,OAAO,CAACI,IAAI;IACjC,CAAC,CAAC,CACH;EACH;EAEEC,QAAQ,CAACC,IAAS;IAChB,OAAO,IAAI,CAACpB,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACE,MAAM,WAAW,EAAEY,IAAI,CAAC,CAAC,CAAC;EAC1D;;EAEAC,OAAO,CAACH,IAAY;IAClBP,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEM,IAAI,CAAC;EACpC;EAEAI,OAAO;IACL,OAAOX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;EACrC;EAEAC,MAAM;IACJb,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACC,cAAc,CAAC,KAAK,CAAC;IAC1Bf,YAAY,CAACc,UAAU,CAAC,UAAU,CAAC,CAAC,CAAE;EACxC;;EAEAE,wBAAwB;IACtB,IAAI,CAACD,cAAc,CAAC,IAAI,CAACzB,gBAAgB,EAAE,CAAC;EAC9C;EAEA2B,WAAW;IACT,OAAOjB,YAAY,CAACY,OAAO,CAAC,UAAU,CAAC,CAAC,CAAE;EAC5C;;EAEAM,cAAc;IACZ,MAAMhB,KAAK,GAAGF,YAAY,CAACY,OAAO,CAAC,WAAW,CAAC,CAAC,CAAE;IAClD,OAAOV,KAAK,GAAG;MAAEiB,aAAa,EAAE,UAAUjB,KAAK;IAAE,CAAE,GAAG,EAAE;EAC1D;EAEQa,cAAc,CAACK,UAAmB;IACxC,IAAI,CAAC7B,iBAAiB,CAAC8B,IAAI,CAACD,UAAU,CAAC;EACzC;EAEQ9B,gBAAgB;IACtB,OAAO,CAAC,CAACU,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;EACvC;EAAC;qBAxDUzB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAmC,SAAXnC,WAAW;IAAAoC,YAFV;EAAM","names":["BehaviorSubject","tap","AuthService","constructor","http","checkLoginStatus","isLoggedInSubject","asObservable","login","credentials","post","environment","apiUrl","pipe","response","localStorage","setItem","token","decoded","jwtHelper","decodeToken","currentRole","role","register","data","setRole","getRole","getItem","logout","removeItem","setLoginStatus","checkAuthenticationState","getUserName","getAuthHeaders","Authorization","isLoggedIn","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate';\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.checkLoginStatus());\n  isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n // auth.service.ts\nlogin(credentials: any) {\n  return this.http.post<any>(`${environment.apiUrl}/login`, credentials).pipe(\n    tap(response => {\n      localStorage.setItem('access_token', response.token);\n      // Store user role from decoded JWT\n      const decoded = this.jwtHelper.decodeToken(response.token);\n      this.currentRole = decoded.role; \n    })\n  );\n}\n\n  register(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n\n  logout(): void {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n    localStorage.removeItem('userName');  // Optionally remove the username as well\n  }\n\n  checkAuthenticationState() {\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n\n  getUserName(): string | null {\n    return localStorage.getItem('userName');  // Adjust this based on your storage mechanism\n  }\n\n  getAuthHeaders(): { [key: string]: string } {\n    const token = localStorage.getItem('authToken');  // Adjust this based on how you store the token\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n\n  private setLoginStatus(isLoggedIn: boolean): void {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n\n  private checkLoginStatus(): boolean {\n    return !!localStorage.getItem('role');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}