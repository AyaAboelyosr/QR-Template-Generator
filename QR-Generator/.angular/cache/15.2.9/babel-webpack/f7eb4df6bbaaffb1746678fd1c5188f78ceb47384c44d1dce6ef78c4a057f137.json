{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"angular-custom-modal\";\nconst _c0 = [\"addFieldModal\"];\nfunction TemplateItemComponent_div_1_div_6_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3, \"Type:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Required:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 18)(10, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_div_6_div_1_div_6_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const field_r9 = i0.ɵɵnextContext().$implicit;\n      const section_r6 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.editField(section_r6.id, field_r9));\n    });\n    i0.ɵɵtext(11, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_div_6_div_1_div_6_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const field_r9 = i0.ɵɵnextContext().$implicit;\n      const section_r6 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.deleteField(section_r6.id, field_r9.id));\n    });\n    i0.ɵɵtext(13, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const field_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", field_r9.type, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", field_r9.isRequired ? \"Yes\" : \"No\", \"\");\n  }\n}\nfunction TemplateItemComponent_div_1_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\", 15);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_div_6_div_1_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const field_r9 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r19.toggleField(field_r9));\n    });\n    i0.ɵɵelementStart(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, TemplateItemComponent_div_1_div_6_div_1_div_6_Template, 14, 2, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r9 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(field_r9.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r9.expanded ? \"\\u25BC\" : \"\\u25B6\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", field_r9.expanded);\n  }\n}\nfunction TemplateItemComponent_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, TemplateItemComponent_div_1_div_6_div_1_Template, 7, 3, \"div\", 13);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const section_r6 = i0.ɵɵnextContext().$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.openAddFieldModal(section_r6.id));\n    });\n    i0.ɵɵtext(3, \"Add Field\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", section_r6.fields);\n  }\n}\nfunction TemplateItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r6 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.toggleSection(section_r6));\n    });\n    i0.ɵɵelementStart(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, TemplateItemComponent_div_1_div_6_Template, 4, 1, \"div\", 9);\n    i0.ɵɵelementStart(7, \"div\", 10)(8, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r6 = restoredCtx.$implicit;\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.editSection(section_r6));\n    });\n    i0.ɵɵtext(9, \"Edit Section\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_div_1_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const section_r6 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.deleteSection(section_r6.id));\n    });\n    i0.ɵɵtext(11, \"Delete Section\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const section_r6 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r6.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(section_r6.expanded ? \"\\u25BC\" : \"\\u25B6\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", section_r6.expanded);\n  }\n}\nfunction TemplateItemComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.fieldParams.controls[\"id\"].value ? \"Edit Field\" : \"Add Field\");\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title must be at least 3 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title cannot be more than 100 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_8_div_5_div_1_Template, 2, 0, \"div\", 37);\n    i0.ɵɵtemplate(2, TemplateItemComponent_ng_template_8_div_5_div_2_Template, 2, 0, \"div\", 37);\n    i0.ɵɵtemplate(3, TemplateItemComponent_ng_template_8_div_5_div_3_Template, 2, 0, \"div\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r29.fieldParams.controls[\"title\"].errors == null ? null : ctx_r29.fieldParams.controls[\"title\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r29.fieldParams.controls[\"title\"].errors == null ? null : ctx_r29.fieldParams.controls[\"title\"].errors[\"minlength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r29.fieldParams.controls[\"title\"].errors == null ? null : ctx_r29.fieldParams.controls[\"title\"].errors[\"maxlength\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_8_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_8_div_18_div_1_Template, 2, 0, \"div\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r30 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r30.fieldParams.controls[\"type\"].errors == null ? null : ctx_r30.fieldParams.controls[\"type\"].errors[\"required\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 20);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateItemComponent_ng_template_8_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35.saveField());\n    });\n    i0.ɵɵelementStart(1, \"div\", 21)(2, \"label\", 22);\n    i0.ɵɵtext(3, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 23);\n    i0.ɵɵtemplate(5, TemplateItemComponent_ng_template_8_div_5_Template, 4, 3, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 21)(7, \"label\", 25);\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"select\", 26)(10, \"option\", 27);\n    i0.ɵɵtext(11, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"option\", 28);\n    i0.ɵɵtext(13, \"Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 29);\n    i0.ɵɵtext(15, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"option\", 30);\n    i0.ɵɵtext(17, \"Boolean\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(18, TemplateItemComponent_ng_template_8_div_18_Template, 2, 1, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 21)(20, \"label\", 31);\n    i0.ɵɵtext(21, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\", 33)(24, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_template_8_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r36);\n      i0.ɵɵnextContext();\n      const _r1 = i0.ɵɵreference(5);\n      return i0.ɵɵresetView(_r1.close());\n    });\n    i0.ɵɵtext(25, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"button\", 35);\n    i0.ɵɵtext(27, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r5.fieldParams);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.fieldParams.controls[\"title\"].invalid && ctx_r5.fieldParams.controls[\"title\"].touched);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.fieldParams.controls[\"type\"].invalid && ctx_r5.fieldParams.controls[\"type\"].touched);\n  }\n}\nexport class TemplateItemComponent {\n  constructor() {\n    this._TemplateService = inject(TemplateService);\n    this._router = inject(ActivatedRoute);\n    this._fb = inject(FormBuilder);\n    this.currentSectionId = null;\n    this.templateData = {};\n    this.displayType = 'grid';\n  }\n  ngOnInit() {\n    this.templateId = this._router.snapshot.paramMap.get('id');\n    this.getTemplatebyId();\n    this.initFieldForm();\n  }\n  initFieldForm() {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n  openAddFieldModal(sectionId) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({\n      type: 'Text',\n      isRequired: false\n    });\n    this.addFieldModal.open();\n  }\n  saveField() {\n    if (this.fieldParams.invalid) return;\n    const fieldData = this.fieldParams.value;\n    if (fieldData.id) {\n      // Edit existing field\n      this._TemplateService.updateField(this.templateId, this.currentSectionId.toString(), fieldData.id.toString(), fieldData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            const fieldIndex = section.fields.findIndex(f => f.id === fieldData.id);\n            if (fieldIndex !== -1) {\n              section.fields[fieldIndex] = res;\n            }\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error updating field:', error);\n        }\n      });\n    } else {\n      // Add new field\n      this._TemplateService.addField(this.templateId, this.currentSectionId.toString(), fieldData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            section.fields.push(res);\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error adding field:', error);\n        }\n      });\n    }\n  }\n  getTemplatebyId() {\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: res => {\n        console.log('Template id', this.templateId);\n        console.log('Result =', res);\n        this.templateData = res;\n      },\n      error: error => {\n        console.error('Error:', error);\n      }\n    });\n  }\n  toggleSection(section) {\n    section.expanded = !section.expanded;\n  }\n  toggleField(field) {\n    field.expanded = !field.expanded;\n  }\n  addSection() {\n    const newSection = {\n      title: '',\n      type: this.mapSectionType('Form'),\n      fields: [],\n      expanded: false\n    };\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  // The mapSectionType method\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0; // Default to 0 if the type is not found\n  }\n\n  editSection(section) {\n    // Logic for opening a modal to edit a section (you can implement it with a modal library)\n    // For example, if using the same modal system you had in `ListTemplateComponent`, you can call a modal for editing a section here.\n  }\n  deleteSection(sectionId) {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter(s => s.id !== sectionId);\n      },\n      error: error => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n  // field methods \n  addField(sectionId) {\n    const newField = {\n      title: '',\n      type: 'Text',\n      isRequired: false,\n      expanded: false\n    };\n    // Convert sectionId to string before passing it to the service\n    this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n      next: res => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields.push(res);\n        }\n      },\n      error: error => {\n        console.error('Error adding field:', error);\n      }\n    });\n  }\n  editField(sectionId, field) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.patchValue(field);\n    this.addFieldModal.open();\n  }\n  deleteField(sectionId, fieldId) {\n    // Convert both sectionId and fieldId to strings before passing to the service\n    this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields = section.fields.filter(f => f.id !== fieldId);\n        }\n      },\n      error: error => {\n        console.error('Error deleting field:', error);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function TemplateItemComponent_Factory(t) {\n    return new (t || TemplateItemComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateItemComponent,\n    selectors: [[\"app-template-item\"]],\n    viewQuery: function TemplateItemComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    decls: 10,\n    vars: 1,\n    consts: [[1, \"template-container\"], [\"class\", \"section\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"no-footer\"], [\"addFieldModal\", \"\"], [\"modalHeader\", \"\"], [\"modalBody\", \"\"], [1, \"section\"], [1, \"section-header\", 3, \"click\"], [\"class\", \"section-content\", 4, \"ngIf\"], [1, \"section-actions\"], [3, \"click\"], [1, \"section-content\"], [\"class\", \"field\", 4, \"ngFor\", \"ngForOf\"], [1, \"field\"], [1, \"field-header\", 3, \"click\"], [\"class\", \"field-content\", 4, \"ngIf\"], [1, \"field-content\"], [1, \"field-actions\"], [1, \"!font-medium\"], [\"ngNativeValidate\", \"\", 1, \"text-sm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-5\"], [\"for\", \"fieldTitle\"], [\"id\", \"fieldTitle\", \"type\", \"text\", \"placeholder\", \"Enter Title\", \"formControlName\", \"title\", 1, \"form-input\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [\"for\", \"fieldType\"], [\"id\", \"fieldType\", \"formControlName\", \"type\", 1, \"form-select\"], [\"value\", \"Text\"], [\"value\", \"Number\"], [\"value\", \"Date\"], [\"value\", \"Boolean\"], [\"for\", \"isRequired\"], [\"id\", \"isRequired\", \"type\", \"checkbox\", \"formControlName\", \"isRequired\"], [1, \"mt-8\", \"flex\", \"items-center\", \"justify-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ltr:ml-4\", \"rtl:ml-4\"], [1, \"text-red-500\"], [4, \"ngIf\"]],\n    template: function TemplateItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TemplateItemComponent_div_1_Template, 12, 3, \"div\", 1);\n        i0.ɵɵelementStart(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TemplateItemComponent_Template_button_click_2_listener() {\n          return ctx.addSection();\n        });\n        i0.ɵɵtext(3, \"Add Section\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"modal\", 3, 4);\n        i0.ɵɵtemplate(6, TemplateItemComponent_ng_template_6_Template, 2, 1, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(8, TemplateItemComponent_ng_template_8_Template, 28, 3, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.templateData.sections);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i3.ModalComponent, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1pdGVtLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWl0ZW0vdGVtcGxhdGUtaXRlbS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw0S0FBNEsiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAoBA,MAAM,QAA2B,eAAe;AACpE,SAASC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,cAAc,QAAgB,iBAAiB;;;;;;;;;ICqG9CC,+BAAkD;IACrCA,qBAAK;IAAAA,iBAAS;IAACA,YAAgB;IAAAA,iBAAI;IAC9CA,yBAAG;IAAQA,yBAAS;IAAAA,iBAAS;IAACA,YAAqC;IAAAA,iBAAI;IACvEA,+BAA2B;IACjBA;MAAAA;MAAA;MAAA;MAAA;MAAA,OAASA,yDAA4B;IAAA,EAAC;IAACA,qBAAI;IAAAA,iBAAS;IAC5DA,mCAAoD;IAA5CA;MAAAA;MAAA;MAAA;MAAA;MAAA,OAASA,8DAAiC;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;;;;IAJ3CA,eAAgB;IAAhBA,6CAAgB;IACZA,eAAqC;IAArCA,kEAAqC;;;;;;IATvEA,+BAAwD;IAC5BA;MAAA;MAAA;MAAA;MAAA,OAASA,4CAAkB;IAAA,EAAC;IACpDA,0BAAI;IAAAA,YAAiB;IAAAA,iBAAK;IAC1BA,4BAAM;IAAAA,YAAgC;IAAAA,iBAAO;IAI/CA,0FAOM;IACRA,iBAAM;;;;IAbEA,eAAiB;IAAjBA,oCAAiB;IACfA,eAAgC;IAAhCA,6DAAgC;IAIlCA,eAAoB;IAApBA,wCAAoB;;;;;;IAT9BA,+BAAsD;IAEpDA,mFAeM;IAGNA,iCAAwE;IAAxCA;MAAAA;MAAA;MAAA;MAAA,OAASA,uDAA6B;IAAA,EAAC;IAACA,yBAAS;IAAAA,iBAAS;;;;IAlBnEA,eAAiB;IAAjBA,2CAAiB;;;;;;IAV5CA,8BAAmE;IAErCA;MAAA;MAAA;MAAA;MAAA,OAASA,gDAAsB;IAAA,EAAC;IAC1DA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;IAC5BA,4BAAM;IAAAA,YAAkC;IAAAA,iBAAO;IAIjDA,4EAqBM;IAGNA,+BAA6B;IACnBA;MAAA;MAAA;MAAA;MAAA,OAASA,8CAAoB;IAAA,EAAC;IAACA,4BAAY;IAAAA,iBAAS;IAC5DA,mCAA4C;IAApCA;MAAA;MAAA;MAAA;MAAA,OAASA,mDAAyB;IAAA,EAAC;IAACA,+BAAc;IAAAA,iBAAS;;;;IA/B/DA,eAAmB;IAAnBA,sCAAmB;IACjBA,eAAkC;IAAlCA,+DAAkC;IAIpCA,eAAsB;IAAtBA,0CAAsB;;;;;IAqC5BA,+BAA0B;IAAAA,YAAmE;IAAAA,iBAAM;;;;IAAzEA,eAAmE;IAAnEA,0FAAmE;;;;;IAQvFA,2BAAgE;IAAAA,kCAAkB;IAAAA,iBAAM;;;;;IACxFA,2BAAiE;IAAAA,yDAAyC;IAAAA,iBAAM;;;;;IAChHA,2BAAiE;IAAAA,8DAA8C;IAAAA,iBAAM;;;;;IAHvHA,+BAAiH;IAC/GA,2FAAwF;IACxFA,2FAAgH;IAChHA,2FAAqH;IACvHA,iBAAM;;;;IAHEA,eAAwD;IAAxDA,6IAAwD;IACxDA,eAAyD;IAAzDA,8IAAyD;IACzDA,eAAyD;IAAzDA,8IAAyD;;;;;IAY/DA,2BAA+D;IAAAA,iCAAiB;IAAAA,iBAAM;;;;;IADxFA,+BAA+G;IAC7GA,4FAAsF;IACxFA,iBAAM;;;;IADEA,eAAuD;IAAvDA,2IAAuD;;;;;;IAnBnEA,gCAA0F;IAA1CA;MAAAA;MAAA;MAAA,OAAYA,kCAAW;IAAA,EAAC;IACtEA,+BAAkB;IACQA,qBAAK;IAAAA,iBAAQ;IACrCA,4BAA0G;IAC1GA,qFAIM;IACRA,iBAAM;IACNA,+BAAkB;IACOA,oBAAI;IAAAA,iBAAQ;IACnCA,kCAAkE;IAC3CA,qBAAI;IAAAA,iBAAS;IAClCA,mCAAuB;IAAAA,uBAAM;IAAAA,iBAAS;IACtCA,mCAAqB;IAAAA,qBAAI;IAAAA,iBAAS;IAClCA,mCAAwB;IAAAA,wBAAO;IAAAA,iBAAS;IAE1CA,uFAEM;IACRA,iBAAM;IACNA,gCAAkB;IACQA,yBAAQ;IAAAA,iBAAQ;IACxCA,6BAAsE;IACxEA,iBAAM;IACNA,gCAAgD;IACOA;MAAAA;MAAAA;MAAA;MAAA,OAASA,0BAAqB;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;IACpGA,mCAAgE;IAAAA,qBAAI;IAAAA,iBAAS;;;;IA5B3EA,8CAAyB;IAIrBA,eAAoF;IAApFA,mHAAoF;IAcpFA,gBAAkF;IAAlFA,iHAAkF;;;AD9IlG,OAAM,MAAOC,qBAAqB;EALlCC;IAQE,qBAAgB,GAACP,MAAM,CAACG,eAAe,CAAC;IACxC,YAAO,GAACH,MAAM,CAACI,cAAc,CAAC;IAC9B,QAAG,GAAGJ,MAAM,CAACC,WAAW,CAAC;IAEzB,qBAAgB,GAAkB,IAAI;IACtC,iBAAY,GAAQ,EAAE;IACtB,gBAAW,GAAW,MAAM;;EAE5BO,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAE;IAC3D,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,aAAa,EAAE;EACtB;EAGAA,aAAa;IACX,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,GAAG,CAACC,KAAK,CAAC;MAChCC,EAAE,EAAE,CAAC,IAAI,CAAC;MACVC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAACqB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACtFC,IAAI,EAAE,CAAC,MAAM,EAAEtB,UAAU,CAACmB,QAAQ,CAAC;MACnCI,UAAU,EAAE,CAAC,KAAK;KACnB,CAAC;EACJ;EAEAC,iBAAiB,CAACC,SAAiB;IACjC,IAAI,CAACC,gBAAgB,GAAGD,SAAS;IACjC,IAAI,CAACX,WAAW,CAACa,KAAK,CAAC;MAAEL,IAAI,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAK,CAAE,CAAC;IAC3D,IAAI,CAACK,aAAa,CAACC,IAAI,EAAE;EAC3B;EAEAC,SAAS;IACP,IAAI,IAAI,CAAChB,WAAW,CAACiB,OAAO,EAAE;IAE9B,MAAMC,SAAS,GAAG,IAAI,CAAClB,WAAW,CAACmB,KAAK;IACxC,IAAID,SAAS,CAACf,EAAE,EAAE;MAChB;MACA,IAAI,CAACiB,gBAAgB,CAACC,WAAW,CAAC,IAAI,CAAC5B,UAAU,EAAE,IAAI,CAACmB,gBAAiB,CAACU,QAAQ,EAAE,EAAEJ,SAAS,CAACf,EAAE,CAACmB,QAAQ,EAAE,EAAEJ,SAAS,CAAC,CACtHK,SAAS,CAAC;QACTC,IAAI,EAAGC,GAAG,IAAI;UACZ,MAAMC,OAAO,GAAG,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAAC3B,EAAE,KAAK,IAAI,CAACS,gBAAgB,CAAC;UAC3F,IAAIc,OAAO,EAAE;YACX,MAAMK,UAAU,GAAGL,OAAO,CAACM,MAAM,CAACC,SAAS,CAAEC,CAAM,IAAKA,CAAC,CAAC/B,EAAE,KAAKe,SAAS,CAACf,EAAE,CAAC;YAC9E,IAAI4B,UAAU,KAAK,CAAC,CAAC,EAAE;cACrBL,OAAO,CAACM,MAAM,CAACD,UAAU,CAAC,GAAGN,GAAG;;;UAGpC,IAAI,CAACX,aAAa,CAACqB,KAAK,EAAE;QAC5B,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACfC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C;OACD,CAAC;KACL,MAAM;MACL;MACA,IAAI,CAAChB,gBAAgB,CAACkB,QAAQ,CAAC,IAAI,CAAC7C,UAAU,EAAE,IAAI,CAACmB,gBAAiB,CAACU,QAAQ,EAAE,EAAEJ,SAAS,CAAC,CAC1FK,SAAS,CAAC;QACTC,IAAI,EAAGC,GAAG,IAAI;UACZ,MAAMC,OAAO,GAAG,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAAC3B,EAAE,KAAK,IAAI,CAACS,gBAAgB,CAAC;UAC3F,IAAIc,OAAO,EAAE;YACXA,OAAO,CAACM,MAAM,CAACO,IAAI,CAACd,GAAG,CAAC;;UAE1B,IAAI,CAACX,aAAa,CAACqB,KAAK,EAAE;QAC5B,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACfC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC7C;OACD,CAAC;;EAER;EAEAtC,eAAe;IACb,IAAI,CAACsB,gBAAgB,CAACoB,eAAe,CAAC,IAAI,CAAC/C,UAAU,CAAC,CAAC8B,SAAS,CAAC;MAC/DC,IAAI,EAAGC,GAAG,IAAI;QACZY,OAAO,CAACI,GAAG,CAAE,aAAa,EAAC,IAAI,CAAChD,UAAU,CAAC;QAC3C4C,OAAO,CAACI,GAAG,CAAC,UAAU,EAAEhB,GAAG,CAAC;QAC5B,IAAI,CAACE,YAAY,GAAGF,GAAG;MAEzB,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;KAGD,CAAC;EACJ;EAEAM,aAAa,CAAChB,OAAY;IACxBA,OAAO,CAACiB,QAAQ,GAAG,CAACjB,OAAO,CAACiB,QAAQ;EACtC;EAEAC,WAAW,CAACC,KAAU;IACpBA,KAAK,CAACF,QAAQ,GAAG,CAACE,KAAK,CAACF,QAAQ;EAClC;EAEAG,UAAU;IACR,MAAMC,UAAU,GAAG;MACjB3C,KAAK,EAAE,EAAE;MACTI,IAAI,EAAE,IAAI,CAACwC,cAAc,CAAC,MAAM,CAAC;MACjChB,MAAM,EAAE,EAAE;MACVW,QAAQ,EAAE;KACX;IAED,IAAI,CAACvB,gBAAgB,CAAC0B,UAAU,CAAC,IAAI,CAACrD,UAAU,EAAEsD,UAAU,CAAC,CAACxB,SAAS,CAAC;MACtEC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACE,YAAY,CAACC,QAAQ,CAACW,IAAI,CAACd,GAAG,CAAC;MACtC,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;KACD,CAAC;EACJ;EAEA;EACQY,cAAc,CAACxC,IAAS;IAC9B,MAAMyC,cAAc,GAA8B;MAChD,MAAM,EAAE,CAAC;MACT,OAAO,EAAE;KACV;IACD,OAAOA,cAAc,CAACzC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACpC;;EAEA0C,WAAW,CAACxB,OAAY;IACtB;IACA;EAAA;EAGFyB,aAAa,CAACxC,SAAiB;IAC7B,IAAI,CAACS,gBAAgB,CAAC+B,aAAa,CAAC,IAAI,CAAC1D,UAAU,EAAEkB,SAAS,CAACW,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC;MACnFC,IAAI,EAAE,MAAK;QACT,IAAI,CAACG,YAAY,CAACC,QAAQ,GAAG,IAAI,CAACD,YAAY,CAACC,QAAQ,CAACwB,MAAM,CAAEtB,CAAM,IAAKA,CAAC,CAAC3B,EAAE,KAAKQ,SAAS,CAAC;MAChG,CAAC;MACDyB,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;KACD,CAAC;EACJ;EACF;EAEAE,QAAQ,CAAC3B,SAAiB;IACxB,MAAM0C,QAAQ,GAAG;MACfjD,KAAK,EAAE,EAAE;MACTI,IAAI,EAAE,MAAM;MACZC,UAAU,EAAE,KAAK;MACjBkC,QAAQ,EAAE;KACX;IAED;IACA,IAAI,CAACvB,gBAAgB,CAACkB,QAAQ,CAAC,IAAI,CAAC7C,UAAU,EAAEkB,SAAS,CAACW,QAAQ,EAAE,EAAE+B,QAAQ,CAAC,CAAC9B,SAAS,CAAC;MACxFC,IAAI,EAAGC,GAAG,IAAI;QACZ,MAAMC,OAAO,GAAG,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAAC3B,EAAE,KAAKQ,SAAS,CAAC;QAC/E,IAAIe,OAAO,EAAE;UACXA,OAAO,CAACM,MAAM,CAACO,IAAI,CAACd,GAAG,CAAC;;MAE5B,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;KACD,CAAC;EACJ;EAEAkB,SAAS,CAAC3C,SAAiB,EAAEkC,KAAU;IACrC,IAAI,CAACjC,gBAAgB,GAAGD,SAAS;IACjC,IAAI,CAACX,WAAW,CAACuD,UAAU,CAACV,KAAK,CAAC;IAClC,IAAI,CAAC/B,aAAa,CAACC,IAAI,EAAE;EAC3B;EAEAyC,WAAW,CAAC7C,SAAiB,EAAE8C,OAAe;IAC5C;IACA,IAAI,CAACrC,gBAAgB,CAACoC,WAAW,CAAC,IAAI,CAAC/D,UAAU,EAAEkB,SAAS,CAACW,QAAQ,EAAE,EAAEmC,OAAO,CAACnC,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC;MACrGC,IAAI,EAAE,MAAK;QACT,MAAME,OAAO,GAAG,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACC,IAAI,CAAEC,CAAM,IAAKA,CAAC,CAAC3B,EAAE,KAAKQ,SAAS,CAAC;QAC/E,IAAIe,OAAO,EAAE;UACXA,OAAO,CAACM,MAAM,GAAGN,OAAO,CAACM,MAAM,CAACoB,MAAM,CAAElB,CAAM,IAAKA,CAAC,CAAC/B,EAAE,KAAKsD,OAAO,CAAC;;MAExE,CAAC;MACDrB,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;KACD,CAAC;EACJ;EAAC;qBAtLY9C,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAAoE;IAAAC;MAAA;;;;;;;;;;;;;QC0E/BtE,8BAAgC;QAE/BA,uEAoCM;QAGNA,iCAAuD;QAAvBA;UAAA,OAASuE,gBAAY;QAAA,EAAC;QAACvE,2BAAW;QAAAA,iBAAS;QAI7EA,mCAAwC;QACtCA,uHAEc;QACdA,wHAgCc;QAChBA,iBAAQ;;;QAhFmBA,eAAwB;QAAxBA,mDAAwB","names":["inject","FormBuilder","Validators","TemplateService","ActivatedRoute","i0","TemplateItemComponent","constructor","ngOnInit","templateId","_router","snapshot","paramMap","get","getTemplatebyId","initFieldForm","fieldParams","_fb","group","id","title","required","minLength","maxLength","type","isRequired","openAddFieldModal","sectionId","currentSectionId","reset","addFieldModal","open","saveField","invalid","fieldData","value","_TemplateService","updateField","toString","subscribe","next","res","section","templateData","sections","find","s","fieldIndex","fields","findIndex","f","close","error","console","addField","push","getTemplateById","log","toggleSection","expanded","toggleField","field","addSection","newSection","mapSectionType","sectionTypeMap","editSection","deleteSection","filter","newField","editField","patchValue","deleteField","fieldId","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.html"],"sourcesContent":["import { Component, inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})\nexport class TemplateItemComponent implements OnInit {\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  _TemplateService=inject(TemplateService);\n  _router=inject(ActivatedRoute);\n  _fb = inject(FormBuilder);\n  fieldParams!: FormGroup;\n  currentSectionId: number | null = null;\n  templateData: any = {};\n  displayType: string = 'grid'; \n  templateId!: string;\n  ngOnInit(): void {\n    this.templateId = this._router.snapshot.paramMap.get('id')!; \n    this.getTemplatebyId();\n    this.initFieldForm();\n  }\n\n\n  initFieldForm(): void {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n\n  openAddFieldModal(sectionId: number): void {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({ type: 'Text', isRequired: false });\n    this.addFieldModal.open();\n  }\n\n  saveField(): void {\n    if (this.fieldParams.invalid) return;\n\n    const fieldData = this.fieldParams.value;\n    if (fieldData.id) {\n      // Edit existing field\n      this._TemplateService.updateField(this.templateId, this.currentSectionId!.toString(), fieldData.id.toString(), fieldData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              const fieldIndex = section.fields.findIndex((f: any) => f.id === fieldData.id);\n              if (fieldIndex !== -1) {\n                section.fields[fieldIndex] = res;\n              }\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating field:', error);\n          }\n        });\n    } else {\n      // Add new field\n      this._TemplateService.addField(this.templateId, this.currentSectionId!.toString(), fieldData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              section.fields.push(res);\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding field:', error);\n          }\n        });\n    }\n  }\n\n  getTemplatebyId(){\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: (res) => {\n        console.log( 'Template id',this.templateId);\n        console.log('Result =' ,res);\n        this.templateData = res;\n       \n      },\n      error: (error) => {\n        console.error('Error:', error);\n      }\n\n\n    })\n  }\n  \n  toggleSection(section: any): void {\n    section.expanded = !section.expanded;\n  }\n\n  toggleField(field: any): void {\n    field.expanded = !field.expanded;\n  }\n\n  addSection(): void {\n    const newSection = {\n      title: '',\n      type: this.mapSectionType('Form'), // Default type 'Form'\n      fields: [],\n      expanded: false\n    };\n\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  \n  // The mapSectionType method\n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; // Default to 0 if the type is not found\n  }\n\n  editSection(section: any): void {\n    // Logic for opening a modal to edit a section (you can implement it with a modal library)\n    // For example, if using the same modal system you had in `ListTemplateComponent`, you can call a modal for editing a section here.\n  }\n\n  deleteSection(sectionId: number): void {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter((s: any) => s.id !== sectionId);\n      },\n      error: (error) => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n// field methods \n\naddField(sectionId: number): void {\n  const newField = {\n    title: '',\n    type: 'Text', // Default type 'Text'\n    isRequired: false,\n    expanded: false\n  };\n\n  // Convert sectionId to string before passing it to the service\n  this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n    next: (res) => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields.push(res);\n      }\n    },\n    error: (error) => {\n      console.error('Error adding field:', error);\n    }\n  });\n}\n\neditField(sectionId: number, field: any): void {\n  this.currentSectionId = sectionId;\n  this.fieldParams.patchValue(field);\n  this.addFieldModal.open();\n}\n\ndeleteField(sectionId: number, fieldId: number): void {\n  // Convert both sectionId and fieldId to strings before passing to the service\n  this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n    next: () => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields = section.fields.filter((f: any) => f.id !== fieldId);\n      }\n    },\n    error: (error) => {\n      console.error('Error deleting field:', error);\n    }\n  });\n}\n\n\n  \n\n\n\n\n}\n","<!-- <div class=\"template-details-container\">\n    <h2>Template: {{ template.title }}</h2>\n  \n    \n    <div class=\"section-list\">\n      <h3>Sections</h3>\n      <button class=\"btn btn-primary\" (click)=\"editSection(template.id)\">Add Section</button>\n  \n      <div *ngFor=\"let section of template.sections\">\n        <div class=\"section-item\">\n          <h4>{{ section.title }}</h4>\n          <button class=\"btn btn-secondary\" (click)=\"editSection(template.id, section)\">Edit</button>\n          <button class=\"btn btn-danger\" (click)=\"deleteSection(template.id, section.id)\">Delete</button>\n          <button class=\"btn btn-info\" (click)=\"toggleFieldsVisibility(section)\">\n            {{ section.expanded ? 'Hide' : 'Show' }} Fields\n          </button>\n  \n          \n          <div *ngIf=\"section.expanded\">\n            <div *ngFor=\"let field of section.fields\">\n              <div class=\"field-item\">\n                <span>{{ field.title }} ({{ field.type }})</span>\n                <button class=\"btn btn-secondary\" (click)=\"editField(section, field)\">Edit</button>\n                <button class=\"btn btn-danger\" (click)=\"deleteField(section, field.id)\">Delete</button>\n              </div>\n            </div>\n            <button class=\"btn btn-primary\" (click)=\"editField(section)\">Add Field</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n\n    <modal #addSectionModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ sectionParams.value.id ? 'Edit' : 'Add' }} Section</h4>\n          <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Section Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Section Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Form</option> \n                <option value=\"2\">Table</option> \n              </select>\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"sectionParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  \n   \n    <modal #addFieldModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ fieldParams.value.id ? 'Edit' : 'Add' }} Field</h4>\n          <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Field Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Field Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Text</option> \n                <option value=\"2\">Number</option> \n                <option value=\"3\">Date</option> \n                <option value=\"4\">Boolean</option> \n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"isRequired\">Required</label>\n              <input type=\"checkbox\" formControlName=\"isRequired\" class=\"form-check-input\" id=\"isRequired\" />\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"fieldParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  </div>\n   -->\n\n   <div class=\"template-container\">\n    <!-- Display Sections -->\n    <div *ngFor=\"let section of templateData.sections\" class=\"section\">\n      <!-- Section Header -->\n      <div class=\"section-header\" (click)=\"toggleSection(section)\">\n        <h3>{{ section.title }}</h3>\n        <span>{{ section.expanded ? '▼' : '▶' }}</span>\n      </div>\n  \n      <!-- Section Content (Fields) -->\n      <div *ngIf=\"section.expanded\" class=\"section-content\">\n        <!-- Display Fields -->\n        <div *ngFor=\"let field of section.fields\" class=\"field\">\n          <div class=\"field-header\" (click)=\"toggleField(field)\">\n            <h4>{{ field.title }}</h4>\n            <span>{{ field.expanded ? '▼' : '▶' }}</span>\n          </div>\n  \n          <!-- Field Details -->\n          <div *ngIf=\"field.expanded\" class=\"field-content\">\n            <p><strong>Type:</strong> {{ field.type }}</p>\n            <p><strong>Required:</strong> {{ field.isRequired ? 'Yes' : 'No' }}</p>\n            <div class=\"field-actions\">\n              <button (click)=\"editField(section.id, field)\">Edit</button>\n              <button (click)=\"deleteField(section.id, field.id)\">Delete</button>\n            </div>\n          </div>\n        </div>\n  \n        <!-- Add Field Button -->\n        <button class=\"btn btn-primary\" (click)=\"openAddFieldModal(section.id)\">Add Field</button>\n      </div>\n  \n      <!-- Section Actions -->\n      <div class=\"section-actions\">\n        <button (click)=\"editSection(section)\">Edit Section</button>\n        <button (click)=\"deleteSection(section.id)\">Delete Section</button>\n      </div>\n    </div>\n  \n    <!-- Add Section Button -->\n    <button class=\"btn btn-primary\" (click)=\"addSection()\">Add Section</button>\n  </div>\n  \n  <!-- Add/Edit Field Modal -->\n  <modal #addFieldModal class=\"no-footer\">\n    <ng-template #modalHeader>\n      <div class=\"!font-medium\">{{ fieldParams.controls['id'].value ? 'Edit Field' : 'Add Field' }}</div>\n    </ng-template>\n    <ng-template #modalBody>\n      <form [formGroup]=\"fieldParams\" class=\"text-sm\" (ngSubmit)=\"saveField()\" ngNativeValidate>\n        <div class=\"mb-5\">\n          <label for=\"fieldTitle\">Title</label>\n          <input id=\"fieldTitle\" type=\"text\" placeholder=\"Enter Title\" class=\"form-input\" formControlName=\"title\" />\n          <div *ngIf=\"fieldParams.controls['title'].invalid && fieldParams.controls['title'].touched\" class=\"text-red-500\">\n            <div *ngIf=\"fieldParams.controls['title'].errors?.['required']\">Title is required.</div>\n            <div *ngIf=\"fieldParams.controls['title'].errors?.['minlength']\">Title must be at least 3 characters long.</div>\n            <div *ngIf=\"fieldParams.controls['title'].errors?.['maxlength']\">Title cannot be more than 100 characters long.</div>\n          </div>\n        </div>\n        <div class=\"mb-5\">\n          <label for=\"fieldType\">Type</label>\n          <select id=\"fieldType\" class=\"form-select\" formControlName=\"type\">\n            <option value=\"Text\">Text</option>\n            <option value=\"Number\">Number</option>\n            <option value=\"Date\">Date</option>\n            <option value=\"Boolean\">Boolean</option>\n          </select>\n          <div *ngIf=\"fieldParams.controls['type'].invalid && fieldParams.controls['type'].touched\" class=\"text-red-500\">\n            <div *ngIf=\"fieldParams.controls['type'].errors?.['required']\">Type is required.</div>\n          </div>\n        </div>\n        <div class=\"mb-5\">\n          <label for=\"isRequired\">Required</label>\n          <input id=\"isRequired\" type=\"checkbox\" formControlName=\"isRequired\" />\n        </div>\n        <div class=\"mt-8 flex items-center justify-end\">\n          <button type=\"button\" class=\"btn btn-outline-danger\" (click)=\"addFieldModal.close()\">Cancel</button>\n          <button type=\"submit\" class=\"btn btn-primary ltr:ml-4 rtl:ml-4\">Save</button>\n        </div>\n      </form>\n    </ng-template>\n  </modal>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}