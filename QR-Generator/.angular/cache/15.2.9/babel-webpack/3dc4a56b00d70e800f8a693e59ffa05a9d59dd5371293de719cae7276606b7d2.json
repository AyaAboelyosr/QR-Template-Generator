{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Electronica Care/Downloads/QRCodeGenerator-main/QR-Generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/template-service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../services/form.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../section/section.component\";\nfunction DynamicFormComponent_ng_container_1_app_section_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-section\", 10);\n  }\n  if (rf & 2) {\n    const section_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"section\", section_r4)(\"parentForm\", ctx_r2.form)(\"existingData\", ctx_r2.getExistingDataForSection(section_r4.id));\n  }\n}\nfunction DynamicFormComponent_ng_container_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Please fill all required fields\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DynamicFormComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DynamicFormComponent_ng_container_1_app_section_1_Template, 1, 3, \"app-section\", 7);\n    i0.ɵɵelementStart(2, \"div\", 8);\n    i0.ɵɵtemplate(3, DynamicFormComponent_ng_container_1_span_3_Template, 2, 0, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.template.sections);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showError);\n  }\n}\nfunction DynamicFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13)(2, \"div\", 14)(3, \"p\", 15);\n    i0.ɵɵtext(4, \" Form submitted successfully! \");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nexport class DynamicFormComponent {\n  constructor(router, templateService, fb, formService) {\n    this.router = router;\n    this.templateService = templateService;\n    this.fb = fb;\n    this.formService = formService;\n    this.template = null;\n    this.templateId = null;\n    this.isEditMode = false;\n    this.recordId = null;\n    this.isSubmitModalOpen = false;\n    this.showError = false;\n    this.form = this.fb.group({});\n  }\n  ngOnInit() {\n    const state = history.state;\n    this.templateId = state.id || null;\n    this.recordId = state.recordId;\n    // Get edit mode state\n    const editModeState = this.formService.getEditMode();\n    // Handle different scenarios\n    if (state.fromPreview) {\n      // Coming back from preview\n      this.template = this.formService.getTemplate();\n      if (this.template) {\n        this.initializeFormStructure(this.template);\n        const savedFormData = this.formService.getFormData();\n        if (savedFormData) {\n          // Ensure we have the template before populating data\n          setTimeout(() => {\n            this.populateFormWithExistingData(savedFormData);\n          });\n        }\n      }\n    } else if (state.isEditMode) {\n      // Normal edit mode\n      this.template = this.formService.getTemplate();\n      if (this.template) {\n        this.initializeFormStructure(this.template);\n        const savedFormData = this.formService.getFormData();\n        if (savedFormData) {\n          // Ensure we have the template before populating data\n          setTimeout(() => {\n            this.populateFormWithExistingData(savedFormData);\n          });\n        }\n      }\n    } else if (this.templateId) {\n      // Creating new form\n      this.fetchTemplateStructure(this.templateId);\n    }\n  }\n  //\n  getExistingDataForSection(sectionId) {\n    return this.existingData?.sections.find(section => section.sectionId === sectionId);\n  }\n  fetchTemplateStructure(templateId) {\n    return new Promise(resolve => {\n      this.templateService.getTemplateById(templateId).subscribe({\n        next: template => {\n          this.template = template;\n          this.initializeFormStructure(template);\n          // populate form with existing data\n          if (this.existingData) {\n            this.populateFormWithExistingData(this.existingData);\n          }\n          resolve();\n        },\n        error: error => {\n          console.error('Failed to fetch template:', error);\n          this.router.navigate(['qrgenerator']);\n        }\n      });\n    });\n  }\n  //\n  populateFormWithExistingData(existingData) {\n    if (!existingData || !existingData.sections || !this.template) {\n      console.error('Missing data for form population');\n      return;\n    }\n    // Map template sections to existingData sections by title\n    this.template.sections.forEach(templateSection => {\n      const sectionData = existingData.sections.find(s => s.sectionTitle === templateSection.sectionTitle);\n      if (!sectionData) {\n        console.warn(`No data found for section: ${templateSection.sectionTitle}`);\n        return;\n      }\n      if (templateSection.sectionType === 0) {\n        // Form section\n        const sectionGroup = this.form.get(`section_${templateSection.id}`);\n        if (sectionGroup && sectionData.values) {\n          sectionGroup.patchValue(sectionData.values);\n        }\n      } else if (templateSection.sectionType === 1) {\n        // Table section\n        const tableFormArray = this.form.get(`table_${templateSection.id}`);\n        if (tableFormArray && sectionData.rows) {\n          // Clear existing rows\n          while (tableFormArray.length > 0) {\n            tableFormArray.removeAt(0);\n          }\n          // Add new rows\n          sectionData.rows.forEach(row => {\n            const rowGroup = this.fb.group({});\n            Object.keys(row).forEach(fieldId => {\n              if (fieldId !== 'rowIndex') {\n                rowGroup.addControl(fieldId, this.fb.control(row[fieldId]));\n              }\n            });\n            if (row.rowIndex) {\n              rowGroup.addControl('rowIndex', this.fb.control(row.rowIndex));\n            }\n            tableFormArray.push(rowGroup);\n          });\n        }\n      }\n    });\n  }\n  initializeFormStructure(template) {\n    if (!template) {\n      console.error('No template provided for form initialization');\n      return;\n    }\n    const formStructure = this.fb.group({});\n    template.sections.forEach(section => {\n      if (section.sectionType === 0) {\n        // Form section\n        const sectionGroup = this.fb.group({});\n        section.fields.forEach(field => {\n          const validators = this.getValidators(field);\n          sectionGroup.addControl(field.id.toString(), this.fb.control('', validators));\n        });\n        formStructure.addControl(`section_${section.id}`, sectionGroup);\n      } else if (section.sectionType === 1) {\n        // Table section\n        formStructure.addControl(`table_${section.id}`, this.fb.array([]));\n      }\n    });\n    this.form = formStructure;\n    this.formService.setFormGroup(this.form);\n  }\n  getValidators(field) {\n    const validators = [];\n    if (field.isRequired) validators.push(Validators.required);\n    if (field.fieldType === 1) validators.push(Validators.pattern(/^-?\\d+$/));\n    return validators;\n  }\n  onPreview() {\n    if (!this.template) {\n      console.error('Template is not available');\n      return;\n    }\n    const formattedData = {\n      sections: this.template.sections.map(section => ({\n        sectionTitle: section.sectionTitle,\n        sectionDescription: section.sectionDescription,\n        isTableSection: section.sectionType === 1,\n        fields: section.fields,\n        values: section.sectionType === 0 ? this.form.get(`section_${section.id}`)?.value : undefined,\n        rows: section.sectionType === 1 ? this.form.get(`table_${section.id}`)?.value : undefined\n      }))\n    };\n    this.formService.setFormGroup(this.form);\n    this.formService.setTemplate(this.template);\n    this.formService.setFormData(formattedData);\n    // Add templateId to the navigation state for new forms\n    this.router.navigate(['/preview'], {\n      state: {\n        recordId: this.recordId,\n        isEditMode: this.isEditMode,\n        templateId: this.template.id,\n        isNewForm: true // flag to indicate new form\n      }\n    });\n  }\n\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.form.valid || !_this.template) {\n        _this.showError = true;\n        return;\n      }\n      let success = false;\n      const editModeState = _this.formService.getEditMode();\n      try {\n        if (editModeState.isEditMode && _this.recordId) {\n          success = yield _this.formService.updateFormData(_this.recordId, _this.form, _this.template);\n        } else {\n          success = yield _this.formService.saveFormData(_this.form, _this.template);\n        }\n        if (success) {\n          _this.showError = false;\n          _this.formService.clearEditMode();\n          yield _this.showSubmitModal();\n          _this.router.navigate(['qrgenerator']);\n        } else {\n          _this.showError = true;\n        }\n      } catch (error) {\n        console.error('Error submitting form:', error);\n        _this.showError = true;\n      }\n    })();\n  }\n  showSubmitModal() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.isSubmitModalOpen = true;\n      setTimeout(() => {\n        _this2.isSubmitModalOpen = false;\n      }, 2000);\n    })();\n  }\n  onShowAllTransactions() {\n    this.router.navigate(['qrgenerator']);\n  }\n  static #_ = this.ɵfac = function DynamicFormComponent_Factory(t) {\n    return new (t || DynamicFormComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.TemplateService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.FormService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DynamicFormComponent,\n    selectors: [[\"app-dynamic-form\"]],\n    decls: 11,\n    vars: 3,\n    consts: [[1, \"p-6\", \"space-y-6\", \"bg-white\", \"dark:bg-[#1b2e4b]\", 3, \"formGroup\", \"ngSubmit\"], [4, \"ngIf\"], [1, \"flex\", \"justify-between\", \"items-center\", \"w-full\"], [\"type\", \"button\", 1, \"px-4\", \"py-2\", \"bg-blue-600\", \"text-white\", \"rounded-md\", \"hover:bg-blue-700\", 3, \"click\"], [1, \"flex\", \"space-x-4\"], [\"type\", \"submit\", 1, \"px-4\", \"py-2\", \"bg-green-600\", \"text-white\", \"rounded-md\", \"hover:bg-green-700\"], [\"class\", \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\", 4, \"ngIf\"], [3, \"section\", \"parentForm\", \"existingData\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-3\"], [\"class\", \"text-red-500 text-sm block\", 4, \"ngIf\"], [3, \"section\", \"parentForm\", \"existingData\"], [1, \"text-red-500\", \"text-sm\", \"block\"], [1, \"fixed\", \"inset-0\", \"bg-black\", \"bg-opacity-50\", \"flex\", \"items-center\", \"justify-center\", \"z-50\"], [1, \"bg-white\", \"dark:bg-[#1b2e4b]\", \"rounded-lg\", \"shadow-lg\", \"w-full\", \"max-w-md\", \"p-6\"], [1, \"my-4\"], [1, \"text-gray-600\", \"dark:text-gray-400\", \"text-center\"]],\n    template: function DynamicFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function DynamicFormComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtemplate(1, DynamicFormComponent_ng_container_1_Template, 4, 2, \"ng-container\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function DynamicFormComponent_Template_button_click_3_listener() {\n          return ctx.onShowAllTransactions();\n        });\n        i0.ɵɵtext(4, \" Show all transactions \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function DynamicFormComponent_Template_button_click_6_listener() {\n          return ctx.onPreview();\n        });\n        i0.ɵɵtext(7, \" Preview \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵtext(9, \" Save \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(10, DynamicFormComponent_div_10_Template, 5, 0, \"div\", 6);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.template);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.isSubmitModalOpen);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i6.SectionComponent],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkeW5hbWljLWZvcm0uY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJnZW5lcmF0b3IvQ29tcG9uZW50cy9keW5hbWljLWZvcm0vZHluYW1pYy1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHdLQUF3SyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","DynamicFormComponent","constructor","router","templateService","fb","formService","form","group","ngOnInit","state","history","templateId","id","recordId","editModeState","getEditMode","fromPreview","template","getTemplate","initializeFormStructure","savedFormData","getFormData","setTimeout","populateFormWithExistingData","isEditMode","fetchTemplateStructure","getExistingDataForSection","sectionId","existingData","sections","find","section","Promise","resolve","getTemplateById","subscribe","next","error","console","navigate","forEach","templateSection","sectionData","s","sectionTitle","warn","sectionType","sectionGroup","get","values","patchValue","tableFormArray","rows","length","removeAt","row","rowGroup","Object","keys","fieldId","addControl","control","rowIndex","push","formStructure","fields","field","validators","getValidators","toString","array","setFormGroup","isRequired","required","fieldType","pattern","onPreview","formattedData","map","sectionDescription","isTableSection","value","undefined","setTemplate","setFormData","isNewForm","onSubmit","valid","showError","success","updateFormData","saveFormData","clearEditMode","showSubmitModal","isSubmitModalOpen","onShowAllTransactions","selectors","decls","vars","consts","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\Components\\dynamic-form\\dynamic-form.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\Components\\dynamic-form\\dynamic-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router ,RouterLink} from '@angular/router';\nimport { FormBuilder, FormGroup, FormArray, ValidatorFn, Validators } from '@angular/forms';\nimport { TemplateService } from '../../services/template-service';\nimport { QRTemplate } from '../../viewmodels/qrtemplate';\nimport { QRTemplateSectionField } from '../../viewmodels/qrtemplate-section-field';\nimport { FormService } from '../../services/form.service';\nimport { RecordPreviewSection } from '../../viewmodels/record-preview-section';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.css']\n})\nexport class DynamicFormComponent implements OnInit {\n\n  template: QRTemplate | null = null;\n  form: FormGroup;\n  formdata:any;\n  templateId: number | null = null;\n  isEditMode: boolean = false;\n  recordId: number | null = null;\n  existingData?: { sections: RecordPreviewSection[] };\n  isSubmitModalOpen: boolean = false;\n  showError: boolean = false;\n  constructor(\n    private router: Router,\n    private templateService: TemplateService,\n    private fb: FormBuilder,\n    private formService: FormService\n  ) {\n    this.form = this.fb.group({});\n  }\n\n  ngOnInit(): void {\n  const state = history.state;\n \n  \n  this.templateId = state.id || null;\n  this.recordId = state.recordId;\n  \n  // Get edit mode state\n  const editModeState = this.formService.getEditMode();\n \n  \n  // Handle different scenarios\n  if (state.fromPreview) {\n    // Coming back from preview\n    this.template = this.formService.getTemplate();\n    if (this.template) {\n      this.initializeFormStructure(this.template);\n      const savedFormData = this.formService.getFormData();\n      if (savedFormData) {\n        // Ensure we have the template before populating data\n        setTimeout(() => {\n          this.populateFormWithExistingData(savedFormData);\n        });\n      }\n    }\n  } else if (state.isEditMode) {\n    // Normal edit mode\n    this.template = this.formService.getTemplate();\n    if (this.template) {\n      this.initializeFormStructure(this.template);\n      const savedFormData = this.formService.getFormData();\n      if (savedFormData) {\n        // Ensure we have the template before populating data\n        setTimeout(() => {\n          this.populateFormWithExistingData(savedFormData);\n        });\n      }\n    }\n  } else if (this.templateId) {\n    // Creating new form\n    this.fetchTemplateStructure(this.templateId);\n  }\n  }\n//\ngetExistingDataForSection(sectionId: number): RecordPreviewSection | undefined {\n  return this.existingData?.sections.find(section => section.sectionId === sectionId);\n} \nprivate fetchTemplateStructure(templateId: number): Promise<void> {\n    return new Promise((resolve) => {\n      this.templateService.getTemplateById(templateId).subscribe({\n        next: (template) => {\n          this.template = template;\n          this.initializeFormStructure(template);\n          \n          // populate form with existing data\n          if (this.existingData) {\n            this.populateFormWithExistingData(this.existingData);\n          }\n          \n          resolve();\n        },\n        error: (error) => {\n          console.error('Failed to fetch template:', error);\n          this.router.navigate(['qrgenerator']);\n        }\n      });\n    });\n  }\n//\nprivate populateFormWithExistingData(existingData: { sections: any[] }): void {\n  \n  \n  \n  if (!existingData || !existingData.sections || !this.template) {\n    console.error('Missing data for form population');\n    return;\n  }\n\n  // Map template sections to existingData sections by title\n  this.template.sections.forEach(templateSection => {\n    const sectionData = existingData.sections.find(\n      s => s.sectionTitle === templateSection.sectionTitle\n    );\n\n    if (!sectionData) {\n      console.warn(`No data found for section: ${templateSection.sectionTitle}`);\n      return;\n    }\n\n    if (templateSection.sectionType === 0) { // Form section\n      const sectionGroup = this.form.get(`section_${templateSection.id}`);\n      if (sectionGroup && sectionData.values) {\n       \n        sectionGroup.patchValue(sectionData.values);\n      }\n    } else if (templateSection.sectionType === 1) { // Table section\n      const tableFormArray = this.form.get(`table_${templateSection.id}`) as FormArray;\n      if (tableFormArray && sectionData.rows) {\n        // Clear existing rows\n        while (tableFormArray.length > 0) {\n          tableFormArray.removeAt(0);\n        }\n\n        // Add new rows\n        sectionData.rows.forEach((row: any) => {\n          const rowGroup = this.fb.group({});\n          Object.keys(row).forEach(fieldId => {\n            if (fieldId !== 'rowIndex') {\n              rowGroup.addControl(fieldId, this.fb.control(row[fieldId]));\n            }\n          });\n          if (row.rowIndex) {\n            rowGroup.addControl('rowIndex', this.fb.control(row.rowIndex));\n          }\n          tableFormArray.push(rowGroup);\n        });\n      }\n    }\n  });\n\n}\nprivate initializeFormStructure(template: QRTemplate): void {\n  \n    if (!template) {\n      console.error('No template provided for form initialization');\n      return;\n    }\n  \n    const formStructure = this.fb.group({});\n  \n    template.sections.forEach(section => {\n      if (section.sectionType === 0) { // Form section\n        const sectionGroup = this.fb.group({});\n        section.fields.forEach(field => {\n          const validators = this.getValidators(field);\n          sectionGroup.addControl(\n            field.id.toString(),\n            this.fb.control('', validators)\n          );\n        });\n        formStructure.addControl(`section_${section.id}`, sectionGroup);\n      } else if (section.sectionType === 1) { // Table section\n        formStructure.addControl(\n          `table_${section.id}`,\n          this.fb.array([])\n        );\n      }\n    });\n  \n    this.form = formStructure;\n    this.formService.setFormGroup(this.form);\n    \n  }\n\n\nprivate getValidators(field: QRTemplateSectionField): ValidatorFn[] {\n    const validators: ValidatorFn[] = [];\n    if (field.isRequired) validators.push(Validators.required);\n    if (field.fieldType === 1) validators.push(Validators.pattern(/^-?\\d+$/));\n    return validators;\n  }\n  onPreview() {\n    if (!this.template) {\n      console.error('Template is not available');\n      return;\n    }\n  \n    const formattedData = {\n      sections: this.template.sections.map(section => ({\n        sectionTitle: section.sectionTitle,\n        sectionDescription: section.sectionDescription,\n        isTableSection: section.sectionType === 1,\n        fields: section.fields,\n        values: section.sectionType === 0 ? \n          this.form.get(`section_${section.id}`)?.value : undefined,\n        rows: section.sectionType === 1 ? \n          (this.form.get(`table_${section.id}`) as FormArray)?.value : undefined\n      }))\n    };\n    \n    this.formService.setFormGroup(this.form);\n    this.formService.setTemplate(this.template);\n    this.formService.setFormData(formattedData);\n    \n    // Add templateId to the navigation state for new forms\n    this.router.navigate(['/preview'], {\n      state: {\n        recordId: this.recordId,\n        isEditMode: this.isEditMode,\n        templateId: this.template.id,  \n        isNewForm: true  // flag to indicate new form\n      }\n    });\n  }\n\n\n async onSubmit(): Promise<void> {\n  if (!this.form.valid || !this.template) {\n    this.showError = true;\n    return;\n  }\n\n  let success = false;\n  const editModeState = this.formService.getEditMode();\n  \n  try {\n    if (editModeState.isEditMode && this.recordId) {\n    \n      success = await this.formService.updateFormData(this.recordId, this.form, this.template);\n    } else {\n      \n      success = await this.formService.saveFormData(this.form, this.template);\n    }\n    \n    if (success) {\n      this.showError = false;\n      this.formService.clearEditMode(); \n      await this.showSubmitModal();\n      this.router.navigate(['qrgenerator']);\n    } else {\n      this.showError = true;\n    }\n  } catch (error) {\n    console.error('Error submitting form:', error);\n    this.showError = true;\n  }\n  }\n\n\n\nasync showSubmitModal() {\n    this.isSubmitModalOpen = true;\n\n    \n    setTimeout(() => {\n      this.isSubmitModalOpen = false;\n    }, 2000);\n  }\n\nonShowAllTransactions() {\n    this.router.navigate(['qrgenerator']);\n    }\n}\n","\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"p-6 space-y-6 bg-white dark:bg-[#1b2e4b]\">\n    <ng-container *ngIf=\"template\">\n      <app-section \n        *ngFor=\"let section of template.sections\"\n        [section]=\"section\"\n        [parentForm]=\"form\"\n        [existingData]=\"getExistingDataForSection(section.id)\">\n      </app-section>\n      \n      <div class=\"mt-3\">\n        <span *ngIf=\"showError\" class=\"text-red-500 text-sm block\">Please fill all required fields</span>\n      </div>\n    \n    </ng-container>\n  \n    <div class=\"flex justify-between items-center w-full\">\n      \n        <button \n        type=\"button\"\n        (click)=\"onShowAllTransactions()\"\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n      >\n        Show all transactions\n      </button>\n     \n    \n    \n      <div class=\"flex space-x-4\">\n        <button \n          type=\"button\"\n          (click)=\"onPreview()\"\n          class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n        >\n          Preview\n        </button>\n        <button \n          type=\"submit\"\n          class=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\n        >\n          Save\n        </button>\n      </div>\n    </div>\n    \n    \n   \n</form>\n<div *ngIf=\"isSubmitModalOpen\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n  <div class=\"bg-white dark:bg-[#1b2e4b] rounded-lg shadow-lg w-full max-w-md p-6\">\n    <!-- Modal Body -->\n    <div class=\"my-4\">\n      <p class=\"text-gray-600 dark:text-gray-400 text-center\">\n        Form submitted successfully!\n      </p>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}