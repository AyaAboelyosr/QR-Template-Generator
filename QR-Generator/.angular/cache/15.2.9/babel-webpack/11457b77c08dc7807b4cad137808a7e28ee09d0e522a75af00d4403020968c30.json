{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"angular-custom-modal\";\nconst _c0 = [\"addSectionModal\"];\nconst _c1 = [\"addFieldModal\"];\nfunction TemplateDetailsComponent_div_8_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 11)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_div_1_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const field_r8 = restoredCtx.$implicit;\n      const section_r5 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.editField(section_r5, field_r8));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_div_1_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const field_r8 = restoredCtx.$implicit;\n      const section_r5 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.deleteField(section_r5, field_r8.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const field_r8 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", field_r8.title, \" (\", field_r8.type, \")\");\n  }\n}\nfunction TemplateDetailsComponent_div_8_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TemplateDetailsComponent_div_8_div_10_div_1_Template, 8, 2, \"div\", 3);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_div_10_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const section_r5 = i0.ɵɵnextContext().$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.editField(section_r5));\n    });\n    i0.ɵɵtext(3, \"Add Field\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", section_r5.fields);\n  }\n}\nfunction TemplateDetailsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 6)(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.editSection(ctx_r18.template.id, section_r5));\n    });\n    i0.ɵɵtext(5, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.deleteSection(ctx_r20.template.id, section_r5.id));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_div_8_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const section_r5 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.toggleFieldsVisibility(section_r5));\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, TemplateDetailsComponent_div_8_div_10_Template, 4, 1, \"div\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r5.title);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", section_r5.expanded ? \"Hide\" : \"Show\", \" Fields \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", section_r5.expanded);\n  }\n}\nfunction TemplateDetailsComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 13);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateDetailsComponent_ng_template_11_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.saveSection());\n    });\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"label\", 15);\n    i0.ɵɵtext(6, \"Section Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 14)(9, \"label\", 17);\n    i0.ɵɵtext(10, \"Section Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"select\", 18)(12, \"option\", 19);\n    i0.ɵɵtext(13, \"Form\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 20);\n    i0.ɵɵtext(15, \"Table\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"button\", 21);\n    i0.ɵɵtext(17, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.sectionParams.value.id ? \"Edit\" : \"Add\", \" Section\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.sectionParams);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.sectionParams.invalid);\n  }\n}\nfunction TemplateDetailsComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 13);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateDetailsComponent_ng_template_14_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.saveField());\n    });\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"label\", 15);\n    i0.ɵɵtext(6, \"Field Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 14)(9, \"label\", 17);\n    i0.ɵɵtext(10, \"Field Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"select\", 18)(12, \"option\", 22);\n    i0.ɵɵtext(13, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 23);\n    i0.ɵɵtext(15, \"Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"option\", 24);\n    i0.ɵɵtext(17, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"option\", 25);\n    i0.ɵɵtext(19, \"Boolean\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(20, \"div\", 14)(21, \"label\", 26);\n    i0.ɵɵtext(22, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"input\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 21);\n    i0.ɵɵtext(25, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.fieldParams.value.id ? \"Edit\" : \"Add\", \" Field\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r4.fieldParams);\n    i0.ɵɵadvance(21);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.fieldParams.invalid);\n  }\n}\nvar SectionType;\n(function (SectionType) {\n  SectionType[SectionType[\"Form\"] = 0] = \"Form\";\n  SectionType[SectionType[\"Table\"] = 1] = \"Table\";\n})(SectionType || (SectionType = {}));\nvar FieldType;\n(function (FieldType) {\n  FieldType[FieldType[\"Text\"] = 0] = \"Text\";\n  FieldType[FieldType[\"Number\"] = 1] = \"Number\";\n  FieldType[FieldType[\"Date\"] = 2] = \"Date\";\n  FieldType[FieldType[\"Boolean\"] = 3] = \"Boolean\";\n})(FieldType || (FieldType = {}));\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.template = {\n      id: 0,\n      title: '',\n      uniqeCode: '',\n      sections: []\n    };\n    this.templateUpdated = new EventEmitter();\n    this.initializeForms();\n  }\n  initializeForms() {\n    this.sectionForm = this.createSectionForm();\n    this.fieldForm = this.createFieldForm();\n  }\n  createSectionForm() {\n    return this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  createFieldForm() {\n    return this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false]\n    });\n  }\n  // Section Management\n  openSectionModal(section) {\n    this.sectionForm.reset();\n    if (section) {\n      this.sectionForm.patchValue({\n        id: section.id,\n        title: section.title,\n        type: SectionType[section.type]\n      });\n    }\n    this.addSectionModal.open();\n  }\n  handleSectionSubmit() {\n    if (this.sectionForm.invalid) {\n      this.showMessage('Please fill all required fields correctly', 'error');\n      return;\n    }\n    const formValue = this.sectionForm.value;\n    const sectionDto = {\n      title: formValue.title,\n      type: SectionType[formValue.type]\n    };\n    const operation = formValue.id ? this.templateService.updateSection(this.template.id.toString(), formValue.id.toString(), sectionDto) : this.templateService.addSection(this.template.id.toString(), sectionDto);\n    operation.subscribe({\n      next: updatedSection => {\n        this.updateSectionsList(updatedSection, formValue.id);\n        this.addSectionModal.close();\n        this.templateUpdated.emit(this.template);\n        this.showMessage(`Section ${formValue.id ? 'updated' : 'added'} successfully`);\n      },\n      error: error => this.handleError(error)\n    });\n  }\n  updateSectionsList(updatedSection, sectionId) {\n    if (sectionId) {\n      this.template.sections = this.template.sections.map(section => section.id === sectionId ? {\n        ...section,\n        ...updatedSection\n      } : section);\n    } else {\n      this.template.sections = [...this.template.sections, updatedSection];\n    }\n  }\n  deleteSection(sectionId) {\n    this.templateService.deleteSection(this.template.id.toString(), sectionId.toString()).subscribe({\n      next: () => {\n        this.template.sections = this.template.sections.filter(section => section.id !== sectionId);\n        this.templateUpdated.emit(this.template);\n        this.showMessage('Section deleted successfully');\n      },\n      error: error => this.handleError(error)\n    });\n  }\n  // Field Management\n  openFieldModal(section, field) {\n    this.selectedSection = section;\n    this.fieldForm.reset();\n    if (field) {\n      this.fieldForm.patchValue({\n        id: field.id,\n        title: field.title,\n        type: FieldType[field.type],\n        isRequired: field.isRequired\n      });\n    }\n    this.addFieldModal.open();\n  }\n  handleFieldSubmit() {\n    if (this.fieldForm.invalid || !this.selectedSection) {\n      this.showMessage('Please fill all required fields correctly', 'error');\n      return;\n    }\n    const formValue = this.fieldForm.value;\n    const fieldDto = {\n      title: formValue.title,\n      type: FieldType[formValue.type],\n      isRequired: formValue.isRequired\n    };\n    const operation = formValue.id ? this.templateService.updateField(this.template.id.toString(), this.selectedSection.id.toString(), formValue.id.toString(), fieldDto) : this.templateService.addField(this.template.id.toString(), this.selectedSection.id.toString(), fieldDto);\n    operation.subscribe({\n      next: updatedField => {\n        this.updateFieldsList(updatedField, formValue.id);\n        this.addFieldModal.close();\n        this.templateUpdated.emit(this.template);\n        this.showMessage(`Field ${formValue.id ? 'updated' : 'added'} successfully`);\n      },\n      error: error => this.handleError(error)\n    });\n  }\n  updateFieldsList(updatedField, fieldId) {\n    if (!this.selectedSection) return;\n    const sectionIndex = this.template.sections.findIndex(s => s.id === this.selectedSection?.id);\n    if (fieldId) {\n      this.template.sections[sectionIndex].fields = this.template.sections[sectionIndex].fields?.map(field => field.id === fieldId ? {\n        ...field,\n        ...updatedField\n      } : field) || [];\n    } else {\n      this.template.sections[sectionIndex].fields = [...(this.template.sections[sectionIndex].fields || []), updatedField];\n    }\n  }\n  deleteField(section, fieldId) {\n    this.templateService.deleteField(this.template.id.toString(), section.id.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const sectionIndex = this.template.sections.findIndex(s => s.id === section.id);\n        this.template.sections[sectionIndex].fields = this.template.sections[sectionIndex].fields?.filter(field => field.id !== fieldId) || [];\n        this.templateUpdated.emit(this.template);\n        this.showMessage('Field deleted successfully');\n      },\n      error: error => this.handleError(error)\n    });\n  }\n  // UI Helpers\n  toggleSectionVisibility(section) {\n    section.expanded = !section.expanded;\n  }\n  handleError(error) {\n    const errorMessage = error.error?.message || 'An unexpected error occurred';\n    this.showMessage(errorMessage, 'error');\n    console.error('API Error:', error);\n  }\n  showMessage(message, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: message,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: {\n        container: 'toast'\n      }\n    });\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    viewQuery: function TemplateDetailsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    inputs: {\n      template: \"template\"\n    },\n    outputs: {\n      templateUpdated: \"templateUpdated\"\n    },\n    decls: 15,\n    vars: 2,\n    consts: [[1, \"template-details-container\"], [1, \"section-list\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"addSectionModal\", \"\"], [\"addFieldModal\", \"\"], [1, \"section-item\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"btn\", \"btn-info\", 3, \"click\"], [4, \"ngIf\"], [1, \"field-item\"], [1, \"modal-content\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"type\", \"text\", \"formControlName\", \"title\", \"id\", \"title\", 1, \"form-control\"], [\"for\", \"type\"], [\"formControlName\", \"type\", \"id\", \"type\", 1, \"form-control\"], [\"value\", \"Form\"], [\"value\", \"Table\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"value\", \"Text\"], [\"value\", \"Number\"], [\"value\", \"Date\"], [\"value\", \"Boolean\"], [\"for\", \"isRequired\"], [\"type\", \"checkbox\", \"formControlName\", \"isRequired\", \"id\", \"isRequired\", 1, \"form-check-input\"]],\n    template: function TemplateDetailsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"h3\");\n        i0.ɵɵtext(5, \"Sections\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TemplateDetailsComponent_Template_button_click_6_listener() {\n          return ctx.editSection(ctx.template.id);\n        });\n        i0.ɵɵtext(7, \"Add Section\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, TemplateDetailsComponent_div_8_Template, 11, 3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"modal\", null, 4);\n        i0.ɵɵtemplate(11, TemplateDetailsComponent_ng_template_11_Template, 18, 3, \"ng-template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"modal\", null, 5);\n        i0.ɵɵtemplate(14, TemplateDetailsComponent_ng_template_14_Template, 26, 3, \"ng-template\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Template: \", ctx.template.title, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.template.sections);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i4.ModalComponent, i1.FormGroupDirective, i1.FormControlName],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","Swal","i0","SectionType","FieldType","TemplateDetailsComponent","constructor","fb","templateService","id","title","uniqeCode","sections","initializeForms","sectionForm","createSectionForm","fieldForm","createFieldForm","group","required","minLength","maxLength","type","isRequired","openSectionModal","section","reset","patchValue","addSectionModal","open","handleSectionSubmit","invalid","showMessage","formValue","value","sectionDto","operation","updateSection","template","toString","addSection","subscribe","next","updatedSection","updateSectionsList","close","templateUpdated","emit","error","handleError","sectionId","map","deleteSection","filter","openFieldModal","field","selectedSection","addFieldModal","handleFieldSubmit","fieldDto","updateField","addField","updatedField","updateFieldsList","fieldId","sectionIndex","findIndex","s","fields","deleteField","toggleSectionVisibility","expanded","errorMessage","message","console","fire","icon","toast","position","showConfirmButton","timer","customClass","container","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.html"],"sourcesContent":["import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/';\n\nenum SectionType {\n  Form = 0,\n  Table = 1\n}\n\nenum FieldType {\n  Text = 0,\n  Number = 1,\n  Date = 2,\n  Boolean = 3\n}\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html'\n})\nexport class TemplateDetailsComponent {\n  @Input() template: Template = {\n    id: 0,\n    title: '',\n    uniqeCode: '',\n    sections: []\n  };\n\n  @Output() templateUpdated = new EventEmitter<Template>();\n  \n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionForm: FormGroup;\n  fieldForm: FormGroup;\n  selectedSection?: Section;\n\n  constructor(\n    private fb: FormBuilder,\n    private templateService: TemplateService\n  ) {\n    this.initializeForms();\n  }\n\n  private initializeForms(): void {\n    this.sectionForm = this.createSectionForm();\n    this.fieldForm = this.createFieldForm();\n  }\n\n  private createSectionForm(): FormGroup {\n    return this.fb.group({\n      id: [0],\n      title: ['', [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(100)\n      ]],\n      type: ['', Validators.required]\n    });\n  }\n\n  private createFieldForm(): FormGroup {\n    return this.fb.group({\n      id: [0],\n      title: ['', [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(100)\n      ]],\n      type: ['', Validators.required],\n      isRequired: [false]\n    });\n  }\n\n  // Section Management\n  openSectionModal(section?: Section): void {\n    this.sectionForm.reset();\n    \n    if (section) {\n      this.sectionForm.patchValue({\n        id: section.id,\n        title: section.title,\n        type: SectionType[section.type]\n      });\n    }\n    \n    this.addSectionModal.open();\n  }\n\n  handleSectionSubmit(): void {\n    if (this.sectionForm.invalid) {\n      this.showMessage('Please fill all required fields correctly', 'error');\n      return;\n    }\n\n    const formValue = this.sectionForm.value;\n    const sectionDto = {\n      title: formValue.title,\n      type: SectionType[formValue.type as keyof typeof SectionType]\n    };\n\n    const operation = formValue.id\n      ? this.templateService.updateSection(\n          this.template.id.toString(),\n          formValue.id.toString(),\n          sectionDto\n        )\n      : this.templateService.addSection(\n          this.template.id.toString(),\n          sectionDto\n        );\n\n    operation.subscribe({\n      next: (updatedSection) => {\n        this.updateSectionsList(updatedSection, formValue.id);\n        this.addSectionModal.close();\n        this.templateUpdated.emit(this.template);\n        this.showMessage(`Section ${formValue.id ? 'updated' : 'added'} successfully`);\n      },\n      error: (error) => this.handleError(error)\n    });\n  }\n\n  private updateSectionsList(updatedSection: Section, sectionId?: number): void {\n    if (sectionId) {\n      this.template.sections = this.template.sections.map(section => \n        section.id === sectionId ? { ...section, ...updatedSection } : section\n      );\n    } else {\n      this.template.sections = [...this.template.sections, updatedSection];\n    }\n  }\n\n  deleteSection(sectionId: number): void {\n    this.templateService.deleteSection(\n      this.template.id.toString(),\n      sectionId.toString()\n    ).subscribe({\n      next: () => {\n        this.template.sections = this.template.sections.filter(\n          section => section.id !== sectionId\n        );\n        this.templateUpdated.emit(this.template);\n        this.showMessage('Section deleted successfully');\n      },\n      error: (error) => this.handleError(error)\n    });\n  }\n\n  // Field Management\n  openFieldModal(section: Section, field?: Field): void {\n    this.selectedSection = section;\n    this.fieldForm.reset();\n\n    if (field) {\n      this.fieldForm.patchValue({\n        id: field.id,\n        title: field.title,\n        type: FieldType[field.type],\n        isRequired: field.isRequired\n      });\n    }\n\n    this.addFieldModal.open();\n  }\n\n  handleFieldSubmit(): void {\n    if (this.fieldForm.invalid || !this.selectedSection) {\n      this.showMessage('Please fill all required fields correctly', 'error');\n      return;\n    }\n\n    const formValue = this.fieldForm.value;\n    const fieldDto = {\n      title: formValue.title,\n      type: FieldType[formValue.type as keyof typeof FieldType],\n      isRequired: formValue.isRequired\n    };\n\n    const operation = formValue.id\n      ? this.templateService.updateField(\n          this.template.id.toString(),\n          this.selectedSection.id.toString(),\n          formValue.id.toString(),\n          fieldDto\n        )\n      : this.templateService.addField(\n          this.template.id.toString(),\n          this.selectedSection.id.toString(),\n          fieldDto\n        );\n\n    operation.subscribe({\n      next: (updatedField) => {\n        this.updateFieldsList(updatedField, formValue.id);\n        this.addFieldModal.close();\n        this.templateUpdated.emit(this.template);\n        this.showMessage(`Field ${formValue.id ? 'updated' : 'added'} successfully`);\n      },\n      error: (error) => this.handleError(error)\n    });\n  }\n\n  private updateFieldsList(updatedField: Field, fieldId?: number): void {\n    if (!this.selectedSection) return;\n\n    const sectionIndex = this.template.sections.findIndex(\n      s => s.id === this.selectedSection?.id\n    );\n\n    if (fieldId) {\n      this.template.sections[sectionIndex].fields = \n        this.template.sections[sectionIndex].fields?.map(field =>\n          field.id === fieldId ? { ...field, ...updatedField } : field\n        ) || [];\n    } else {\n      this.template.sections[sectionIndex].fields = [\n        ...(this.template.sections[sectionIndex].fields || []),\n        updatedField\n      ];\n    }\n  }\n\n  deleteField(section: Section, fieldId: number): void {\n    this.templateService.deleteField(\n      this.template.id.toString(),\n      section.id.toString(),\n      fieldId.toString()\n    ).subscribe({\n      next: () => {\n        const sectionIndex = this.template.sections.findIndex(\n          s => s.id === section.id\n        );\n        this.template.sections[sectionIndex].fields = \n          this.template.sections[sectionIndex].fields?.filter(\n            field => field.id !== fieldId\n          ) || [];\n        this.templateUpdated.emit(this.template);\n        this.showMessage('Field deleted successfully');\n      },\n      error: (error) => this.handleError(error)\n    });\n  }\n\n  // UI Helpers\n  toggleSectionVisibility(section: Section): void {\n    section.expanded = !section.expanded;\n  }\n\n  private handleError(error: any): void {\n    const errorMessage = error.error?.message || 'An unexpected error occurred';\n    this.showMessage(errorMessage, 'error');\n    console.error('API Error:', error);\n  }\n\n  private showMessage(message: string, type: 'success' | 'error' = 'success'): void {\n    Swal.fire({\n      icon: type,\n      title: message,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: { container: 'toast' }\n    });\n  }\n}","<div class=\"template-details-container\">\n  <h2>Template: {{ template.title }}</h2>\n\n  <!-- Sections Section -->\n  <div class=\"section-list\">\n    <h3>Sections</h3>\n    <button class=\"btn btn-primary\" (click)=\"editSection(template.id)\">Add Section</button>\n\n    <div *ngFor=\"let section of template.sections\">\n      <div class=\"section-item\">\n        <h4>{{ section.title }}</h4>\n        <button class=\"btn btn-secondary\" (click)=\"editSection(template.id, section)\">Edit</button>\n        <button class=\"btn btn-danger\" (click)=\"deleteSection(template.id, section.id)\">Delete</button>\n        <button class=\"btn btn-info\" (click)=\"toggleFieldsVisibility(section)\">\n          {{ section.expanded ? 'Hide' : 'Show' }} Fields\n        </button>\n\n        <!-- Fields -->\n        <div *ngIf=\"section.expanded\">\n          <div *ngFor=\"let field of section.fields\">\n            <div class=\"field-item\">\n              <span>{{ field.title }} ({{ field.type }})</span>\n              <button class=\"btn btn-secondary\" (click)=\"editField(section, field)\">Edit</button>\n              <button class=\"btn btn-danger\" (click)=\"deleteField(section, field.id)\">Delete</button>\n            </div>\n          </div>\n          <button class=\"btn btn-primary\" (click)=\"editField(section)\">Add Field</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Section Modal -->\n  <modal #addSectionModal>\n    <ng-template let-modal>\n      <div class=\"modal-content\">\n        <h4>{{ sectionParams.value.id ? 'Edit' : 'Add' }} Section</h4>\n        <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n          <div class=\"form-group\">\n            <label for=\"title\">Section Title</label>\n            <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"type\">Section Type</label>\n            <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n              <option value=\"Form\">Form</option>\n              <option value=\"Table\">Table</option>\n            </select>\n          </div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"sectionParams.invalid\">Save</button>\n        </form>\n      </div>\n    </ng-template>\n  </modal>\n\n  <!-- Field Modal -->\n  <modal #addFieldModal>\n    <ng-template let-modal>\n      <div class=\"modal-content\">\n        <h4>{{ fieldParams.value.id ? 'Edit' : 'Add' }} Field</h4>\n        <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n          <div class=\"form-group\">\n            <label for=\"title\">Field Title</label>\n            <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"type\">Field Type</label>\n            <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n              <option value=\"Text\">Text</option>\n              <option value=\"Number\">Number</option>\n              <option value=\"Date\">Date</option>\n              <option value=\"Boolean\">Boolean</option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"isRequired\">Required</label>\n            <input type=\"checkbox\" formControlName=\"isRequired\" class=\"form-check-input\" id=\"isRequired\" />\n          </div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"fieldParams.invalid\">Save</button>\n        </form>\n      </div>\n    </ng-template>\n  </modal>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}