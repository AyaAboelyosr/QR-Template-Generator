{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class authGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.authService.isLoggedIn$.pipe(map(isLoggedIn => {\n      if (!isLoggedIn) {\n        this.router.navigate(['/auth/login']); // ✅ Ensure users are redirected to login\n        return false;\n      }\n      return true;\n    }));\n  }\n  static #_ = this.ɵfac = function authGuard_Factory(t) {\n    return new (t || authGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: authGuard,\n    factory: authGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,OAAO,IAAI,CAACF,WAAW,CAACG,WAAW,CAACC,IAAI,CACtCC,GAAG,CAACC,UAAU,IAAG;MACf,IAAI,CAACA,UAAU,EAAE;QACf,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,OAAO,KAAK;;MAEd,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAAC;qBAbUT,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAU,SAATV,SAAS;IAAAW,YAFR;EAAM","names":["authGuard","constructor","authService","router","canActivate","isLoggedIn$","pipe","map","isLoggedIn","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class authGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.isLoggedIn$.pipe(\n      map(isLoggedIn => {\n        if (!isLoggedIn) {\n          this.router.navigate(['/auth/login']); // ✅ Ensure users are redirected to login\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}