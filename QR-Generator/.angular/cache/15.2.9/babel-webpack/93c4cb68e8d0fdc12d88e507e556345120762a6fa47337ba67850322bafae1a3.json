{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from '@angular/core';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute } from '@angular/router';\nlet TemplateItemComponent = class TemplateItemComponent {\n  constructor() {\n    this._TemplateService = inject(TemplateService);\n    this._router = inject(ActivatedRoute);\n    this.templateData = {};\n    this.displayType = 'grid';\n  }\n  ngOnInit() {\n    this.templateId = this._router.snapshot.paramMap.get('id');\n    this.getTemplatebyId();\n  }\n  getTemplatebyId() {\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: res => {\n        console.log('Template id', this.templateId);\n        console.log('Result =', res);\n        this.templateData = res;\n      },\n      error: error => {\n        console.error('Error:', error);\n      }\n    });\n  }\n  toggleSection(section) {\n    section.expanded = !section.expanded;\n  }\n  toggleField(field) {\n    field.expanded = !field.expanded;\n  }\n  addSection() {\n    const newSection = {\n      title: '',\n      type: this.mapSectionType('Form'),\n      fields: [],\n      expanded: false\n    };\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  // The mapSectionType method\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0; // Default to 0 if the type is not found\n  }\n\n  editSection(section) {\n    // Logic for opening a modal to edit a section (you can implement it with a modal library)\n    // For example, if using the same modal system you had in `ListTemplateComponent`, you can call a modal for editing a section here.\n  }\n  deleteSection(sectionId) {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter(s => s.id !== sectionId);\n      },\n      error: error => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n  // field methods \n  addField(sectionId) {\n    const newField = {\n      title: '',\n      type: 'Text',\n      isRequired: false,\n      expanded: false\n    };\n    // Convert sectionId to string before passing it to the service\n    this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n      next: res => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields.push(res);\n        }\n      },\n      error: error => {\n        console.error('Error adding field:', error);\n      }\n    });\n  }\n  editField(sectionId, field) {\n    // Logic for opening a modal to edit a field (similarly, you can implement this part with a modal system).\n  }\n  deleteField(sectionId, fieldId) {\n    // Convert both sectionId and fieldId to strings before passing to the service\n    this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields = section.fields.filter(f => f.id !== fieldId);\n        }\n      },\n      error: error => {\n        console.error('Error deleting field:', error);\n      }\n    });\n  }\n};\nTemplateItemComponent = __decorate([Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})], TemplateItemComponent);\nexport { TemplateItemComponent };","map":{"version":3,"mappings":"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","names":["Component","inject","TemplateService","ActivatedRoute","TemplateItemComponent","constructor","ngOnInit","templateId","_router","snapshot","paramMap","get","getTemplatebyId","_TemplateService","getTemplateById","subscribe","next","res","console","log","templateData","error","toggleSection","section","expanded","toggleField","field","addSection","newSection","title","type","mapSectionType","fields","sections","push","sectionTypeMap","editSection","deleteSection","sectionId","toString","filter","s","id","addField","newField","isRequired","find","editField","deleteField","fieldId","f","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.ts"],"sourcesContent":["import { Component, inject, OnInit } from '@angular/core';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})\nexport class TemplateItemComponent implements OnInit {\n\n  _TemplateService=inject(TemplateService);\n  _router=inject(ActivatedRoute);\n  templateData: any = {};\n  displayType: string = 'grid'; \n  templateId!: string;\n  ngOnInit(): void {\n    this.templateId = this._router.snapshot.paramMap.get('id')!; \n    this.getTemplatebyId();\n  }\n\n  getTemplatebyId(){\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: (res) => {\n        console.log( 'Template id',this.templateId);\n        console.log('Result =' ,res);\n        this.templateData = res;\n       \n      },\n      error: (error) => {\n        console.error('Error:', error);\n      }\n\n\n    })\n  }\n  \n  toggleSection(section: any): void {\n    section.expanded = !section.expanded;\n  }\n\n  toggleField(field: any): void {\n    field.expanded = !field.expanded;\n  }\n\n  addSection(): void {\n    const newSection = {\n      title: '',\n      type: this.mapSectionType('Form'), // Default type 'Form'\n      fields: [],\n      expanded: false\n    };\n\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  \n  // The mapSectionType method\n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; // Default to 0 if the type is not found\n  }\n\n  editSection(section: any): void {\n    // Logic for opening a modal to edit a section (you can implement it with a modal library)\n    // For example, if using the same modal system you had in `ListTemplateComponent`, you can call a modal for editing a section here.\n  }\n\n  deleteSection(sectionId: number): void {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter((s: any) => s.id !== sectionId);\n      },\n      error: (error) => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n// field methods \n\naddField(sectionId: number): void {\n  const newField = {\n    title: '',\n    type: 'Text', // Default type 'Text'\n    isRequired: false,\n    expanded: false\n  };\n\n  // Convert sectionId to string before passing it to the service\n  this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n    next: (res) => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields.push(res);\n      }\n    },\n    error: (error) => {\n      console.error('Error adding field:', error);\n    }\n  });\n}\n\neditField(sectionId: number, field: any): void {\n  // Logic for opening a modal to edit a field (similarly, you can implement this part with a modal system).\n}\n\ndeleteField(sectionId: number, fieldId: number): void {\n  // Convert both sectionId and fieldId to strings before passing to the service\n  this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n    next: () => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields = section.fields.filter((f: any) => f.id !== fieldId);\n      }\n    },\n    error: (error) => {\n      console.error('Error deleting field:', error);\n    }\n  });\n}\n\n\n  \n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}