{"ast":null,"code":"import { inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"angular-custom-modal\";\nconst _c0 = [\"addFieldModal\"];\nconst _c1 = [\"addSectionModal\"];\nfunction TemplateItemComponent_ng_container_27_tr_16_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 32)(1, \"td\", 33);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 33);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 33);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 34)(8, \"div\", 20)(9, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_tr_16_tr_14_Template_button_click_9_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const field_r14 = restoredCtx.$implicit;\n      const section_r11 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      ctx_r15.editField(section_r11.id, field_r14);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(10, \" Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_tr_16_tr_14_Template_button_click_11_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const field_r14 = restoredCtx.$implicit;\n      const section_r11 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      ctx_r18.deleteField(section_r11.id, field_r14.id);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(12, \" Delete \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const field_r14 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r14.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r14.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r14.isRequired ? \"Yes\" : \"No\");\n  }\n}\nfunction TemplateItemComponent_ng_container_27_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 5)(1, \"td\", 26)(2, \"table\", 27)(3, \"thead\")(4, \"tr\")(5, \"th\", 28);\n    i0.ɵɵtext(6, \"Field Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 28);\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 28);\n    i0.ɵɵtext(10, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 29);\n    i0.ɵɵtext(12, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"tbody\");\n    i0.ɵɵtemplate(14, TemplateItemComponent_ng_container_27_tr_16_tr_14_Template, 13, 3, \"tr\", 30);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_tr_16_Template_button_click_15_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const section_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      ctx_r20.openAddFieldModal(section_r11.id);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(16, \" + Add Field \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const section_r11 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(14);\n    i0.ɵɵproperty(\"ngForOf\", section_r11.fields);\n  }\n}\nfunction TemplateItemComponent_ng_container_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\", 17);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_Template_tr_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.toggleSection(section_r11));\n    });\n    i0.ɵɵelementStart(2, \"td\", 18);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\", 18);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\", 19)(7, \"div\", 20)(8, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_Template_button_click_8_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r26 = i0.ɵɵnextContext();\n      ctx_r26.editSection(section_r11);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(9, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_container_27_Template_button_click_10_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const section_r11 = restoredCtx.$implicit;\n      const ctx_r27 = i0.ɵɵnextContext();\n      ctx_r27.deleteSection(section_r11.id);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(11, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"span\", 23);\n    i0.ɵɵtext(13, \"|\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 24);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵtemplate(16, TemplateItemComponent_ng_container_27_tr_16_Template, 17, 1, \"tr\", 25);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const section_r11 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(section_r11.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(section_r11.type);\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\" \", section_r11.expanded ? \"Hide\" : \"Show\", \" Fields \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", section_r11.expanded);\n  }\n}\nfunction TemplateItemComponent_ng_template_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.sectionParams.controls[\"id\"].value ? \"Edit Section\" : \"Add Section\");\n  }\n}\nfunction TemplateItemComponent_ng_template_37_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_37_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_37_div_5_div_1_Template, 2, 0, \"div\", 47);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r28.sectionParams.controls[\"title\"].errors == null ? null : ctx_r28.sectionParams.controls[\"title\"].errors[\"required\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 36);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateItemComponent_ng_template_37_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.saveSection());\n    });\n    i0.ɵɵelementStart(1, \"div\", 37)(2, \"label\", 38);\n    i0.ɵɵtext(3, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 39);\n    i0.ɵɵtemplate(5, TemplateItemComponent_ng_template_37_div_5_Template, 2, 1, \"div\", 40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 37)(7, \"label\");\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n    i0.ɵɵelement(11, \"input\", 41);\n    i0.ɵɵtext(12, \" Form \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"label\");\n    i0.ɵɵelement(14, \"input\", 42);\n    i0.ɵɵtext(15, \" Table \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"div\", 43)(17, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_template_37_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r31);\n      i0.ɵɵnextContext();\n      const _r1 = i0.ɵɵreference(34);\n      return i0.ɵɵresetView(_r1.close());\n    });\n    i0.ɵɵtext(18, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 45);\n    i0.ɵɵtext(20, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r5.sectionParams);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.sectionParams.controls[\"title\"].invalid && ctx_r5.sectionParams.controls[\"title\"].touched);\n  }\n}\nfunction TemplateItemComponent_ng_template_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.fieldParams.controls[\"id\"].value ? \"Edit Field\" : \"Add Field\");\n  }\n}\nfunction TemplateItemComponent_ng_template_43_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Title is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TemplateItemComponent_ng_template_43_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵtemplate(1, TemplateItemComponent_ng_template_43_div_5_div_1_Template, 2, 0, \"div\", 47);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r33.fieldParams.controls[\"title\"].errors == null ? null : ctx_r33.fieldParams.controls[\"title\"].errors[\"required\"]);\n  }\n}\nfunction TemplateItemComponent_ng_template_43_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 36);\n    i0.ɵɵlistener(\"ngSubmit\", function TemplateItemComponent_ng_template_43_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35.saveField());\n    });\n    i0.ɵɵelementStart(1, \"div\", 37)(2, \"label\", 48);\n    i0.ɵɵtext(3, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 49);\n    i0.ɵɵtemplate(5, TemplateItemComponent_ng_template_43_div_5_Template, 2, 1, \"div\", 40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 37)(7, \"label\", 50);\n    i0.ɵɵtext(8, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"select\", 51)(10, \"option\", 52);\n    i0.ɵɵtext(11, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"option\", 53);\n    i0.ɵɵtext(13, \"Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 54);\n    i0.ɵɵtext(15, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"option\", 55);\n    i0.ɵɵtext(17, \"Boolean\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 37)(19, \"label\", 56);\n    i0.ɵɵtext(20, \"Required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 57);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"div\", 43)(23, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function TemplateItemComponent_ng_template_43_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r36);\n      i0.ɵɵnextContext();\n      const _r6 = i0.ɵɵreference(40);\n      return i0.ɵɵresetView(_r6.close());\n    });\n    i0.ɵɵtext(24, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 45);\n    i0.ɵɵtext(26, \"Save\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r10.fieldParams);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.fieldParams.controls[\"title\"].invalid && ctx_r10.fieldParams.controls[\"title\"].touched);\n  }\n}\nexport class TemplateItemComponent {\n  constructor() {\n    this._TemplateService = inject(TemplateService);\n    this._router = inject(ActivatedRoute);\n    this._fb = inject(FormBuilder);\n    this.currentSectionId = null;\n    this.templateData = {};\n    this.displayType = 'grid';\n  }\n  ngOnInit() {\n    this.templateId = this._router.snapshot.paramMap.get('id');\n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n  initSectionForm() {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n  openAddFieldModal(sectionId) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({\n      type: 'Text',\n      isRequired: false,\n      title: ''\n    });\n    this.addFieldModal.open();\n  }\n  openAddSectionModal() {\n    this.sectionParams.reset({\n      type: 'form'\n    });\n    this.addSectionModal.open();\n  }\n  saveField() {\n    if (this.fieldParams.invalid) return;\n    const fieldData = this.fieldParams.value;\n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n    // Create the payload for the API request\n    const requestData = {\n      title: fieldData.title,\n      type: mappedType,\n      isRequired: fieldData.isRequired\n    };\n    if (fieldData.id) {\n      // If there is an ID, it's an existing field that needs to be updated\n      this._TemplateService.updateField(this.templateId, this.currentSectionId.toString(), fieldData.id.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            const fieldIndex = section.fields.findIndex(f => f.id === fieldData.id);\n            if (fieldIndex !== -1) {\n              // Replace the existing field with the updated one\n              section.fields[fieldIndex] = res;\n            }\n          }\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error updating field:', error);\n        }\n      });\n    } else {\n      // If there is no ID, it's a new field that needs to be added\n      this._TemplateService.addField(this.templateId, this.currentSectionId.toString(), requestData).subscribe({\n        next: res => {\n          const section = this.templateData.sections.find(s => s.id === this.currentSectionId);\n          if (section) {\n            section.fields.push(res); // Add the new field to the section\n          }\n\n          this.addFieldModal.close();\n        },\n        error: error => {\n          console.error('Error adding field:', error);\n        }\n      });\n    }\n  }\n  getTemplatebyId() {\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: res => {\n        console.log('Template id', this.templateId);\n        console.log('Result =', res);\n        this.templateData = res;\n      },\n      error: error => {\n        console.error('Error:', error);\n      }\n    });\n  }\n  toggleSection(section) {\n    section.expanded = !section.expanded;\n  }\n  toggleField(field) {\n    field.expanded = !field.expanded;\n  }\n  addSection() {\n    const newSection = {\n      title: 'New Section',\n      type: this.mapSectionType('Form'),\n      fields: [],\n      expanded: false\n    };\n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: res => {\n        this.templateData.sections.push(res);\n      },\n      error: error => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  // The mapSectionType method\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'form': 0,\n      'table': 1 // Assuming 1 is for \"Table\"\n    };\n\n    return sectionTypeMap[type.toLowerCase()] ?? 0; // Default to 0 if the type is not found\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n    const sectionData = this.sectionParams.value;\n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type)\n    };\n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData).subscribe({\n        next: res => {\n          const sectionIndex = this.templateData.sections.findIndex(s => s.id === sectionData.id);\n          if (sectionIndex !== -1) {\n            this.templateData.sections[sectionIndex] = res;\n          }\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error updating section:', error);\n        }\n      });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData).subscribe({\n        next: res => {\n          this.templateData.sections.push(res);\n          this.addSectionModal.close();\n        },\n        error: error => {\n          console.error('Error adding section:', error);\n        }\n      });\n    }\n  }\n  editSection(section) {\n    // Initialize the form before setting values\n    this.initSectionForm();\n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  deleteSection(sectionId) {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter(s => s.id !== sectionId);\n      },\n      error: error => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n  // field methods \n  addField(sectionId) {\n    const newField = {\n      title: '',\n      type: 'Text',\n      isRequired: false,\n      expanded: false\n    };\n    // Convert sectionId to string before passing it to the service\n    this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n      next: res => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields.push(res);\n        }\n      },\n      error: error => {\n        console.error('Error adding field:', error);\n      }\n    });\n  }\n  editField(sectionId, field) {\n    this.currentSectionId = sectionId;\n    this.fieldParams.patchValue(field); // Populate the form with the field data\n    this.addFieldModal.open(); // Open the modal to edit the field\n  }\n\n  deleteField(sectionId, fieldId) {\n    // Convert both sectionId and fieldId to strings before passing to the service\n    this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n      next: () => {\n        const section = this.templateData.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.fields = section.fields.filter(f => f.id !== fieldId);\n        }\n      },\n      error: error => {\n        console.error('Error deleting field:', error);\n      }\n    });\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n  }\n  static #_ = this.ɵfac = function TemplateItemComponent_Factory(t) {\n    return new (t || TemplateItemComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateItemComponent,\n    selectors: [[\"app-template-item\"]],\n    viewQuery: function TemplateItemComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n      }\n    },\n    decls: 45,\n    vars: 4,\n    consts: [[1, \"container\", \"mx-auto\", \"p-6\"], [1, \"bg-white\", \"shadow-md\", \"rounded-lg\", \"p-6\"], [1, \"text-xl\", \"font-semibold\", \"mb-4\"], [1, \"grid\", \"grid-cols-3\", \"gap-4\", \"border-b\", \"pb-4\", \"mb-4\"], [1, \"w-full\", \"border-collapse\"], [1, \"bg-gray-50\"], [1, \"text-left\", \"p-3\", \"border-b\"], [1, \"text-right\", \"p-3\", \"border-b\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-green-500\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-green-600\", \"mt-4\", 3, \"click\"], [1, \"mt-4\"], [\"href\", \"/list\", 1, \"text-blue-500\", \"hover:underline\"], [1, \"no-footer\"], [\"addSectionModal\", \"\"], [\"modalHeader\", \"\"], [\"modalBody\", \"\"], [\"addFieldModal\", \"\"], [1, \"hover:bg-gray-50\", \"cursor-pointer\", \"border-b\", 3, \"click\"], [1, \"p-3\"], [1, \"p-3\", \"text-right\"], [1, \"flex\", \"gap-3\", \"justify-end\"], [1, \"btn\", \"btn-sm\", \"btn-outline-primary\", 3, \"click\"], [1, \"btn\", \"btn-sm\", \"btn-outline-danger\", 3, \"click\"], [1, \"text-gray-400\"], [1, \"btn\", \"btn-sm\", \"btn-outline-secondary\"], [\"class\", \"bg-gray-50\", 4, \"ngIf\"], [\"colspan\", \"3\", 1, \"p-3\"], [1, \"w-full\"], [1, \"text-left\", \"p-2\"], [1, \"text-right\", \"p-2\"], [\"class\", \"hover:bg-gray-100\", 4, \"ngFor\", \"ngForOf\"], [1, \"bg-blue-500\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-blue-600\", \"mt-2\", \"ml-2\", 3, \"click\"], [1, \"hover:bg-gray-100\"], [1, \"p-2\", \"border-t\"], [1, \"p-2\", \"border-t\", \"text-right\"], [1, \"!font-medium\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-5\"], [\"for\", \"sectionTitle\"], [\"id\", \"sectionTitle\", \"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Enter Title\", 1, \"form-input\"], [\"class\", \"text-red-500\", 4, \"ngIf\"], [\"type\", \"radio\", \"formControlName\", \"type\", \"value\", \"form\"], [\"type\", \"radio\", \"formControlName\", \"type\", \"value\", \"table\"], [1, \"mt-8\", \"flex\", \"items-center\", \"justify-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ltr:ml-4\", \"rtl:ml-4\"], [1, \"text-red-500\"], [4, \"ngIf\"], [\"for\", \"fieldTitle\"], [\"id\", \"fieldTitle\", \"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Enter Title\", 1, \"form-input\"], [\"for\", \"fieldType\"], [\"id\", \"fieldType\", \"formControlName\", \"type\", 1, \"form-select\"], [\"value\", \"Text\"], [\"value\", \"Number\"], [\"value\", \"Date\"], [\"value\", \"Boolean\"], [\"for\", \"isRequired\"], [\"id\", \"isRequired\", \"type\", \"checkbox\", \"formControlName\", \"isRequired\"]],\n    template: function TemplateItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3, \"Template Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\")(6, \"strong\");\n        i0.ɵɵtext(7, \"ID:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\")(10, \"strong\");\n        i0.ɵɵtext(11, \"Title:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\")(14, \"strong\");\n        i0.ɵɵtext(15, \"Unique Code:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"table\", 4)(18, \"thead\", 5)(19, \"tr\")(20, \"th\", 6);\n        i0.ɵɵtext(21, \"Section Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"th\", 6);\n        i0.ɵɵtext(23, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"th\", 7);\n        i0.ɵɵtext(25, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"tbody\");\n        i0.ɵɵtemplate(27, TemplateItemComponent_ng_container_27_Template, 17, 4, \"ng-container\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function TemplateItemComponent_Template_button_click_28_listener() {\n          return ctx.openAddSectionModal();\n        });\n        i0.ɵɵtext(29, \"Add Section\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 10)(31, \"a\", 11);\n        i0.ɵɵtext(32, \"Back to List\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(33, \"modal\", 12, 13);\n        i0.ɵɵtemplate(35, TemplateItemComponent_ng_template_35_Template, 2, 1, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(37, TemplateItemComponent_ng_template_37_Template, 21, 2, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"modal\", 12, 16);\n        i0.ɵɵtemplate(41, TemplateItemComponent_ng_template_41_Template, 2, 1, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(43, TemplateItemComponent_ng_template_43_Template, 27, 2, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.id, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.title, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.templateData.uniqueCode, \"\");\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.templateData.sections);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.RadioControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i3.ModalComponent, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZW1wbGF0ZS1pdGVtLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJ0ZW1wbGF0ZWdlbmVyYXRvci9jb21wb25lbnRzL3RlbXBsYXRlLWl0ZW0vdGVtcGxhdGUtaXRlbS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw0S0FBNEsiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["inject","FormBuilder","Validators","TemplateService","ActivatedRoute","i0","ctx_r15","ctx_r18","ctx_r20","ctx_r26","ctx_r27","TemplateItemComponent","constructor","ngOnInit","templateId","_router","snapshot","paramMap","get","getTemplatebyId","initFieldForm","initSectionForm","sectionParams","_fb","group","id","title","required","minLength","maxLength","type","fieldParams","isRequired","openAddFieldModal","sectionId","currentSectionId","reset","addFieldModal","open","openAddSectionModal","addSectionModal","saveField","invalid","fieldData","value","mappedType","mapFieldType","requestData","_TemplateService","updateField","toString","subscribe","next","res","section","templateData","sections","find","s","fieldIndex","fields","findIndex","f","close","error","console","addField","push","getTemplateById","log","toggleSection","expanded","toggleField","field","addSection","newSection","mapSectionType","sectionTypeMap","toLowerCase","saveSection","sectionData","trim","updateSection","sectionIndex","editSection","setValue","deleteSection","filter","newField","editField","patchValue","deleteField","fieldId","fieldTypeMap","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-item\\template-item.component.html"],"sourcesContent":["import { Component, inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport { TemplateService } from '../../services/template.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-template-item',\n  templateUrl: './template-item.component.html',\n  styleUrls: ['./template-item.component.css']\n})\nexport class TemplateItemComponent implements OnInit {\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n\n  _TemplateService=inject(TemplateService);\n  _router=inject(ActivatedRoute);\n  _fb = inject(FormBuilder);\n  fieldParams!: FormGroup;\n  sectionParams!: FormGroup;\n  currentSectionId: number | null = null;\n  templateData: any = {};\n  displayType: string = 'grid'; \n  templateId!: string;\n  ngOnInit(): void {\n    this.templateId = this._router.snapshot.paramMap.get('id')!; \n    this.getTemplatebyId();\n    this.initFieldForm();\n    this.initSectionForm();\n  }\n\n  initSectionForm(): void {\n    this.sectionParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],  // Title validation\n      type: ['', Validators.required]\n    });\n  }\n  \n  \n\n  initFieldForm(): void {\n    this.fieldParams = this._fb.group({\n      id: [null],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['Text', Validators.required],\n      isRequired: [false]\n    });\n  }\n\n  openAddFieldModal(sectionId: number): void {\n    this.currentSectionId = sectionId;\n    this.fieldParams.reset({ type: 'Text', isRequired: false, title: '' });\n    this.addFieldModal.open();\n  }\n  \n\n  openAddSectionModal(): void {\n    this.sectionParams.reset({ type: 'form' });\n    this.addSectionModal.open();\n  }\n\n  saveField(): void {\n    if (this.fieldParams.invalid) return;\n  \n    const fieldData = this.fieldParams.value;\n  \n    // Map the field type to the enum value\n    const mappedType = this.mapFieldType(fieldData.type);\n  \n    // Create the payload for the API request\n    const requestData = {\n      title: fieldData.title,\n      type: mappedType,\n      isRequired: fieldData.isRequired\n    };\n  \n    if (fieldData.id) {\n      // If there is an ID, it's an existing field that needs to be updated\n      this._TemplateService.updateField(this.templateId, this.currentSectionId!.toString(), fieldData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              const fieldIndex = section.fields.findIndex((f: any) => f.id === fieldData.id);\n              if (fieldIndex !== -1) {\n                // Replace the existing field with the updated one\n                section.fields[fieldIndex] = res;\n              }\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating field:', error);\n          }\n        });\n    } else {\n      // If there is no ID, it's a new field that needs to be added\n      this._TemplateService.addField(this.templateId, this.currentSectionId!.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const section = this.templateData.sections.find((s: any) => s.id === this.currentSectionId);\n            if (section) {\n              section.fields.push(res);  // Add the new field to the section\n            }\n            this.addFieldModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding field:', error);\n          }\n        });\n    }\n  }\n  \n\n  getTemplatebyId(){\n    this._TemplateService.getTemplateById(this.templateId).subscribe({\n      next: (res) => {\n        console.log( 'Template id',this.templateId);\n        console.log('Result =' ,res);\n        this.templateData = res;\n       \n      },\n      error: (error) => {\n        console.error('Error:', error);\n      }\n\n\n    })\n  }\n  \n  toggleSection(section: any) {\n    section.expanded = !section.expanded;\n  }\n  \n  \n\n  toggleField(field: any): void {\n    field.expanded = !field.expanded;\n  }\n\n  addSection(): void {\n    const newSection = {\n      title: 'New Section',  // Ensure the title is not empty and has at least 3 characters\n      type: this.mapSectionType('Form'), // Default type 'Form'\n      fields: [],\n      expanded: false\n    };\n  \n    this._TemplateService.addSection(this.templateId, newSection).subscribe({\n      next: (res) => {\n        this.templateData.sections.push(res);\n      },\n      error: (error) => {\n        console.error('Error adding section:', error);\n      }\n    });\n  }\n  \n  // The mapSectionType method\n  private mapSectionType(type: string): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'form': 0,   // Assuming 0 is for \"Form\"\n      'table': 1,  // Assuming 1 is for \"Table\"\n    };\n    return sectionTypeMap[type.toLowerCase()] ?? 0;  // Default to 0 if the type is not found\n  }\n  \n\n  saveSection(): void {\n    if (this.sectionParams.invalid) {\n      console.log('Form is invalid');\n      return;\n    }\n  \n    const sectionData = this.sectionParams.value;\n  \n    // Ensure title is not empty\n    if (!sectionData.title || sectionData.title.trim() === '') {\n      console.error('Title is required');\n      return;\n    }\n  \n    const requestData = {\n      id: sectionData.id,\n      title: sectionData.title,\n      type: this.mapSectionType(sectionData.type),\n    };\n  \n    if (sectionData.id) {\n      // Edit existing section\n      this._TemplateService.updateSection(this.templateId, sectionData.id.toString(), requestData)\n        .subscribe({\n          next: (res) => {\n            const sectionIndex = this.templateData.sections.findIndex((s: any) => s.id === sectionData.id);\n            if (sectionIndex !== -1) {\n              this.templateData.sections[sectionIndex] = res;\n            }\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error updating section:', error);\n          }\n        });\n    } else {\n      // Add new section\n      this._TemplateService.addSection(this.templateId, requestData)\n        .subscribe({\n          next: (res) => {\n            this.templateData.sections.push(res);\n            this.addSectionModal.close();\n          },\n          error: (error) => {\n            console.error('Error adding section:', error);\n          }\n        });\n    }\n  }\n  \n  \n  editSection(section: any): void {\n    // Initialize the form before setting values\n    this.initSectionForm();\n  \n    // If a section is provided, set the form values for the selected section\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  \n    // Open the modal to edit the section\n    this.addSectionModal.open();\n  }\n  \n\n  deleteSection(sectionId: number): void {\n    this._TemplateService.deleteSection(this.templateId, sectionId.toString()).subscribe({\n      next: () => {\n        this.templateData.sections = this.templateData.sections.filter((s: any) => s.id !== sectionId);\n      },\n      error: (error) => {\n        console.error('Error deleting section:', error);\n      }\n    });\n  }\n// field methods \n\naddField(sectionId: number): void {\n  const newField = {\n    title: '',\n    type: 'Text', // Default type 'Text'\n    isRequired: false,\n    expanded: false\n  };\n\n  // Convert sectionId to string before passing it to the service\n  this._TemplateService.addField(this.templateId, sectionId.toString(), newField).subscribe({\n    next: (res) => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields.push(res);\n      }\n    },\n    error: (error) => {\n      console.error('Error adding field:', error);\n    }\n  });\n}\n\neditField(sectionId: number, field: any): void {\n  this.currentSectionId = sectionId;\n  this.fieldParams.patchValue(field);  // Populate the form with the field data\n  this.addFieldModal.open();           // Open the modal to edit the field\n}\n\n\ndeleteField(sectionId: number, fieldId: number): void {\n  // Convert both sectionId and fieldId to strings before passing to the service\n  this._TemplateService.deleteField(this.templateId, sectionId.toString(), fieldId.toString()).subscribe({\n    next: () => {\n      const section = this.templateData.sections.find((s: any) => s.id === sectionId);\n      if (section) {\n        section.fields = section.fields.filter((f: any) => f.id !== fieldId);\n      }\n    },\n    error: (error) => {\n      console.error('Error deleting field:', error);\n    }\n  });\n}\n\n\n\nprivate mapFieldType(type: string): number {\n  const fieldTypeMap: { [key: string]: number } = {\n    'Text': 0,\n    'Number': 1,\n    'Date': 2,\n    'Boolean': 3\n  };\n  return fieldTypeMap[type] ?? 0; // Default to 0 (Text) if the type is not found\n}\n\n\n\n\n}\n","<!-- <div class=\"template-details-container\">\n    <h2>Template: {{ template.title }}</h2>\n  \n    \n    <div class=\"section-list\">\n      <h3>Sections</h3>\n      <button class=\"btn btn-primary\" (click)=\"editSection(template.id)\">Add Section</button>\n  \n      <div *ngFor=\"let section of template.sections\">\n        <div class=\"section-item\">\n          <h4>{{ section.title }}</h4>\n          <button class=\"btn btn-secondary\" (click)=\"editSection(template.id, section)\">Edit</button>\n          <button class=\"btn btn-danger\" (click)=\"deleteSection(template.id, section.id)\">Delete</button>\n          <button class=\"btn btn-info\" (click)=\"toggleFieldsVisibility(section)\">\n            {{ section.expanded ? 'Hide' : 'Show' }} Fields\n          </button>\n  \n          \n          <div *ngIf=\"section.expanded\">\n            <div *ngFor=\"let field of section.fields\">\n              <div class=\"field-item\">\n                <span>{{ field.title }} ({{ field.type }})</span>\n                <button class=\"btn btn-secondary\" (click)=\"editField(section, field)\">Edit</button>\n                <button class=\"btn btn-danger\" (click)=\"deleteField(section, field.id)\">Delete</button>\n              </div>\n            </div>\n            <button class=\"btn btn-primary\" (click)=\"editField(section)\">Add Field</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n\n    <modal #addSectionModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ sectionParams.value.id ? 'Edit' : 'Add' }} Section</h4>\n          <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Section Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Section Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Form</option> \n                <option value=\"2\">Table</option> \n              </select>\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"sectionParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  \n   \n    <modal #addFieldModal>\n      <ng-template let-modal>\n        <div class=\"modal-content\">\n          <h4>{{ fieldParams.value.id ? 'Edit' : 'Add' }} Field</h4>\n          <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n            <div class=\"form-group\">\n              <label for=\"title\">Field Title</label>\n              <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"type\">Field Type</label>\n              <select formControlName=\"type\" class=\"form-control\" id=\"type\">\n                <option value=\"1\">Text</option> \n                <option value=\"2\">Number</option> \n                <option value=\"3\">Date</option> \n                <option value=\"4\">Boolean</option> \n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"isRequired\">Required</label>\n              <input type=\"checkbox\" formControlName=\"isRequired\" class=\"form-check-input\" id=\"isRequired\" />\n            </div>\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"fieldParams.invalid\">Save</button>\n          </form>\n        </div>\n      </ng-template>\n    </modal>\n  </div>\n   -->\n\n   <div class=\"container mx-auto p-6\">\n    <div class=\"bg-white shadow-md rounded-lg p-6\">\n        <h2 class=\"text-xl font-semibold mb-4\">Template Details</h2>\n        \n        <!-- Template Information -->\n        <div class=\"grid grid-cols-3 gap-4 border-b pb-4 mb-4\">\n            <div><strong>ID:</strong> {{ templateData.id }}</div>\n            <div><strong>Title:</strong> {{ templateData.title }}</div>\n            <div><strong>Unique Code:</strong> {{ templateData.uniqueCode }}</div>\n        </div>\n\n        <!-- Main Table -->\n        <table class=\"w-full border-collapse\">\n            <thead class=\"bg-gray-50\">\n                <tr>\n                    <th class=\"text-left p-3 border-b\">Section Title</th>\n                    <th class=\"text-left p-3 border-b\">Type</th>\n                    <th class=\"text-right p-3 border-b\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                <ng-container *ngFor=\"let section of templateData.sections\">\n                    <!-- Section Row -->\n                    <tr class=\"hover:bg-gray-50 cursor-pointer border-b\" (click)=\"toggleSection(section)\">\n                        <td class=\"p-3\">{{ section.title }}</td>\n                        <td class=\"p-3\">{{ section.type }}</td>\n                        <td class=\"p-3 text-right\">\n                            <div class=\"flex gap-3 justify-end\">\n                                <button class=\"btn btn-sm btn-outline-primary\" (click)=\"editSection(section); $event.stopPropagation()\">Edit</button>\n                                <button class=\"btn btn-sm btn-outline-danger\" (click)=\"deleteSection(section.id); $event.stopPropagation()\">Delete</button>\n                                <span class=\"text-gray-400\">|</span>\n                                <button class=\"btn btn-sm btn-outline-secondary\">\n                                    {{ section.expanded ? 'Hide' : 'Show' }} Fields\n                                </button>\n                            </div>\n                        </td>\n                    </tr>\n\n                    <!-- Fields Sub-table -->\n                    <tr *ngIf=\"section.expanded\" class=\"bg-gray-50\">\n                        <td colspan=\"3\" class=\"p-3\">\n                            <table class=\"w-full\">\n                                <thead>\n                                    <tr>\n                                        <th class=\"text-left p-2\">Field Title</th>\n                                        <th class=\"text-left p-2\">Type</th>\n                                        <th class=\"text-left p-2\">Required</th>\n                                        <th class=\"text-right p-2\">Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let field of section.fields\" class=\"hover:bg-gray-100\">\n                                        <td class=\"p-2 border-t\">{{ field.title }}</td>\n                                        <td class=\"p-2 border-t\">{{ field.type }}</td>\n                                        <td class=\"p-2 border-t\">{{ field.isRequired ? 'Yes' : 'No' }}</td>\n                                        <td class=\"p-2 border-t text-right\">\n                                            <div class=\"flex gap-3 justify-end\">\n                                                <button class=\"btn btn-sm btn-outline-primary\" \n                                                        (click)=\"editField(section.id, field); $event.stopPropagation()\">\n                                                    Edit\n                                                </button>\n                                                <button class=\"btn btn-sm btn-outline-danger\" \n                                                        (click)=\"deleteField(section.id, field.id); $event.stopPropagation()\">\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <button class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mt-2 ml-2\" \n                                    (click)=\"openAddFieldModal(section.id); $event.stopPropagation()\">\n                                + Add Field\n                            </button>\n                        </td>\n                    </tr>\n                </ng-container>\n            </tbody>\n        </table>\n\n        <!-- Add Section Button -->\n        <button class=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-4\" (click)=\"openAddSectionModal()\">Add Section</button>\n\n        <div class=\"mt-4\">\n            <a href=\"/list\" class=\"text-blue-500 hover:underline\">Back to List</a>\n        </div>\n    </div>\n</div>\n\n<!-- Keep all modals EXACTLY as they are in your original code -->\n<!-- Add/Edit Section Modal -->\n<modal #addSectionModal class=\"no-footer\">\n    <ng-template #modalHeader>\n        <div class=\"!font-medium\">{{ sectionParams.controls['id'].value ? 'Edit Section' : 'Add Section' }}</div>\n    </ng-template>\n    <ng-template #modalBody>\n        <form [formGroup]=\"sectionParams\" (ngSubmit)=\"saveSection()\">\n            <div class=\"mb-5\">\n                <label for=\"sectionTitle\">Title</label>\n                <input id=\"sectionTitle\" type=\"text\" class=\"form-input\" formControlName=\"title\" placeholder=\"Enter Title\" />\n                <div *ngIf=\"sectionParams.controls['title'].invalid && sectionParams.controls['title'].touched\" class=\"text-red-500\">\n                    <div *ngIf=\"sectionParams.controls['title'].errors?.['required']\">Title is required.</div>\n                </div>\n            </div>\n            <div class=\"mb-5\">\n                <label>Type</label>\n                <div>\n                    <label>\n                        <input type=\"radio\" formControlName=\"type\" value=\"form\" /> Form\n                    </label>\n                    <label>\n                        <input type=\"radio\" formControlName=\"type\" value=\"table\" /> Table\n                    </label>\n                </div>\n            </div>\n            <div class=\"mt-8 flex items-center justify-end\">\n                <button type=\"button\" class=\"btn btn-outline-danger\" (click)=\"addSectionModal.close()\">Cancel</button>\n                <button type=\"submit\" class=\"btn btn-primary ltr:ml-4 rtl:ml-4\">Save</button>\n            </div>\n        </form>\n    </ng-template>\n</modal>\n\n<!-- Add/Edit Field Modal -->\n<modal #addFieldModal class=\"no-footer\">\n    <ng-template #modalHeader>\n        <div class=\"!font-medium\">{{ fieldParams.controls['id'].value ? 'Edit Field' : 'Add Field' }}</div>\n    </ng-template>\n    <ng-template #modalBody>\n        <form [formGroup]=\"fieldParams\" (ngSubmit)=\"saveField()\">\n            <div class=\"mb-5\">\n                <label for=\"fieldTitle\">Title</label>\n                <input id=\"fieldTitle\" type=\"text\" class=\"form-input\" formControlName=\"title\" placeholder=\"Enter Title\" />\n                <div *ngIf=\"fieldParams.controls['title'].invalid && fieldParams.controls['title'].touched\" class=\"text-red-500\">\n                    <div *ngIf=\"fieldParams.controls['title'].errors?.['required']\">Title is required.</div>\n                </div>\n            </div>\n            <div class=\"mb-5\">\n                <label for=\"fieldType\">Type</label>\n                <select id=\"fieldType\" class=\"form-select\" formControlName=\"type\">\n                    <option value=\"Text\">Text</option>\n                    <option value=\"Number\">Number</option>\n                    <option value=\"Date\">Date</option>\n                    <option value=\"Boolean\">Boolean</option>\n                </select>\n            </div>\n            <div class=\"mb-5\">\n                <label for=\"isRequired\">Required</label>\n                <input id=\"isRequired\" type=\"checkbox\" formControlName=\"isRequired\" />\n            </div>\n            <div class=\"mt-8 flex items-center justify-end\">\n                <button type=\"button\" class=\"btn btn-outline-danger\" (click)=\"addFieldModal.close()\">Cancel</button>\n                <button type=\"submit\" class=\"btn btn-primary ltr:ml-4 rtl:ml-4\">Save</button>\n            </div>\n        </form>\n    </ng-template>\n</modal>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}