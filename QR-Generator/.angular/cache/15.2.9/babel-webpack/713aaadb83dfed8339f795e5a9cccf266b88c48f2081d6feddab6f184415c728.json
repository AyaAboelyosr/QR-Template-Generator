{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, tap } from 'rxjs';\nlet AuthService = class AuthService {\n  constructor(http, r) {\n    this.http = http;\n    this.r = r;\n    this.apiUrl = 'https://localhost:7110/api/Authenticate';\n    this.isLoggedInSubject = new BehaviorSubject(this.checkLoginStatus());\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}/login`, data).pipe(tap(response => {\n      if (response?.token) {\n        localStorage.setItem('authToken', response.token);\n        localStorage.setItem('role', response.role); // Assuming the API returns user role\n        localStorage.setItem('userName', response.name); // Store username\n        this.setLoginStatus(true);\n        // Redirect based on role\n        if (response.role === 'Admin') {\n          this.router.navigate(['/admin']);\n        } else if (response.role === 'Application User') {\n          this.router.navigate(['/QRCodeGenerator']);\n        } else {\n          this.router.navigate(['/auth/login']); // Default redirect\n        }\n      }\n    }));\n  }\n\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role) {\n    localStorage.setItem('role', role);\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  logout() {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n    localStorage.removeItem('userName'); // Optionally remove the username as well\n  }\n\n  checkAuthenticationState() {\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n  getUserName() {\n    return localStorage.getItem('userName'); // Adjust this based on your storage mechanism\n  }\n\n  getAuthHeaders() {\n    const token = localStorage.getItem('authToken'); // Adjust this based on how you store the token\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  }\n  setLoginStatus(isLoggedIn) {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n  checkLoginStatus() {\n    return !!localStorage.getItem('role');\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":"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","names":["Injectable","BehaviorSubject","tap","AuthService","constructor","http","r","checkLoginStatus","isLoggedInSubject","asObservable","login","data","post","apiUrl","pipe","response","token","localStorage","setItem","role","name","setLoginStatus","router","navigate","register","setRole","getRole","getItem","logout","removeItem","checkAuthenticationState","getUserName","getAuthHeaders","Authorization","isLoggedIn","next","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:7110/api/Authenticate';\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.checkLoginStatus());\n  isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient , private r) {}\n\n  login(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, data).pipe(\n      tap((response: any) => {\n        if (response?.token) {\n          localStorage.setItem('authToken', response.token);\n          localStorage.setItem('role', response.role); // Assuming the API returns user role\n          localStorage.setItem('userName', response.name); // Store username\n\n          this.setLoginStatus(true);\n          \n          // Redirect based on role\n          if (response.role === 'Admin') {\n            this.router.navigate(['/admin']);\n          } else if (response.role === 'Application User') {\n            this.router.navigate(['/QRCodeGenerator']);\n          } else {\n            this.router.navigate(['/auth/login']); // Default redirect\n          }\n        }\n      })\n    );\n  }\n\n  register(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, data); // Ensure this endpoint exists in the backend\n  }\n\n  setRole(role: string) {\n    localStorage.setItem('role', role);\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n\n  logout(): void {\n    localStorage.removeItem('role');\n    this.setLoginStatus(false);\n    localStorage.removeItem('userName');  // Optionally remove the username as well\n  }\n\n  checkAuthenticationState() {\n    this.setLoginStatus(this.checkLoginStatus());\n  }\n\n  getUserName(): string | null {\n    return localStorage.getItem('userName');  // Adjust this based on your storage mechanism\n  }\n\n  getAuthHeaders(): { [key: string]: string } {\n    const token = localStorage.getItem('authToken');  // Adjust this based on how you store the token\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n\n  private setLoginStatus(isLoggedIn: boolean): void {\n    this.isLoggedInSubject.next(isLoggedIn);\n  }\n\n  private checkLoginStatus(): boolean {\n    return !!localStorage.getItem('role');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}