{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction SectionComponent_div_6_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getErrorMessage(field_r3.id.toString()), \" \");\n  }\n}\nfunction SectionComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"label\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 10);\n    i0.ɵɵtemplate(4, SectionComponent_div_6_div_1_div_4_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(field_r3.fieldTitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", field_r3.id.toString())(\"type\", ctx_r2.getFieldType(field_r3.fieldType))(\"placeholder\", field_r3.fieldDescription);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showError(field_r3.id.toString()));\n  }\n}\nfunction SectionComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, SectionComponent_div_6_div_1_Template, 5, 5, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.sectionFormGroup);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.section.fields);\n  }\n}\nfunction SectionComponent_div_7_th_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(field_r8.fieldTitle);\n  }\n}\nfunction SectionComponent_div_7_tr_8_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelement(1, \"input\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r12 = ctx.$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", field_r12.id.toString())(\"type\", ctx_r11.getFieldType(field_r12.fieldType));\n  }\n}\nfunction SectionComponent_div_7_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 6);\n    i0.ɵɵtemplate(1, SectionComponent_div_7_tr_8_td_1_Template, 2, 2, \"td\", 15);\n    i0.ɵɵelementStart(2, \"td\")(3, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function SectionComponent_div_7_tr_8_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const i_r10 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.removeTableRow(i_r10));\n    });\n    i0.ɵɵtext(4, \"Remove\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const row_r9 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r7.getRowAsFormGroup(row_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.section.fields);\n  }\n}\nfunction SectionComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"table\", 14)(2, \"thead\")(3, \"tr\");\n    i0.ɵɵtemplate(4, SectionComponent_div_7_th_4_Template, 2, 1, \"th\", 15);\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"tbody\");\n    i0.ɵɵtemplate(8, SectionComponent_div_7_tr_8_Template, 5, 2, \"tr\", 16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function SectionComponent_div_7_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.addTableRow());\n    });\n    i0.ɵɵtext(10, \" Add Row \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.section.fields);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sectionFormArray.controls);\n  }\n}\nexport class SectionComponent {\n  ngOnInit() {\n    if (this.isTableSection) {\n      this.handleTableInitialization();\n    } else {\n      this.handleFormInitialization();\n    }\n  }\n  handleTableInitialization() {\n    while (this.sectionFormArray.length > 0) {\n      this.sectionFormArray.removeAt(0); // Clear existing rows\n    }\n\n    if (this.existingData?.rows) {\n      this.existingData.rows.forEach(row => this.addTableRow(row)); // Add rows with existing `rowIndex`\n    } else {\n      this.addTableRow(); // Add a new row with a generated `rowIndex`\n    }\n  }\n\n  handleFormInitialization() {\n    if (this.existingData?.values) {\n      this.sectionFormGroup.patchValue(this.existingData.values);\n    }\n  }\n  addTableRow(initialData) {\n    const row = this.createTableRow(initialData?.rowIndex); // Use existing `rowIndex` or generate a new one\n    if (initialData) {\n      this.section.fields.forEach(field => {\n        const fieldValue = initialData[field.id.toString()] || '';\n        row.get(field.id.toString())?.setValue(fieldValue);\n      });\n    }\n    this.sectionFormArray.push(row);\n  }\n  get sectionFormGroup() {\n    return this.parentForm.get(`section_${this.section.id}`);\n  }\n  get sectionFormArray() {\n    return this.parentForm.get(`table_${this.section.id}`);\n  }\n  get isTableSection() {\n    return this.section.sectionType === 1;\n  }\n  getFieldType(fieldType) {\n    switch (fieldType) {\n      case 1:\n        return 'number';\n      case 2:\n        return 'date';\n      case 3:\n        return 'checkbox';\n      default:\n        return 'text';\n    }\n  }\n  removeTableRow(index) {\n    if (this.sectionFormArray.length > 1) {\n      this.sectionFormArray.removeAt(index);\n    }\n  }\n  createTableRow(existingrowIndex) {\n    const row = new FormGroup({\n      // Add rowIndex control with either existing ID or generate new one\n      rowIndex: new FormControl(existingrowIndex || crypto.randomUUID())\n    });\n    this.section.fields.forEach(field => {\n      row.addControl(field.id.toString(), new FormControl('', this.getValidators(field)));\n    });\n    return row;\n  }\n  getRowAsFormGroup(control) {\n    return control;\n  }\n  getValidators(field) {\n    const validators = [];\n    if (field.isRequired) validators.push(Validators.required);\n    if (field.fieldType === 1) validators.push(Validators.pattern(/^-?\\d+$/));\n    return validators;\n  }\n  showError(fieldId) {\n    const control = this.getControl(fieldId);\n    return control.invalid && (control.dirty || control.touched);\n  }\n  getErrorMessage(fieldId) {\n    const control = this.getControl(fieldId);\n    if (!control.errors) return '';\n    if (control.errors['required']) return 'This field is required';\n    if (control.errors['pattern']) return 'Invalid format';\n    return 'Invalid value';\n  }\n  getControl(fieldId) {\n    if (this.isTableSection) {\n      const firstRow = this.sectionFormArray.at(0);\n      return firstRow?.get(fieldId) ?? new FormControl('');\n    }\n    return this.sectionFormGroup.get(fieldId);\n  }\n  static #_ = this.ɵfac = function SectionComponent_Factory(t) {\n    return new (t || SectionComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SectionComponent,\n    selectors: [[\"app-section\"]],\n    inputs: {\n      section: \"section\",\n      parentForm: \"parentForm\",\n      existingData: \"existingData\"\n    },\n    decls: 8,\n    vars: 4,\n    consts: [[1, \"space-y-6\", \"p-6\", \"border\", \"rounded-lg\", \"bg-white\", \"dark:bg-[#1b2e4b]\"], [1, \"border-b\", \"pb-4\", \"border-[#e0e6ed]\", \"dark:border-[#1b2e4b]\"], [1, \"text-lg\", \"font-semibold\", \"text-black\", \"dark:text-white\"], [1, \"text-sm\", \"text-gray-600\", \"dark:text-gray-400\", \"mt-1\"], [3, \"formGroup\", 4, \"ngIf\"], [\"class\", \"space-y-6\", 4, \"ngIf\"], [3, \"formGroup\"], [\"class\", \"space-y-3 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"space-y-3\", \"mb-4\"], [1, \"block\", \"text-sm\", \"font-medium\", \"text-black\", \"dark:text-white\", \"mb-1\"], [1, \"w-full\", \"p-3\", \"border\", \"rounded-md\", \"form-input\", \"focus:ring-2\", \"focus:ring-blue-500\", \"focus:border-blue-500\", 3, \"formControlName\", \"type\", \"placeholder\"], [\"class\", \"text-red-500 text-sm mt-1\", 4, \"ngIf\"], [1, \"text-red-500\", \"text-sm\", \"mt-1\"], [1, \"space-y-6\"], [1, \"w-full\", \"border-collapse\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroup\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"px-4\", \"py-2\", \"text-sm\", \"bg-green-600\", \"text-white\", \"rounded\", \"hover:bg-green-700\", 3, \"click\"], [\"type\", \"button\", 3, \"click\"], [1, \"form-input\", 3, \"formControlName\", \"type\"]],\n    template: function SectionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, SectionComponent_div_6_Template, 2, 2, \"div\", 4);\n        i0.ɵɵtemplate(7, SectionComponent_div_7_Template, 11, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.section.sectionTitle);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.section.sectionDescription);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isTableSection);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isTableSection);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZWN0aW9uLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXJnZW5lcmF0b3IvQ29tcG9uZW50cy9zZWN0aW9uL3NlY3Rpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0tBQW9LIiwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","SectionComponent","ngOnInit","isTableSection","handleTableInitialization","handleFormInitialization","sectionFormArray","length","removeAt","existingData","rows","forEach","row","addTableRow","values","sectionFormGroup","patchValue","initialData","createTableRow","rowIndex","section","fields","field","fieldValue","id","toString","get","setValue","push","parentForm","sectionType","getFieldType","fieldType","removeTableRow","index","existingrowIndex","crypto","randomUUID","addControl","getValidators","getRowAsFormGroup","control","validators","isRequired","required","pattern","showError","fieldId","getControl","invalid","dirty","touched","getErrorMessage","errors","firstRow","at","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\Components\\section\\section.component.ts","C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\Components\\section\\section.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { QRTemplateSection } from '../../viewmodels/qrtemplate-section';\r\nimport { QRTemplateSectionField } from '../../viewmodels/qrtemplate-section-field';\r\nimport { RecordPreviewSection } from '../../viewmodels/record-preview-section';\r\nimport { Console } from 'console';\r\n\r\n@Component({\r\n  selector: 'app-section',\r\n  templateUrl: './section.component.html',\r\n  styleUrls: ['./section.component.css']\r\n})\r\nexport class SectionComponent implements OnInit {\r\n  @Input() section!: QRTemplateSection;\r\n  @Input() parentForm!: FormGroup;\r\n  @Input() existingData?: RecordPreviewSection;\r\n\r\n  ngOnInit() {\r\n    if (this.isTableSection) {\r\n      this.handleTableInitialization();\r\n    } else {\r\n      this.handleFormInitialization();\r\n    }\r\n  }\r\n\r\n  private handleTableInitialization(): void {\r\n    while (this.sectionFormArray.length > 0) {\r\n      this.sectionFormArray.removeAt(0); // Clear existing rows\r\n    }\r\n  \r\n    if (this.existingData?.rows) {\r\n      this.existingData.rows.forEach(row => this.addTableRow(row)); // Add rows with existing `rowIndex`\r\n    } else {\r\n      this.addTableRow(); // Add a new row with a generated `rowIndex`\r\n    }\r\n  }\r\n\r\n  private handleFormInitialization(): void {\r\n    if (this.existingData?.values) {\r\n      this.sectionFormGroup.patchValue(this.existingData.values);\r\n    }\r\n  }\r\n\r\n  addTableRow(initialData?: any): void {\r\n    const row = this.createTableRow(initialData?.rowIndex); // Use existing `rowIndex` or generate a new one\r\n\r\n  if (initialData) {\r\n    this.section.fields.forEach(field => {\r\n      const fieldValue = initialData[field.id.toString()] || '';\r\n      row.get(field.id.toString())?.setValue(fieldValue);\r\n    });\r\n  }\r\n\r\n  this.sectionFormArray.push(row);\r\n  }\r\n\r\n  get sectionFormGroup(): FormGroup {\r\n    return this.parentForm.get(`section_${this.section.id}`) as FormGroup;\r\n  }\r\n\r\n  get sectionFormArray(): FormArray {\r\n    return this.parentForm.get(`table_${this.section.id}`) as FormArray;\r\n  }\r\n\r\n  get isTableSection(): boolean {\r\n    return this.section.sectionType === 1;\r\n  }\r\n\r\n  getFieldType(fieldType: number): string {\r\n    switch(fieldType) {\r\n      case 1: return 'number';\r\n      case 2: return 'date';\r\n      case 3: return 'checkbox';\r\n      default: return 'text';\r\n    }\r\n  }\r\n\r\n  removeTableRow(index: number): void {\r\n    if (this.sectionFormArray.length > 1) {\r\n      this.sectionFormArray.removeAt(index);\r\n    }\r\n  }\r\n\r\n  private createTableRow(existingrowIndex?: string): FormGroup {\r\n    const row = new FormGroup<{ [key: string]: AbstractControl<any, any> }>({\r\n      // Add rowIndex control with either existing ID or generate new one\r\n      rowIndex: new FormControl(existingrowIndex || crypto.randomUUID())\r\n    });\r\n\r\n    this.section.fields.forEach(field => {\r\n      row.addControl(\r\n        field.id.toString(),\r\n        new FormControl('', this.getValidators(field))\r\n      );\r\n    });\r\n    return row;\r\n  }\r\n\r\n  getRowAsFormGroup(control: AbstractControl): FormGroup {\r\n    return control as FormGroup;\r\n  }\r\n\r\n  private getValidators(field: QRTemplateSectionField): ValidatorFn[] {\r\n    const validators: ValidatorFn[] = [];\r\n    if (field.isRequired) validators.push(Validators.required);\r\n    if (field.fieldType === 1) validators.push(Validators.pattern(/^-?\\d+$/));\r\n    return validators;\r\n  }\r\n\r\n  showError(fieldId: string): boolean {\r\n    const control = this.getControl(fieldId);\r\n    return control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  getErrorMessage(fieldId: string): string {\r\n    const control = this.getControl(fieldId);\r\n    if (!control.errors) return '';\r\n    \r\n    if (control.errors['required']) return 'This field is required';\r\n    if (control.errors['pattern']) return 'Invalid format';\r\n    return 'Invalid value';\r\n  }\r\n\r\n  private getControl(fieldId: string): FormControl {\r\n    if (this.isTableSection) {\r\n      const firstRow = this.sectionFormArray.at(0);\r\n      return firstRow?.get(fieldId) as FormControl ?? new FormControl('');\r\n    }\r\n    return this.sectionFormGroup.get(fieldId) as FormControl;\r\n  }\r\n}","<div class=\"space-y-6 p-6 border rounded-lg bg-white dark:bg-[#1b2e4b]\">\r\n  <!-- Section Header -->\r\n  <div class=\"border-b pb-4 border-[#e0e6ed] dark:border-[#1b2e4b]\">\r\n      <h2 class=\"text-lg font-semibold text-black dark:text-white\">{{ section.sectionTitle }}</h2>\r\n      <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{{ section.sectionDescription }}</p>\r\n  </div>\r\n\r\n  <!-- Form Section -->\r\n  <div *ngIf=\"!isTableSection\" [formGroup]=\"sectionFormGroup\">\r\n      <div *ngFor=\"let field of section.fields\" class=\"space-y-3 mb-4\">\r\n          <label class=\"block text-sm font-medium text-black dark:text-white mb-1\">{{ field.fieldTitle }}</label>\r\n          <input\r\n              [formControlName]=\"field.id.toString()\"\r\n              [type]=\"getFieldType(field.fieldType)\"\r\n              [placeholder]=\"field.fieldDescription\"\r\n              class=\"w-full p-3 border rounded-md form-input focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n          />\r\n          <div *ngIf=\"showError(field.id.toString())\" class=\"text-red-500 text-sm mt-1\">\r\n              {{ getErrorMessage(field.id.toString()) }}\r\n          </div>\r\n      </div>\r\n  </div>\r\n\r\n  <!-- Table Section -->\r\n  <div *ngIf=\"isTableSection\" class=\"space-y-6\">\r\n      <table class=\"w-full border-collapse\">\r\n          <!-- <thead>\r\n              <tr>\r\n                  <th *ngFor=\"let field of section.fields\" class=\"border p-3 text-left text-black dark:text-white\">\r\n                      {{ field.fieldTitle }}\r\n                  </th>\r\n                  <th class=\"border p-3 text-black dark:text-white\">Actions</th>\r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n              <tr \r\n                  *ngFor=\"let row of sectionFormArray.controls; let i = index\" \r\n                  [formGroup]=\"getRowAsFormGroup(row)\"\r\n                  class=\"hover:bg-gray-50 dark:hover:bg-[#1b2e4b]\"\r\n              >\r\n                  <td *ngFor=\"let field of section.fields\" class=\"border p-3\">\r\n                      <input\r\n                          [formControlName]=\"field.id.toString()\"\r\n                          [type]=\"getFieldType(field.fieldType)\"\r\n                          [placeholder]=\"field.fieldDescription || ''\"\r\n                          class=\"w-full p-2 border rounded form-input focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                      />\r\n                  </td>\r\n                  <td class=\"border p-3\">\r\n                      <button\r\n                          type=\"button\"\r\n                          (click)=\"removeTableRow(i)\"\r\n                          class=\"text-red-600 hover:text-red-800\"\r\n                      >\r\n                          Remove\r\n                      </button>\r\n                  </td>\r\n              </tr>\r\n          </tbody> -->\r\n          <thead>\r\n            <tr>\r\n              \r\n              <th *ngFor=\"let field of section.fields\">{{ field.fieldTitle }}</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr *ngFor=\"let row of sectionFormArray.controls; let i = index\" [formGroup]=\"getRowAsFormGroup(row)\">\r\n              \r\n              <td *ngFor=\"let field of section.fields\">\r\n                <input\r\n                  [formControlName]=\"field.id.toString()\"\r\n                  [type]=\"getFieldType(field.fieldType)\"\r\n                  class=\"form-input\"\r\n                />\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" (click)=\"removeTableRow(i)\">Remove</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n      </table>\r\n\r\n      <button\r\n          type=\"button\"\r\n          (click)=\"addTableRow()\"\r\n          class=\"px-4 py-2 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\r\n      >\r\n          Add Row\r\n      </button>\r\n  </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}