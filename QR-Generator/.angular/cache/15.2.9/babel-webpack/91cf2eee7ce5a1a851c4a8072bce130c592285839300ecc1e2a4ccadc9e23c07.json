{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./record.service\";\nimport * as i5 from \"./template-service\";\nexport class FormService {\n  constructor(http, router, fb, recordService, templateService) {\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.recordService = recordService;\n    this.templateService = templateService;\n    this.template = null;\n    this.formData = null;\n    this.recordId = null;\n    this.STORAGE_KEY = 'previewData';\n    this.editModeState = {\n      isEditMode: false,\n      recordId: null\n    };\n    this.form = this.fb.group({});\n  }\n  saveFormData(form, template) {\n    if (!form.valid || !template) {\n      return false;\n    }\n    const fields = [];\n    template.sections.forEach(section => {\n      if (section.sectionType === 0) {\n        // Form section\n        const sectionData = form.get(`section_${section.id}`)?.value;\n        if (sectionData) {\n          Object.keys(sectionData).forEach(fieldId => {\n            fields.push({\n              sectionId: section.id,\n              fieldId: parseInt(fieldId),\n              value: sectionData[fieldId]?.toString() || ''\n            });\n          });\n        }\n      } else if (section.sectionType === 1) {\n        // Table section\n        const tableData = form.get(`table_${section.id}`)?.value;\n        if (Array.isArray(tableData)) {\n          tableData.forEach(row => {\n            // Use existing rowIndex or generate a new one\n            const rowIndex = row.rowIndex || crypto.randomUUID();\n            Object.keys(row).forEach(fieldId => {\n              if (fieldId !== 'rowIndex') {\n                // Skip the rowIndex field itself\n                fields.push({\n                  sectionId: section.id,\n                  fieldId: parseInt(fieldId),\n                  value: row[fieldId]?.toString() || '',\n                  rowIndex: rowIndex\n                });\n              }\n            });\n          });\n        }\n      }\n    });\n    const submission = {\n      templateId: template.id,\n      fields: fields\n    };\n    this.recordService.createRecord(submission).subscribe({\n      next: response => {\n        return true;\n      },\n      error: error => {\n        console.error('Error saving form data', error);\n        return false;\n      }\n    });\n    return true;\n  }\n  updateFormData(recordId, form, template) {\n    if (!form.valid || !template) {\n      return false;\n    }\n    const updateData = {\n      recordId: recordId,\n      templateId: template.id,\n      fields: this.getAllFieldValues(form, template)\n    };\n    this.recordService.updateRecord(updateData).subscribe({\n      next: response => {\n        this.clearStoredData(); // Clear stored data after successful update\n        return true;\n      },\n      error: error => {\n        console.error('Error updating record', error);\n        return false;\n      }\n    });\n    return true;\n  }\n  getAllFieldValues(form, template) {\n    const result = [];\n    if (!template) {\n      return result;\n    }\n    template.sections.forEach(section => {\n      if (section.sectionType === 0) {\n        // Form section\n        const sectionGroup = form.get(`section_${section.id}`);\n        if (sectionGroup) {\n          section.fields.forEach(field => {\n            const value = sectionGroup.get(field.id.toString())?.value;\n            if (value !== null && value !== undefined) {\n              result.push({\n                sectionId: section.id,\n                fieldId: field.id,\n                value: value.toString()\n              });\n            }\n          });\n        }\n      } else if (section.sectionType === 1) {\n        // Table section\n        const tableArray = form.get(`table_${section.id}`);\n        if (tableArray) {\n          tableArray.controls.forEach(rowGroup => {\n            const rowIndex = rowGroup.get('rowIndex')?.value || crypto.randomUUID();\n            section.fields.forEach(field => {\n              const value = rowGroup.get(field.id.toString())?.value;\n              if (value !== null && value !== undefined) {\n                result.push({\n                  sectionId: section.id,\n                  fieldId: field.id,\n                  value: value.toString(),\n                  rowIndex: rowIndex\n                });\n              }\n            });\n          });\n        }\n      }\n    });\n    return result;\n  }\n  navigateToPreview(recordId) {\n    this.recordId = recordId;\n    this.recordService.getRecordPreview(recordId).subscribe({\n      next: previewData => {\n        this.templateService.getTemplateById(previewData.templateId).subscribe({\n          next: template => {\n            this.setTemplate(template); // Set template first\n            // Then set form data\n            this.setFormData({\n              sections: previewData.sections.map(section => ({\n                sectionTitle: section.sectionTitle,\n                isTableSection: section.isTableSection,\n                fields: section.fields,\n                values: section.values,\n                rows: section.rows\n              }))\n            });\n            this.router.navigate(['/preview'], {\n              state: {\n                recordId: previewData.recordId,\n                existingData: previewData,\n                isEditMode: true\n              }\n            });\n          },\n          error: error => {\n            console.error('Failed to fetch template data', error);\n          }\n        });\n      },\n      error: error => {\n        console.error('Failed to fetch preview data', error);\n      }\n    });\n  }\n  setFormData(data) {\n    this.formData = data;\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify({\n      formData: data,\n      template: this.template,\n      recordId: this.recordId\n    }));\n  }\n  getFormData() {\n    if (!this.formData) {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.formData = data.formData;\n        this.template = data.template;\n        this.recordId = data.recordId;\n      }\n    }\n    return this.formData;\n  }\n  setFormGroup(form) {\n    this.form = form;\n  }\n  getFormGroup() {\n    return this.form;\n  }\n  setTemplate(template) {\n    this.template = template;\n    // store in localStorage for persistence\n    localStorage.setItem('currentTemplate', JSON.stringify(template));\n  }\n  getTemplate() {\n    if (!this.template) {\n      // Try to get from localStorage\n      const stored = localStorage.getItem('currentTemplate');\n      if (stored) {\n        this.template = JSON.parse(stored);\n      }\n    }\n    return this.template;\n  }\n  setEditMode(isEditMode, recordId) {\n    this.editModeState = {\n      isEditMode,\n      recordId\n    };\n    localStorage.setItem('editModeState', JSON.stringify(this.editModeState));\n  }\n  getEditMode() {\n    if (this.editModeState.isEditMode) {\n      return this.editModeState;\n    }\n    const stored = localStorage.getItem('editModeState');\n    if (stored) {\n      this.editModeState = JSON.parse(stored);\n      return this.editModeState;\n    }\n    return {\n      isEditMode: false,\n      recordId: null\n    };\n  }\n  clearEditMode() {\n    this.editModeState = {\n      isEditMode: false,\n      recordId: null\n    };\n    localStorage.removeItem('editModeState');\n  }\n  clearStoredData() {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem('currentTemplate');\n    this.formData = null;\n    this.template = null;\n    this.form = this.fb.group({});\n  }\n  clearAllData() {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem('currentTemplate');\n    localStorage.removeItem('editModeState');\n    this.formData = null;\n    this.template = null;\n    this.recordId = null;\n    this.form = this.fb.group({});\n  }\n  static #_ = this.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.FormBuilder), i0.ɵɵinject(i4.RecordService), i0.ɵɵinject(i5.TemplateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["FormService","constructor","http","router","fb","recordService","templateService","isEditMode","recordId","form","group","saveFormData","template","valid","fields","sections","forEach","section","sectionType","sectionData","get","id","value","Object","keys","fieldId","push","sectionId","parseInt","toString","tableData","Array","isArray","row","rowIndex","crypto","randomUUID","submission","templateId","createRecord","subscribe","next","response","error","console","updateFormData","updateData","getAllFieldValues","updateRecord","clearStoredData","result","sectionGroup","field","undefined","tableArray","controls","rowGroup","navigateToPreview","getRecordPreview","previewData","getTemplateById","setTemplate","setFormData","map","sectionTitle","isTableSection","values","rows","navigate","state","existingData","data","formData","localStorage","setItem","STORAGE_KEY","JSON","stringify","getFormData","stored","getItem","parse","setFormGroup","getFormGroup","getTemplate","setEditMode","editModeState","getEditMode","clearEditMode","removeItem","clearAllData","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\services\\form.service.ts"],"sourcesContent":["import { HttpClient} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FieldSubmission } from '../viewmodels/field-submission';\nimport { QRTemplate } from '../viewmodels/qrtemplate';\nimport { RecordService } from './record.service';\nimport { TemplateService } from './template-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  \n  template: QRTemplate | null = null;\n  form: FormGroup;\n  formData: FormData | null = null;\n  recordId: number | null = null;\n  private readonly STORAGE_KEY = 'previewData';\n\n  constructor(private http: HttpClient,\n    private router: Router,\n    private fb: FormBuilder,\n    private recordService: RecordService,\n    private templateService: TemplateService,\n  ) {\n    this.form = this.fb.group({});\n  }\n  saveFormData(form: FormGroup, template: QRTemplate | null): boolean {\n    if (!form.valid || !template) {\n      return false;\n    }\n    const fields: FieldSubmission[] = [];\n    template.sections.forEach(section => {\n      if (section.sectionType === 0) { // Form section\n        const sectionData = form.get(`section_${section.id}`)?.value;\n        if (sectionData) {\n          Object.keys(sectionData).forEach(fieldId => {\n            fields.push({\n              sectionId: section.id,\n              fieldId: parseInt(fieldId),\n              value: sectionData[fieldId]?.toString() || ''\n            });\n          });\n        }\n      } else if (section.sectionType === 1) { // Table section\n        const tableData = form.get(`table_${section.id}`)?.value;\n        if (Array.isArray(tableData)) {\n          tableData.forEach((row) => {\n            // Use existing rowIndex or generate a new one\n            const rowIndex = row.rowIndex || crypto.randomUUID();\n            Object.keys(row).forEach(fieldId => {\n              if (fieldId !== 'rowIndex') { // Skip the rowIndex field itself\n                fields.push({\n                  sectionId: section.id,\n                  fieldId: parseInt(fieldId),\n                  value: row[fieldId]?.toString() || '',\n                  rowIndex: rowIndex\n                });\n              }\n            });\n          });\n        }\n      }\n    });\n\n    const submission = {\n      templateId: template.id,\n      fields: fields\n    };\n    \n    this.recordService.createRecord(submission).subscribe({\n      next: (response) => {\n        \n        return true;\n      },\n      error: (error) => {\n        console.error('Error saving form data', error);\n        return false;\n      }\n    });\n\n    return true;\n  }\n\n  updateFormData(recordId: number, form: FormGroup, template: QRTemplate | null): boolean {\n    if (!form.valid || !template) {\n      return false;\n    }\n\n    const updateData = {\n      recordId: recordId,\n      templateId: template.id,\n      fields: this.getAllFieldValues(form, template)\n    };\n    this.recordService.updateRecord(updateData).subscribe({\n      next: (response) => {\n        \n        this.clearStoredData(); // Clear stored data after successful update\n        return true;\n      },\n      error: (error) => {\n        console.error('Error updating record', error);\n        return false;\n      }\n    });\n\n    return true;\n  }\n\n  private getAllFieldValues(form: FormGroup, template: QRTemplate): FieldSubmission[] {\n    const result: FieldSubmission[] = [];\n    if (!template) {\n      return result;\n    }\n\n    template.sections.forEach(section => {\n      if (section.sectionType === 0) { // Form section\n        const sectionGroup = form.get(`section_${section.id}`);\n        if (sectionGroup) {\n          section.fields.forEach(field => {\n            const value = sectionGroup.get(field.id.toString())?.value;\n            if (value !== null && value !== undefined) {\n              result.push({\n                sectionId: section.id,\n                fieldId: field.id,\n                value: value.toString()\n              });\n            }\n          });\n        }\n      } else if (section.sectionType === 1) { // Table section\n        const tableArray = form.get(`table_${section.id}`) as FormArray;\n        if (tableArray) {\n          tableArray.controls.forEach((rowGroup: AbstractControl) => {\n            \n            const rowIndex = (rowGroup as FormGroup).get('rowIndex')?.value || crypto.randomUUID();\n\n            section.fields.forEach(field => {\n              const value = rowGroup.get(field.id.toString())?.value;\n              if (value !== null && value !== undefined) {\n                result.push({\n                  sectionId: section.id,\n                  fieldId: field.id,\n                  value: value.toString(),\n                  rowIndex: rowIndex\n                });\n              }\n            });\n          });\n        }\n      }\n    });\n\n    return result;\n  }\n\n  navigateToPreview(recordId: number) {\n    this.recordId = recordId;\n    this.recordService.getRecordPreview(recordId).subscribe({\n      next: (previewData) => {\n        this.templateService.getTemplateById(previewData.templateId).subscribe({\n          next: (template) => {\n            this.setTemplate(template); // Set template first\n            \n            // Then set form data\n            this.setFormData({\n              sections: previewData.sections.map(section => ({\n                sectionTitle: section.sectionTitle,\n                isTableSection: section.isTableSection,\n                fields: section.fields,\n                values: section.values,\n                rows: section.rows\n              }))\n            });\n  \n            this.router.navigate(['/preview'], {\n              state: {\n                recordId: previewData.recordId,\n                existingData: previewData,\n                isEditMode: true\n              }\n            });\n          },\n          error: (error) => {\n            console.error('Failed to fetch template data', error);\n          }\n        });\n      },\n      error: (error) => {\n        console.error('Failed to fetch preview data', error);\n      }\n    });\n  }\n\n \n  setFormData(data: any): void {\n    this.formData = data;\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify({\n      formData: data,\n      template: this.template,\n      recordId: this.recordId\n    }));\n  }\n  \n  getFormData(): any {\n    if (!this.formData) {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.formData = data.formData;\n        this.template = data.template;\n        this.recordId = data.recordId;\n       \n      }\n    }\n    \n    return this.formData;\n  }\n\n\n  setFormGroup(form: FormGroup): void {\n    this.form = form;\n  }\n\n  getFormGroup(): FormGroup {\n    return this.form;\n  }\n\n  setTemplate(template: any): void {\n    this.template = template;\n    // store in localStorage for persistence\n    localStorage.setItem('currentTemplate', JSON.stringify(template));\n  }\n\n  getTemplate(): QRTemplate | null {\n    if (!this.template) {\n      // Try to get from localStorage\n      const stored = localStorage.getItem('currentTemplate');\n      if (stored) {\n        this.template = JSON.parse(stored);\n      }\n    }\n    return this.template;\n  }\n  private editModeState: {\n    isEditMode: boolean;\n    recordId: number | null;\n  } = {\n      isEditMode: false,\n      recordId: null\n    };\n\n  \n  setEditMode(isEditMode: boolean, recordId: number | null) {\n    this.editModeState = {\n      isEditMode,\n      recordId\n    };\n    \n    localStorage.setItem('editModeState', JSON.stringify(this.editModeState));\n  }\n\n  getEditMode() {\n    \n    if (this.editModeState.isEditMode) {\n      return this.editModeState;\n    }\n    \n    const stored = localStorage.getItem('editModeState');\n    if (stored) {\n      this.editModeState = JSON.parse(stored);\n      return this.editModeState;\n    }\n    return {\n      isEditMode: false,\n      recordId: null\n    };\n  }\n\n  clearEditMode() {\n    this.editModeState = {\n      isEditMode: false,\n      recordId: null\n    };\n    localStorage.removeItem('editModeState');\n  }\n  clearStoredData(): void {\n   \n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem('currentTemplate');\n    this.formData = null;\n    this.template = null;\n    this.form = this.fb.group({});\n  }\n  \n \n  clearAllData(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem('currentTemplate');\n    localStorage.removeItem('editModeState');\n    this.formData = null;\n    this.template = null;\n    this.recordId = null;\n    this.form = this.fb.group({});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}