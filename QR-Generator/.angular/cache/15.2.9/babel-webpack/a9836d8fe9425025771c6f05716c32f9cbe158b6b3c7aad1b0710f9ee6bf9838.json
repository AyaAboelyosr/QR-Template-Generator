{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class authGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    const isLoggedIn = this.authService.isLoggedIn();\n    const role = this.authService.getRole();\n    if (isLoggedIn) {\n      return true; // ✅ Allow both Admins & Employees\n    }\n\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n  static #_ = this.ɵfac = function authGuard_Factory(t) {\n    return new (t || authGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: authGuard,\n    factory: authGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACT,MAAMC,UAAU,GAAG,IAAI,CAACH,WAAW,CAACG,UAAU,EAAE;IAChD,MAAMC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,OAAO,EAAE;IAEvC,IAAIF,UAAU,EAAE;MACd,OAAO,IAAI,CAAC,CAAC;;;IAGf,IAAI,CAACF,MAAM,CAACK,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO,KAAK;EACd;EAAC;qBAbUR,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAS,SAATT,SAAS;IAAAU,YAFR;EAAM","names":["authGuard","constructor","authService","router","canActivate","isLoggedIn","role","getRole","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\authentication\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class authGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    const isLoggedIn = this.authService.isLoggedIn();\n    const role = this.authService.getRole();\n\n    if (isLoggedIn) {\n      return true; // ✅ Allow both Admins & Employees\n    }\n\n    this.router.navigate(['/auth/login']); // Redirect unauthorized users\n    return false;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}