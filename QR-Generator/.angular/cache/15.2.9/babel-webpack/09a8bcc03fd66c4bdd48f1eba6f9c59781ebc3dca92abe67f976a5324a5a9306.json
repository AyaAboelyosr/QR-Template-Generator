{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/qrtemplategenerator/services/template.service\";\nconst _c0 = [\"addSectionModal\"];\nconst _c1 = [\"addFieldModal\"];\nexport class TemplateDetailsComponent {\n  constructor(fb, templateService) {\n    this.fb = fb;\n    this.templateService = templateService;\n    this.template = {\n      id: 0,\n      title: '',\n      v: '',\n      sections: []\n    };\n    this.sectionUpdated = new EventEmitter();\n    this.selectedTemplateId = null;\n    this.selectedSectionId = null;\n    this.templateList = [];\n    this.initSectionForm();\n    this.initFieldForm();\n  }\n  ngOnInit() {\n    // Any additional logic when the template details component is initialized\n    console.log(this.template); // Log to ensure template data is correctly passed\n  }\n\n  ngOnChanges() {\n    console.log('Template received:', this.template);\n  }\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required]\n    });\n  }\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false]\n    });\n  }\n  // Section methods\n  editSection(templateId, section = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type\n      });\n    }\n  }\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type)\n      };\n      if (section.id) {\n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO).subscribe(() => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template && template.sections) {\n            const existingSection = template.sections.find(s => s.id === section.id);\n            if (existingSection) {\n              Object.assign(existingSection, section);\n            }\n          }\n          this.showMessage('Section has been updated successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        this.templateService.addSection(templateId.toString(), addSectionDTO).subscribe(newSection => {\n          const template = this.templateList.find(t => t.id === templateId);\n          if (template) {\n            if (!template.sections) {\n              template.sections = [];\n            }\n            template.sections.push(newSection);\n          }\n          this.showMessage('Section has been added successfully.');\n          this.addSectionModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    }\n  }\n  mapSectionType(type) {\n    const sectionTypeMap = {\n      'Form': 0,\n      'Table': 1\n    };\n    return sectionTypeMap[type] ?? 0;\n  }\n  handleErrorResponse(error) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n  showMessage(msg, type = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: {\n        container: 'toast'\n      }\n    });\n  }\n  deleteSection(templateId, sectionId) {\n    this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n      const template = this.templateList.find(t => t.id === templateId);\n      if (template && template.sections) {\n        template.sections = template.sections.filter(s => s.id !== sectionId);\n      }\n      this.showMessage('Section has been deleted successfully.');\n    }, error => {\n      this.showMessage(error, 'error');\n    });\n  }\n  loadSections(templateId) {\n    this.templateService.getTemplateById(templateId.toString()).subscribe(template => {\n      const existingTemplate = this.templateList.find(t => t.id === templateId);\n      if (existingTemplate) {\n        existingTemplate.sections = template.sections;\n      }\n    });\n  }\n  getTemplateIdBySectionId(sectionId) {\n    for (const template of this.templateList) {\n      if (template.sections) {\n        for (const section of template.sections) {\n          if (section.id === sectionId) {\n            return template.id;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n  // Field methods\n  editField(section, field = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null;\n    this.addFieldModal.open();\n    this.initFieldForm();\n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired\n      });\n    }\n  }\n  saveField() {\n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n    const field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type),\n        isRequired: field.isRequired\n      };\n      if (field.id != null && field.id !== 0) {\n        // In saveField() update case\n        this.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO).subscribe(updatedField => {\n          // Find and update the local field\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section?.fields) {\n            const index = section.fields.findIndex(f => f.id === updatedField.id);\n            if (index > -1) {\n              section.fields = [...section.fields.slice(0, index), updatedField, ...section.fields.slice(index + 1)];\n            }\n          }\n          this.showMessage('Field updated successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      } else {\n        // In saveField() add case\n        this.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO).subscribe(newField => {\n          // Find and update the local data\n          const template = this.templateList.find(t => t.id === templateId);\n          const section = template?.sections?.find(s => s.id === sectionId);\n          if (section) {\n            if (!section.fields) section.fields = [];\n            section.fields = [...section.fields, newField]; // Immutable update\n          }\n\n          this.showMessage('Field added successfully');\n          this.addFieldModal.close();\n        }, error => this.handleErrorResponse(error));\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  mapFieldType(type) {\n    const fieldTypeMap = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3\n    };\n    return fieldTypeMap[type];\n  }\n  deleteField(section, fieldId) {\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    if (templateId !== undefined) {\n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n  loadFields(section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe(fields => {\n        section.fields = fields;\n      });\n    }\n  }\n  toggleSections(template) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  toggleFields(section) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n  static #_ = this.ɵfac = function TemplateDetailsComponent_Factory(t) {\n    return new (t || TemplateDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TemplateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateDetailsComponent,\n    selectors: [[\"app-template-details\"]],\n    viewQuery: function TemplateDetailsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addSectionModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addFieldModal = _t.first);\n      }\n    },\n    inputs: {\n      template: \"template\"\n    },\n    outputs: {\n      sectionUpdated: \"sectionUpdated\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function TemplateDetailsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"AAAA,SAA+CA,YAAY,QAAS,eAAe;AACnF,SAAiCC,UAAU,QAAQ,gBAAgB;AAEnE,OAAOC,IAAI,MAAM,aAAa;;;;;;AAW9B,OAAM,MAAOC,wBAAwB;EAyBnCC,YAAoBC,EAAe,EAAUC,eAAgC;IAAzD,OAAE,GAAFD,EAAE;IAAuB,oBAAe,GAAfC,eAAe;IAxBnD,aAAQ,GAAa;MAC5BC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,EAAE;MACTC,CAAC,EAAE,EAAE;MACLC,QAAQ,EAAE;KACX;IAES,mBAAc,GAAG,IAAIV,YAAY,EAAQ;IAUnD,uBAAkB,GAAkB,IAAI;IACxC,sBAAiB,GAAkB,IAAI;IACvC,iBAAY,GAAe,EAAE;IAM3B,IAAI,CAACW,eAAe,EAAE;IACtB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAC,QAAQ;IACN;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAE;EAC/B;;EACAC,WAAW;IACTH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACC,QAAQ,CAAC;EAClD;EAGAL,eAAe;IACb,IAAI,CAACO,aAAa,GAAG,IAAI,CAACb,EAAE,CAACc,KAAK,CAAC;MACjCZ,EAAE,EAAE,CAAC,CAAC,CAAC;MACPC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACP,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAACqB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACtFC,IAAI,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACmB,QAAQ;KAC/B,CAAC;EACJ;EAEAR,aAAa;IACX,IAAI,CAACY,WAAW,GAAG,IAAI,CAACnB,EAAE,CAACc,KAAK,CAAC;MAC/BZ,EAAE,EAAE,CAAC,CAAC,CAAC;MACPC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACP,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAACqB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACtFC,IAAI,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACmB,QAAQ,CAAC;MAC/BK,UAAU,EAAE,CAAC,KAAK;KACnB,CAAC;EACJ;EAEA;EACAC,WAAW,CAACC,UAAkB,EAAEC,UAA0B,IAAI;IAC5D,IAAI,CAACC,kBAAkB,GAAGF,UAAU;IACpC,IAAI,CAACG,eAAe,CAACC,IAAI,EAAE;IAC3B,IAAI,CAACpB,eAAe,EAAE;IACtB,IAAIiB,OAAO,EAAE;MACX,IAAI,CAACV,aAAa,CAACc,QAAQ,CAAC;QAC1BzB,EAAE,EAAEqB,OAAO,CAACrB,EAAE;QACdC,KAAK,EAAEoB,OAAO,CAACpB,KAAK;QACpBe,IAAI,EAAEK,OAAO,CAACL;OACf,CAAC;;EAEN;EAEAU,WAAW;IACT,IAAI,IAAI,CAACf,aAAa,CAACgB,OAAO,EAAE;MAC9B,IAAI,CAACC,WAAW,CAAC,kCAAkC,EAAE,OAAO,CAAC;MAC7D;;IAGF,MAAMP,OAAO,GAAY,IAAI,CAACV,aAAa,CAACkB,KAAK;IACjD,MAAMT,UAAU,GAAG,IAAI,CAACE,kBAAkB;IAI1C,IAAIF,UAAU,KAAK,IAAI,EAAE;MACvB,MAAMU,aAAa,GAAG;QACpB7B,KAAK,EAAEoB,OAAO,CAACpB,KAAK;QACpBe,IAAI,EAAE,IAAI,CAACe,cAAc,CAACV,OAAO,CAACL,IAAI;OACvC;MAID,IAAIK,OAAO,CAACrB,EAAE,EAAE;QAEd,IAAI,CAACD,eAAe,CAACiC,aAAa,CAACZ,UAAU,CAACa,QAAQ,EAAE,EAAEZ,OAAO,CAACrB,EAAE,CAACiC,QAAQ,EAAE,EAAEH,aAAa,CAAC,CAC5FI,SAAS,CACR,MAAK;UACH,MAAMzB,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;UACjE,IAAIX,QAAQ,IAAIA,QAAQ,CAACN,QAAQ,EAAE;YACjC,MAAMmC,eAAe,GAAG7B,QAAQ,CAACN,QAAQ,CAACiC,IAAI,CAACG,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAKqB,OAAO,CAACrB,EAAE,CAAC;YACxE,IAAIsC,eAAe,EAAE;cACnBE,MAAM,CAACC,MAAM,CAACH,eAAe,EAAEjB,OAAO,CAAC;;;UAG3C,IAAI,CAACO,WAAW,CAAC,wCAAwC,CAAC;UAC1D,IAAI,CAACL,eAAe,CAACmB,KAAK,EAAE;QAC9B,CAAC,EACAC,KAAK,IAAK,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC,CAC3C;OACJ,MAAM;QAEL,IAAI,CAAC5C,eAAe,CAAC8C,UAAU,CAACzB,UAAU,CAACa,QAAQ,EAAE,EAAEH,aAAa,CAAC,CAClEI,SAAS,CACPY,UAAU,IAAI;UACb,MAAMrC,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;UACjE,IAAIX,QAAQ,EAAE;YACZ,IAAI,CAACA,QAAQ,CAACN,QAAQ,EAAE;cACtBM,QAAQ,CAACN,QAAQ,GAAG,EAAE;;YAExBM,QAAQ,CAACN,QAAQ,CAAC4C,IAAI,CAACD,UAAU,CAAC;;UAEpC,IAAI,CAAClB,WAAW,CAAC,sCAAsC,CAAC;UAExD,IAAI,CAACL,eAAe,CAACmB,KAAK,EAAE;QAE9B,CAAC,EACAC,KAAK,IAAK,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC,CAC3C;;;EAGT;EAGQZ,cAAc,CAACf,IAAS;IAC9B,MAAMgC,cAAc,GAA8B;MAChD,MAAM,EAAE,CAAC;MACT,OAAO,EAAE;KACV;IACD,OAAOA,cAAc,CAAChC,IAAI,CAAC,IAAI,CAAC;EAClC;EACQ4B,mBAAmB,CAACD,KAAU;IACpCpC,OAAO,CAACoC,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCpC,OAAO,CAACoC,KAAK,CAAC,gBAAgB,EAAEM,IAAI,CAACC,SAAS,CAACP,KAAK,CAACA,KAAK,CAAC,CAAC;IAC5D,IAAI,CAACf,WAAW,CAACe,KAAK,CAACA,KAAK,EAAEQ,OAAO,IAAI,4BAA4B,EAAE,OAAO,CAAC;EACjF;EAGAvB,WAAW,CAACwB,GAAW,EAAEpC,OAA4B,SAAS;IAC5DrB,IAAI,CAAC0D,IAAI,CAAC;MACRC,IAAI,EAAEtC,IAAI;MACVf,KAAK,EAAEmD,GAAG;MACVG,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,KAAK;MACfC,iBAAiB,EAAE,KAAK;MACxBC,KAAK,EAAE,IAAI;MACXC,WAAW,EAAE;QAAEC,SAAS,EAAE;MAAO;KAClC,CAAC;EACJ;EACEC,aAAa,CAACzC,UAAkB,EAAE0C,SAAiB;IACjD,IAAI,CAAC/D,eAAe,CAAC8D,aAAa,CAACzC,UAAU,CAACa,QAAQ,EAAE,EAAE6B,SAAS,CAAC7B,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC,MAAK;MAC7F,MAAMzB,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;MACjE,IAAIX,QAAQ,IAAIA,QAAQ,CAACN,QAAQ,EAAE;QACjCM,QAAQ,CAACN,QAAQ,GAAGM,QAAQ,CAACN,QAAQ,CAAC4D,MAAM,CAACxB,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAK8D,SAAS,CAAC;;MAEvE,IAAI,CAAClC,WAAW,CAAC,wCAAwC,CAAC;IAC5D,CAAC,EAAEe,KAAK,IAAG;MACT,IAAI,CAACf,WAAW,CAACe,KAAK,EAAE,OAAO,CAAC;IAClC,CAAC,CAAC;EACJ;EACAqB,YAAY,CAAC5C,UAAkB;IAC7B,IAAI,CAACrB,eAAe,CAACkE,eAAe,CAAC7C,UAAU,CAACa,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAEzB,QAAQ,IAAI;MACjF,MAAMyD,gBAAgB,GAAG,IAAI,CAAC/B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;MACzE,IAAI8C,gBAAgB,EAAE;QACpBA,gBAAgB,CAAC/D,QAAQ,GAAGM,QAAQ,CAACN,QAAQ;;IAEjD,CAAC,CAAC;EACJ;EACAgE,wBAAwB,CAACL,SAAiB;IACxC,KAAK,MAAMrD,QAAQ,IAAI,IAAI,CAAC0B,YAAY,EAAE;MACxC,IAAI1B,QAAQ,CAACN,QAAQ,EAAE;QACrB,KAAK,MAAMkB,OAAO,IAAIZ,QAAQ,CAACN,QAAQ,EAAE;UACvC,IAAIkB,OAAO,CAACrB,EAAE,KAAK8D,SAAS,EAAE;YAC5B,OAAOrD,QAAQ,CAACT,EAAE;;;;;IAK1B,OAAOoE,SAAS;EAClB;EAGF;EACAC,SAAS,CAAChD,OAAgB,EAAEiD,QAAsB,IAAI;IACpD,IAAI,CAACC,iBAAiB,GAAGlD,OAAO,CAACrB,EAAE;IACnC,MAAMoB,UAAU,GAAG,IAAI,CAAC+C,wBAAwB,CAAC9C,OAAO,CAACrB,EAAE,CAAC;IAC5D,IAAI,CAACsB,kBAAkB,GAAGF,UAAU,KAAKgD,SAAS,GAAGhD,UAAU,GAAG,IAAI;IACtE,IAAI,CAACoD,aAAa,CAAChD,IAAI,EAAE;IACzB,IAAI,CAACnB,aAAa,EAAE;IACpB,IAAIiE,KAAK,EAAE;MACT,IAAI,CAACrD,WAAW,CAACQ,QAAQ,CAAC;QACxBzB,EAAE,EAAEsE,KAAK,CAACtE,EAAE;QACZC,KAAK,EAAEqE,KAAK,CAACrE,KAAK;QAClBe,IAAI,EAAEsD,KAAK,CAACtD,IAAI;QAChBE,UAAU,EAAEoD,KAAK,CAACpD;OACnB,CAAC;;EAEN;EAEAuD,SAAS;IAGP,IAAI,IAAI,CAACxD,WAAW,CAACU,OAAO,EAAE;MAC5B,IAAI,CAACC,WAAW,CAAC,kCAAkC,EAAE,OAAO,CAAC;MAC7D;;IAGF,MAAM0C,KAAK,GAAU,IAAI,CAACrD,WAAW,CAACY,KAAK;IAC3C,MAAMiC,SAAS,GAAG,IAAI,CAACS,iBAAiB;IACxC,MAAMnD,UAAU,GAAG,IAAI,CAACE,kBAAkB;IAI1C,IAAIF,UAAU,IAAI,IAAI,IAAI0C,SAAS,IAAI,IAAI,EAAE;MAC3C,MAAMY,WAAW,GAAG;QAClBzE,KAAK,EAAEqE,KAAK,CAACrE,KAAK;QAClBe,IAAI,EAAE,IAAI,CAAC2D,YAAY,CAACL,KAAK,CAACtD,IAAI,CAAC;QACnCE,UAAU,EAAEoD,KAAK,CAACpD;OACnB;MAID,IAAIoD,KAAK,CAACtE,EAAE,IAAI,IAAI,IAAIsE,KAAK,CAACtE,EAAE,KAAK,CAAC,EAAE;QAEvC;QACP,IAAI,CAACD,eAAe,CAAC6E,WAAW,CAACxD,UAAU,CAACa,QAAQ,EAAE,EAAE6B,SAAS,CAAC7B,QAAQ,EAAE,EAAEqC,KAAK,CAACtE,EAAE,CAACiC,QAAQ,EAAE,EAAEyC,WAAW,CAAC,CAC9GxC,SAAS,CACP2C,YAAY,IAAI;UACf;UACA,MAAMpE,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;UACjE,MAAMC,OAAO,GAAGZ,QAAQ,EAAEN,QAAQ,EAAEiC,IAAI,CAACG,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAK8D,SAAS,CAAC;UAEjE,IAAIzC,OAAO,EAAEyD,MAAM,EAAE;YACnB,MAAMC,KAAK,GAAG1D,OAAO,CAACyD,MAAM,CAACE,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjF,EAAE,KAAK6E,YAAY,CAAC7E,EAAE,CAAC;YACrE,IAAI+E,KAAK,GAAG,CAAC,CAAC,EAAE;cACd1D,OAAO,CAACyD,MAAM,GAAG,CACf,GAAGzD,OAAO,CAACyD,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,EACjCF,YAAY,EACZ,GAAGxD,OAAO,CAACyD,MAAM,CAACI,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,CACnC;;;UAIL,IAAI,CAACnD,WAAW,CAAC,4BAA4B,CAAC;UAC9C,IAAI,CAAC4C,aAAa,CAAC9B,KAAK,EAAE;QAC5B,CAAC,EACAC,KAAK,IAAK,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC,CAC3C;OACM,MAAM;QAER;QACL,IAAI,CAAC5C,eAAe,CAACoF,QAAQ,CAAC/D,UAAU,CAACa,QAAQ,EAAE,EAAE6B,SAAS,CAAC7B,QAAQ,EAAE,EAAEyC,WAAW,CAAC,CACtFxC,SAAS,CACPkD,QAAQ,IAAI;UACX;UACA,MAAM3E,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;UACjE,MAAMC,OAAO,GAAGZ,QAAQ,EAAEN,QAAQ,EAAEiC,IAAI,CAACG,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAK8D,SAAS,CAAC;UAEjE,IAAIzC,OAAO,EAAE;YACX,IAAI,CAACA,OAAO,CAACyD,MAAM,EAAEzD,OAAO,CAACyD,MAAM,GAAG,EAAE;YACxCzD,OAAO,CAACyD,MAAM,GAAG,CAAC,GAAGzD,OAAO,CAACyD,MAAM,EAAEM,QAAQ,CAAC,CAAC,CAAC;;;UAGlD,IAAI,CAACxD,WAAW,CAAC,0BAA0B,CAAC;UAC5C,IAAI,CAAC4C,aAAa,CAAC9B,KAAK,EAAE;QAC5B,CAAC,EACAC,KAAK,IAAK,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC,CAC3C;;KAEI,MAAM;MACL,IAAI,CAACf,WAAW,CAAC,uCAAuC,EAAE,OAAO,CAAC;;EAEtE;EAGQ+C,YAAY,CAAC3D,IAAS;IAC5B,MAAMqE,YAAY,GAA8B;MAC9C,MAAM,EAAE,CAAC;MACT,QAAQ,EAAE,CAAC;MACX,MAAM,EAAE,CAAC;MACT,SAAS,EAAE;KACZ;IACD,OAAOA,YAAY,CAACrE,IAAI,CAAC;EAC3B;EACAsE,WAAW,CAACjE,OAAgB,EAAEkE,OAAe;IAC3C,MAAMnE,UAAU,GAAG,IAAI,CAAC+C,wBAAwB,CAAC9C,OAAO,CAACrB,EAAE,CAAC;IAI5D,IAAIoB,UAAU,KAAKgD,SAAS,EAAE;MAC5B,IAAI,CAACrE,eAAe,CAACuF,WAAW,CAAClE,UAAU,CAACa,QAAQ,EAAE,EAAEZ,OAAO,CAACrB,EAAE,CAACiC,QAAQ,EAAE,EAAEsD,OAAO,CAACtD,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAC,MAAK;QAChH,MAAMzB,QAAQ,GAAG,IAAI,CAAC0B,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKoB,UAAU,CAAC;QACjE,MAAMkB,eAAe,GAAG7B,QAAQ,EAAEN,QAAQ,EAAEiC,IAAI,CAACG,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAKqB,OAAO,CAACrB,EAAE,CAAC;QAC1E,IAAIsC,eAAe,IAAIA,eAAe,CAACwC,MAAM,EAAE;UAC7CxC,eAAe,CAACwC,MAAM,GAAGxC,eAAe,CAACwC,MAAM,CAACf,MAAM,CAACkB,CAAC,IAAIA,CAAC,CAACjF,EAAE,KAAKuF,OAAO,CAAC;;QAE/E,IAAI,CAAC3D,WAAW,CAAC,sCAAsC,CAAC;MAC1D,CAAC,EAAEe,KAAK,IAAG;QACT,IAAI,CAACf,WAAW,CAACe,KAAK,EAAE,OAAO,CAAC;MAClC,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACf,WAAW,CAAC,iDAAiD,EAAE,OAAO,CAAC;;EAEhF;EAGA4D,UAAU,CAACnE,OAAgB;IACzB,MAAMD,UAAU,GAAG,IAAI,CAACE,kBAAkB;IAC1C,IAAIF,UAAU,KAAK,IAAI,EAAE;MACvB,IAAI,CAACrB,eAAe,CAAC0F,gBAAgB,CAACrE,UAAU,CAACa,QAAQ,EAAE,EAAEZ,OAAO,CAACrB,EAAE,CAACiC,QAAQ,EAAE,CAAC,CAACC,SAAS,CAAE4C,MAAM,IAAI;QACvGzD,OAAO,CAACyD,MAAM,GAAGA,MAAM;MACzB,CAAC,CAAC;;EAEN;EAEAY,cAAc,CAACjF,QAAa;IAC1B,IAAI,CAACA,QAAQ,CAACN,QAAQ,EAAE;MACtB,IAAI,CAAC6D,YAAY,CAACvD,QAAQ,CAACT,EAAE,CAAC;;IAEhCS,QAAQ,CAACkF,QAAQ,GAAG,CAAClF,QAAQ,CAACkF,QAAQ;EACxC;EAEAC,YAAY,CAACvE,OAAY;IACvB,IAAI,CAACA,OAAO,CAACyD,MAAM,EAAE;MACnB,IAAI,CAACU,UAAU,CAACnE,OAAO,CAAC;;IAE1BA,OAAO,CAACsE,QAAQ,GAAG,CAACtE,OAAO,CAACsE,QAAQ;EACtC;EAAC;qBA7UU/F,wBAAwB;EAAA;EAAA;UAAxBA,wBAAwB;IAAAiG;IAAAC;MAAA","names":["EventEmitter","Validators","Swal","TemplateDetailsComponent","constructor","fb","templateService","id","title","v","sections","initSectionForm","initFieldForm","ngOnInit","console","log","template","ngOnChanges","sectionParams","group","required","minLength","maxLength","type","fieldParams","isRequired","editSection","templateId","section","selectedTemplateId","addSectionModal","open","setValue","saveSection","invalid","showMessage","value","addSectionDTO","mapSectionType","updateSection","toString","subscribe","templateList","find","t","existingSection","s","Object","assign","close","error","handleErrorResponse","addSection","newSection","push","sectionTypeMap","JSON","stringify","message","msg","fire","icon","toast","position","showConfirmButton","timer","customClass","container","deleteSection","sectionId","filter","loadSections","getTemplateById","existingTemplate","getTemplateIdBySectionId","undefined","editField","field","selectedSectionId","addFieldModal","saveField","addFieldDTO","mapFieldType","updateField","updatedField","fields","index","findIndex","f","slice","addField","newField","fieldTypeMap","deleteField","fieldId","loadFields","getSectionFields","toggleSections","expanded","toggleFields","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrtemplategenerator\\components\\template-details\\template-details.component.ts"],"sourcesContent":["import { Component, Input, Output, ViewChild , EventEmitter  } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalComponent } from 'angular-custom-modal';\nimport Swal from 'sweetalert2';\nimport { TemplateService } from 'src/app/qrtemplategenerator/services/template.service';\nimport { Template } from 'src/app/qrtemplategenerator/Models/Template';\nimport { Section } from 'src/app/qrtemplategenerator/Models/Section';\nimport { Field } from 'src/app/qrtemplategenerator/Models/Field';\n\n\n@Component({\n  selector: 'app-template-details',\n  templateUrl: './template-details.component.html'\n})\nexport class TemplateDetailsComponent {\n  @Input() template: Template = {\n    id: 0,\n    title: '',\n    v: '',\n    sections: []\n  };\n  \n  @Output() sectionUpdated = new EventEmitter<void>(); \n  @ViewChild('addSectionModal') addSectionModal!: ModalComponent;\n  @ViewChild('addFieldModal') addFieldModal!: ModalComponent;\n\n  sectionParams!: FormGroup;\n  fieldParams!: FormGroup;\n  selectedSection?: Section;\n\n\n  \n  selectedTemplateId: number | null = null;\n  selectedSectionId: number | null = null;\n  templateList: Template[] = [];\n\n\n  \n\n  constructor(private fb: FormBuilder, private templateService: TemplateService) {\n    this.initSectionForm();\n    this.initFieldForm();\n  }\n\n  ngOnInit(): void {\n    // Any additional logic when the template details component is initialized\n    console.log(this.template);  // Log to ensure template data is correctly passed\n  }\n  ngOnChanges() {\n    console.log('Template received:', this.template);\n  }\n  \n\n  initSectionForm() {\n    this.sectionParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n    });\n  }\n\n  initFieldForm() {\n    this.fieldParams = this.fb.group({\n      id: [0],\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n      type: ['', Validators.required],\n      isRequired: [false],\n    });\n  }\n\n  // Section methods\n  editSection(templateId: number, section: Section | null = null) {\n    this.selectedTemplateId = templateId;\n    this.addSectionModal.open();\n    this.initSectionForm();\n    if (section) {\n      this.sectionParams.setValue({\n        id: section.id,\n        title: section.title,\n        type: section.type,\n      });\n    }\n  }\n\n  saveSection() {\n    if (this.sectionParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const section: Section = this.sectionParams.value;\n    const templateId = this.selectedTemplateId;\n  \n    \n  \n    if (templateId !== null) {\n      const addSectionDTO = {\n        title: section.title,\n        type: this.mapSectionType(section.type) \n      };\n  \n   \n  \n      if (section.id) {\n       \n        this.templateService.updateSection(templateId.toString(), section.id.toString(), addSectionDTO)\n          .subscribe(\n            () => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template && template.sections) {\n                const existingSection = template.sections.find(s => s.id === section.id);\n                if (existingSection) {\n                  Object.assign(existingSection, section);\n                }\n              }\n              this.showMessage('Section has been updated successfully.');\n              this.addSectionModal.close();\n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      } else {\n       \n        this.templateService.addSection(templateId.toString(), addSectionDTO)\n          .subscribe(\n            (newSection) => {\n              const template = this.templateList.find(t => t.id === templateId);\n              if (template) {\n                if (!template.sections) {\n                  template.sections = [];\n                }\n                template.sections.push(newSection);\n              }\n              this.showMessage('Section has been added successfully.');\n              \n              this.addSectionModal.close();\n             \n            },\n            (error) => this.handleErrorResponse(error)\n          );\n      }\n    }\n  }\n  \n \n  private mapSectionType(type: any): number {\n    const sectionTypeMap: { [key: string]: number } = {\n      'Form': 0,\n      'Table': 1,\n    };\n    return sectionTypeMap[type] ?? 0; \n  }\n  private handleErrorResponse(error: any) {\n    console.error('Error response:', error);\n    console.error('Error details:', JSON.stringify(error.error));\n    this.showMessage(error.error?.message || 'An unknown error occurred!', 'error');\n  }\n\n\n  showMessage(msg: string, type: 'success' | 'error' = 'success') {\n    Swal.fire({\n      icon: type,\n      title: msg,\n      toast: true,\n      position: 'top',\n      showConfirmButton: false,\n      timer: 3000,\n      customClass: { container: 'toast' },\n    });\n  }\n    deleteSection(templateId: number, sectionId: number) {\n      this.templateService.deleteSection(templateId.toString(), sectionId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        if (template && template.sections) {\n          template.sections = template.sections.filter(s => s.id !== sectionId);\n        }\n        this.showMessage('Section has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    }\n    loadSections(templateId: number) {\n      this.templateService.getTemplateById(templateId.toString()).subscribe((template) => {\n        const existingTemplate = this.templateList.find(t => t.id === templateId);\n        if (existingTemplate) {\n          existingTemplate.sections = template.sections;\n        }\n      });\n    }\n    getTemplateIdBySectionId(sectionId: number): number | undefined {\n      for (const template of this.templateList) {\n        if (template.sections) { \n          for (const section of template.sections) {\n            if (section.id === sectionId) {\n              return template.id;\n            }\n          }\n        }\n      }\n      return undefined;\n    }\n  \n\n  // Field methods\n  editField(section: Section, field: Field | null = null) {\n    this.selectedSectionId = section.id;\n    const templateId = this.getTemplateIdBySectionId(section.id);\n    this.selectedTemplateId = templateId !== undefined ? templateId : null; \n    this.addFieldModal.open();  \n    this.initFieldForm();  \n    if (field) {\n      this.fieldParams.setValue({\n        id: field.id,\n        title: field.title,\n        type: field.type,\n        isRequired: field.isRequired,\n      });\n    }\n  }\n\n  saveField() {\n   \n    \n    if (this.fieldParams.invalid) {\n      this.showMessage('Please fill all required fields.', 'error');\n      return;\n    }\n  \n    const field: Field = this.fieldParams.value;\n    const sectionId = this.selectedSectionId;\n    const templateId = this.selectedTemplateId;\n  \n  \n  \n    if (templateId != null && sectionId != null) {\n      const addFieldDTO = {\n        title: field.title,\n        type: this.mapFieldType(field.type), // Convert type correctly\n        isRequired: field.isRequired,\n      };\n  \n    \n  \n      if (field.id != null && field.id !== 0) {\n       \n       // In saveField() update case\nthis.templateService.updateField(templateId.toString(), sectionId.toString(), field.id.toString(), addFieldDTO)\n.subscribe(\n  (updatedField) => {\n    // Find and update the local field\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section?.fields) {\n      const index = section.fields.findIndex(f => f.id === updatedField.id);\n      if (index > -1) {\n        section.fields = [\n          ...section.fields.slice(0, index),\n          updatedField,\n          ...section.fields.slice(index + 1)\n        ];\n      }\n    }\n    \n    this.showMessage('Field updated successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      } else {\n      \n     // In saveField() add case\nthis.templateService.addField(templateId.toString(), sectionId.toString(), addFieldDTO)\n.subscribe(\n  (newField) => {\n    // Find and update the local data\n    const template = this.templateList.find(t => t.id === templateId);\n    const section = template?.sections?.find(s => s.id === sectionId);\n    \n    if (section) {\n      if (!section.fields) section.fields = [];\n      section.fields = [...section.fields, newField]; // Immutable update\n    }\n    \n    this.showMessage('Field added successfully');\n    this.addFieldModal.close();\n  },\n  (error) => this.handleErrorResponse(error)\n);\n      }\n    } else {\n      this.showMessage('Template ID or Section ID is missing.', 'error');\n    }\n  }\n  \n \n  private mapFieldType(type: any): number {\n    const fieldTypeMap: { [key: string]: number } = {\n      'Text': 0,\n      'Number': 1,\n      'Date': 2,\n      'Boolean': 3,\n    };\n    return fieldTypeMap[type]; \n  }\n  deleteField(section: Section, fieldId: number) {\n    const templateId = this.getTemplateIdBySectionId(section.id); \n    \n   \n  \n    if (templateId !== undefined) {  \n      this.templateService.deleteField(templateId.toString(), section.id.toString(), fieldId.toString()).subscribe(() => {\n        const template = this.templateList.find(t => t.id === templateId);\n        const existingSection = template?.sections?.find(s => s.id === section.id);\n        if (existingSection && existingSection.fields) {\n          existingSection.fields = existingSection.fields.filter(f => f.id !== fieldId);\n        }\n        this.showMessage('Field has been deleted successfully.');\n      }, error => {\n        this.showMessage(error, 'error');\n      });\n    } else {\n      this.showMessage('Failed to delete field: Template ID is missing.', 'error');\n    }\n  }\n\n\n  loadFields(section: Section) {\n    const templateId = this.selectedTemplateId;\n    if (templateId !== null) {\n      this.templateService.getSectionFields(templateId.toString(), section.id.toString()).subscribe((fields) => {\n        section.fields = fields;\n      });\n    }\n  }\n\n  toggleSections(template: any) {\n    if (!template.sections) {\n      this.loadSections(template.id);\n    }\n    template.expanded = !template.expanded;\n  }\n  \n  toggleFields(section: any) {\n    if (!section.fields) {\n      this.loadFields(section);\n    }\n    section.expanded = !section.expanded;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}