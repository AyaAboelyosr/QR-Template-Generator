{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RecordService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7110/api/Record';\n  }\n  createRecord(record) {\n    console.log('Record:', record); // Debug log\n    return this.http.post(`${this.apiUrl}`, record).pipe(catchError(this.handleError));\n  }\n  updateRecord(record) {\n    return this.http.put(`${this.apiUrl}`, record).pipe(catchError(this.handleError));\n  }\n  getRecords() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  getRecordPreview(recordId) {\n    return this.http.get(`${this.apiUrl}/${recordId}`).pipe(catchError(this.handleError));\n  }\n  deleteRecord(recordId) {\n    return this.http.delete(`${this.apiUrl}/${recordId}`);\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static #_ = this.ɵfac = function RecordService_Factory(t) {\n    return new (t || RecordService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecordService,\n    factory: RecordService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,aAAa;EAKxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,mCAAmC;EAEb;EACxCC,YAAY,CAACC,MAAU;IACpBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC,CAAC,CAAC;IAC9B,OAAO,IAAI,CAACF,IAAI,CACbK,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,EAAE,EAAEJ,MAAM,CAAC,CACnCK,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EACFC,YAAY,CAAEP,MAAW;IACvB,OAAO,IAAI,CAACF,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACJ,MAAM,EAAE,EAAEJ,MAAM,CAAC,CAChDK,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EACAG,UAAU;IACR,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAmB,GAAG,IAAI,CAACN,MAAM,EAAE,CAAC;EAC1D;EACAO,gBAAgB,CAAEC,QAAqB;IACrC,OAAO,IAAI,CAACd,IAAI,CAACY,GAAG,CAAgB,GAAG,IAAI,CAACN,MAAM,IAAIQ,QAAQ,EAAE,CAAC,CAC9DP,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EACAO,YAAY,CAACD,QAAgB;IAC3B,OAAO,IAAI,CAACd,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACV,MAAM,IAAIQ,QAAQ,EAAE,CAAC;EACvD;EAESN,WAAW,CAACS,KAAwB;IACvC,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MAErCD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MAELF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;;IAE/EjB,OAAO,CAACc,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOrB,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAACJ,YAAY,CAAC,CAAC;EAClD;EAAC;qBA1CMpB,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAyB,SAAbzB,aAAa;IAAA0B,YAFZ;EAAM","names":["catchError","throwError","RecordService","constructor","http","createRecord","record","console","log","post","apiUrl","pipe","handleError","updateRecord","put","getRecords","get","getRecordPreview","recordId","deleteRecord","delete","error","errorMessage","ErrorEvent","message","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Electronica Care\\Downloads\\QRCodeGenerator-main\\QR-Generator\\src\\app\\qrgenerator\\services\\record.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { RecordPreview } from '../viewmodels/record-preview';\nimport { RecordListItem } from '../viewmodels/record-list-item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecordService {\n\n  \n  private apiUrl = 'https://localhost:7110/api/Record'; \n\n  constructor(private http: HttpClient) {}\n createRecord(record:any): Observable<any> {\n    console.log('Record:', record); // Debug log\n      return this.http\n        .post<any>(`${this.apiUrl}`, record)\n        .pipe(catchError(this.handleError));\n    }\n  updateRecord( record: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}`, record)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n  getRecords(): Observable<any[]> {\n    return this.http.get<RecordListItem[]>(`${this.apiUrl}`);\n  }\n  getRecordPreview( recordId: number|null): Observable<RecordPreview> {\n    return this.http.get<RecordPreview>(`${this.apiUrl}/${recordId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n  deleteRecord(recordId: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${recordId}`);\n  }\n\n   private handleError(error: HttpErrorResponse): Observable<never> {\n        let errorMessage = 'An unknown error occurred!';\n        if (error.error instanceof ErrorEvent) {\n          \n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n       \n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.error.message}`;\n        }\n        console.error(errorMessage);\n        return throwError(() => new Error(errorMessage));\n      }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}